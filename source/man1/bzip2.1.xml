<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: bzip2.1.xml,v 1.4 2002/12/20 22:54:36 nilgun Exp $
     ******************************************************************** -->
<refentry id="tr-man1-bzip2">
  <refmeta>
    <manvolnum>1</manvolnum>
    <refentrytitle>bzip2</refentrytitle>
  </refmeta>
  <refnamediv><refname>bzip2</refname>
    <refpurpose>blok sıralamalı dosya sıkıştırıcı v1.0.2</refpurpose>
  </refnamediv><refnamediv><refname>bunzip2</refname>
    <refpurpose>sıkıştırılmış dosyaları açar</refpurpose>
  </refnamediv><refnamediv><refname>bzcat</refname>
    <refpurpose>dosyaları standart çıktıda açar</refpurpose>
  </refnamediv><refnamediv><refname>bzip2recover</refname>
    <refpurpose>zarar görmüş bzip2 dosyalarındaki verileri kurtarır</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis><command>bzip2   </command>[ <command>-cdfkqstvzVL123456789</command> ] [ <emphasis>dosyalar</emphasis> ... ]
<command>bunzip2 </command>[ <command>-fkvsVL</command> ] [ <emphasis>dosyalar</emphasis> ... ]
<command>bzcat   </command>[ <command>-s</command> ] [ <emphasis>dosyalar</emphasis> ... ]
<command>bzip2recover </command><emphasis>dosyaismi</emphasis>
</synopsis>
  </refsynopsisdiv>
  <refsect1><title>AÇIKLAMA</title><para>
<command>bzip2</command>, Burrows-Wheeler  blok sıralamalı metin sıkıştırma algoritmasını ve Huffman  kodlamasını  kullanarak  dosyaları  sıkıştırır.  Sıkıştırma oranı  geleneksel  LZ77/LZ78  tabanlı  sıkıştırma araçlarından çok daha iyidir. PPM ailesi istatistiksel sıkıştırıcıların performansına oldukça yakındır.
    </para><para>
Komut  satırı  seçenekleri  kasıtlı  olarak  GNU  <command>gzip</command>'e oldukça benzer şekilde yapılmıştır, fakat birebir aynı değillerdir.
    </para><para>
<command>bzip2</command>, komut satırı seçeneklerine eşlik edecek dosya  isimlerinin  listesini  ister.  Her  bir dosya sıkıştırılmış sürümü ile değiştirilir ve ismi "<filename>orjinal_dosya.bz2</filename>" şekline dönüştürülür.  Her  bir  sıkıştırılmış dosya,  orjinal dosya ile aynı izinlere, aynı düzenlenme tarihlerine ve mümkün ise aynı iyeliklere  sahiptir.  Bu  sayede  sıkıştırılmış  dosya açıldığı zaman orjinal dosya elde edilmiş olur. Dosya isimlerini yönetmek işi, orjinal dosya ismini koruyamayacak, izinler ve iyelikleri veya tarihleri  kendi  dosya  sistemi  içinde bulunduramayacak dosya sistemlerinin (mesela MS-DOS) olduğu düşüncesi ile yürütülmektedir.  Muhtemel dosya ismi uzunluğu kısıtlamalarını da unutmamak gerekir.
    </para><para>
<command>bzip2</command> ve <command>bunzip2</command> öntanımlı olarak, varolan dosyanın üzerine yazmazlar. Şayet bunu yapmak isterseniz <command>-f</command> seçeneğini kullanmanız gerekir.
    </para><para>
Şayet  dosya  ismi  belirtilmezse,  <command>bzip2</command>  standart  girdiden  standart çıktıya  sıkıştırma  işlemi  yapar.  Bu  durumda,  <command>bzip2</command>  sıkıştırılmış çıktıyı bir terminale yazmayı reddedecektir, bu nedenle böyle  bir  şey yapmak tamamen anlamsız ve amaçsız olacaktır.
     </para><para>
<command>bunzip2</command> (veya <command>bzip2  -d</command>)  belirtilen bütün dosyaları açar. <command>bzip2</command> tarafından sıkıştırılmamış dosyalar tespit edilir ve yok sayılır, ardından bir uyarı  mesajı verilir. <command>bzip2</command>, sıkıştırılmış dosyadan açılacak dosyaya aktarılacak dosya ismini şu şekilde tespit etmeye çalışır:
</para><para><literallayout>dosyaismi.bz2   =>    dosyaismi
dosyaismi.bz    =>    dosyaismi
dosyaismi.tbz2  =>    dosyaismi.tar
dosyaismi.tbz   =>    dosyaismi.tar
başkabirisim    =>    başkabirisim.out
</literallayout></para><para>
Şayet dosya yukarıda belirtilen soneklerden birisine sahip değilse, <command>bzip2</command> mızmızlanır ve orijinal dosya ismini sonuna <literal>.out</literal> ekleyerek kullanır.
    </para><para>
Sıkıştırma  işleminde  olduğu gibi, dosya ismi belirtmeden yapılan açma işleminde standart girdiden standart çıktıya açma işlemi yapılır.
    </para><para>
<command>bunzip2</command>, iki ya da daha fazla sıkıştırılmış  dosyadan  oluşan  birleşik bir  dosyayı  doğru  bir  şekilde  açacaktır.  Sonuçta açılmış dosyalar birleşik olarak elde edilir. Birleşik sıkıştırılmış dosyaların bütünlük sınaması yapılması (<command>-t</command>) özelliği de desteklenmektedir.
    </para><para>
Ayrıca <command>-c</command> seçeneğini belirterek standart çıktıda   dosyaları sıkıştırabilir veya açabilirsiniz. Çoklu dosyalar bu şekilde sıkıştırılabilir veya açılabilir. Sonuç çıktıları standart çıktıya peşpeşe  gönderilir.  Bu şekilde çoklu dosya sıkıştırma çoklu sıkıştırılmış dosya  temsilcilerinin bulunduğu bir akım üretir. Bu tür bir akım sadece bzip 0.9.0 veya daha sonraki bir sürümle düzgün bir şekilde açılabilir. Daha eski sürümler  ilk dosyayı açtıktan sonra dururlar.
    </para><para>
<command>bzcat</command> (veya <command>bzip2 -dc</command>) belirtilen  bütün dosyaları standart çıktıya açar.
    </para><para>
<command>bzip2</command>, argümanları sırayla <literal>BZIP2</literal> ve <literal>BZIP</literal> ortam değişkenlerinden okurlar ve bu argümanları komut satırı argümanlarını okumadan önce  uygularlar. Bu, öntanımlı argümanların uygulanması için elverişli bir yol sağlar.
    </para><para>
Sıkıştırma  işlemi,  sıkıştırılmış dosya orijinalinden biraz büyük olsa bile, mutlaka yapılır. Yüz bayttan  daha  küçük  dosyalar  şişmanlamaya meyillidir.  Çünkü  sıkıştırma  algoritması  ilk 50 bayta yazılacak bir sabite sahiptir. Rasgele veri (pek çok dosya  sıkıştırıcısının  çıktısı dahil) bayt başına 8.05 bitlik bir oran ile kodlanır. Bu da %0.5lik bir genişlemeye sebep verir.
    </para><para>
Bir özdenetim mekanizması olarak, <command>bzip2</command> 32 bitlik CRC  kullanır ve açılan  dosya ile orijinal sıkıştırılmış dosyanın aynı olup olmadığını kontrol eder. Bu tedbir sıkıştırılmış dosyada meydana gelebilecek bozulmalar ve <command>bzip2</command>'de olması muhtemel yazılım hatalarına karşı güvenlik sağlar. Elden geçirilen her bir dosya için tespit edilemeyecek hata oranı 4 milyarda bir değişiklik oranının altındadır. Bu orandan daha küçük değişiklikler mikroskobiktir ve tespit edilemeyebilir.  Bununla birlikte uyanık  olmakta fayda vardır, kontrol açma işlemi esnasında yapılır ve sadece bir takım şeylerin yanlış olduğunu söyler. Orijinal açılmış verileri kurtarmanıza yardımcı olmaz. Bu durumda, verileri kurtarmak için <command>bzip2recover</command> kullanmalısınız.
    </para><refsect2><title>Geri dönen değerler</title>
    <para>
Normal çıktı için 0, çevresel  sorunlar  için  1  (dosya  bulunamaması, geçersiz seçenekler, G/Ç hataları, vs..), sıkıştırılmış dosyada bozukluk için 2, bzip2'nin paniklemesine sebep olan  dahili  bir  tutarlılık hatası için 3 (yazılım hatası).
    </para></refsect2></refsect1>
  <refsect1><title>SEÇENEKLER</title><para><glosslist><glossentry>
        <glossterm><command>-a</command></glossterm>
        <glossterm><command>--ascii</command></glossterm>
        <glossdef><para>Ascii  metin kipi: satır sonlarını yerel ayarlara göre dönüştürür. Bu seçenek, sadece Unix dışı birkaç sistemde desteklenir. Örneğin MSDOS'da sıkıştırma esnasında CRLF'ler LF'ye çevrilir ve açma işleminde LF'ler CRLF'ye dönüştürülür.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-c</command></glossterm>
        <glossterm><command>--stdout</command></glossterm>
        <glossdef><para>Standart çıktıda sıkıştırılır veya açar.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-d</command></glossterm>
        <glossterm><command>--decompress</command></glossterm>
        <glossdef><para>Mutlaka açma işlemi yapılır. <command>bzip2</command>, <command>bunzip2</command> ve <command>bzcat</command> aslında aynı yazılımdır ve yapılması gereken işlem, kullanılan yazılım ismine göre kararlaştırılır. Bu seçenek, bu yöntemi yoksayar ve <command>bzip2</command>'yi açma işlemine zorlar.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-z</command></glossterm>
        <glossterm><command>--compress</command></glossterm>
        <glossdef><para><command>-d</command> nin zıddı: hangi isim ile çağrılırsa çağrılsın  mutlaka sıkıştırma yapılır (örneğin, <command>bunzip2</command> komutuna bu seçeneği vererek sıkıştırma yapmasını sağlayabilirsiniz).
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-t</command></glossterm>
        <glossterm><command>--test</command></glossterm>
        <glossdef><para>Belirtilen dosya veya dosyaların bütünlüğünü  kontrol eder, gerçekte açma işlemi yapmaz. Bu seçenek ile bir deneme açılımı yapılmış olur ve sonuçlar belirtilir.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-f</command></glossterm>
        <glossterm><command>--force</command></glossterm>
        <glossdef><para>Çıktı dosyasının üzerine yazmaya zorlar. Normal olarak, <command>bzip2</command> varolan bir dosyanın üzerine yazmayacaktır. Ayrıca bu seçenek <command>bzip2</command>'yi dosyalara olan sabit bağları kırmaya zorlar, böylece bu bağlarda üzerine yazma yapılmaz.
        </para><para>
<command>bzip2</command> normalde doğru sihirli başlık baytlarına sahip olmayan dosyaları açmayı rededecektir. Şayet <command>-f</command> kullanılır ise, bu dosyaları  değiştirilmeden geçecektir. GNU <command>gzip</command> de bu şekilde davranır.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-k</command></glossterm>
        <glossterm><command>--keep</command></glossterm>
        <glossdef><para>
Sıkıştırma veya açma işlemi esnasında orjinal dosyaları  silmez, saklar.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-s</command></glossterm>
        <glossterm><command>--small</command></glossterm>
        <glossdef><para>Sıkıştırma, açma ve sınama işlemleri için bellek ihtiyacını azaltır. Dosyalar bayt bloğu başına 2.5 bayt gerektiren değişiklik  yapılmış bir algoritma ile açılır ve sınanır. Bunun anlamı, herhangi bir dosyanın 2300k lık bir bellek alanı içinde açılabileceğidir ancak  başarım,  normal hızın yarısına kadar düşer.
        </para><para>
Sıkıştırma esnasında, <command>-s</command> seçeneği ile 200k lık blok  boyutu seçilir, bu belleği de aynı şekilde sınırlar ve sıkıştırma oranını artırır. Uzun lafın kısası, makinenizin belleği 8MB'dan daha az ise <command>-s</command> seçeneğini her şeyde kullanın. Aşağıdaki <xref linkend="tr-man1-bzip2-mem"/> bölümüne bakınız.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-q</command></glossterm>
        <glossterm><command>--quiet</command></glossterm>
        <glossdef><para>Gerekli olmayan uyarılar verilmez. G/Ç ve diğer önemli hata iletileri gizlenmez.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-v</command></glossterm>
        <glossterm><command>--verbose</command></glossterm>
        <glossdef><para>Ayrıntı kipi: işlenen her bir dosya için sıkıştırma oranlarını gösterir. Daha fazla <command>-v</command> ayrıntı oranını artıracaktır. Teşhis amaçlı kullanıma uygun olarak pek çok bilgi yazılım tarafından bildirilecektir.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-L</command></glossterm>
        <glossterm><command>--license</command></glossterm>
        <glossterm><command>-V</command></glossterm>
        <glossterm><command>--version</command></glossterm>
        <glossdef><para>Yazılımın sürüm, lisans, koşul ve kurallarını görüntüler.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>-1 </command>(veya <command>--fast</command>) den <command>-9 </command>(veya <command>--best</command>) a kadar</glossterm>
        <glossdef><para>Sıkıştırma yaparken blok boyutlarını 100k, 200k, ..,  900k şeklinde ayarlar. Çözme işleminde bir etkisi yoktur. Aşağıdaki
<xref linkend="tr-man1-bzip2-mem"/> bölümüne bakınız. <command>--fast</command> ve <command>--best</command> seçenek isimleri  GNU <command>gzip</command> uyumluluğunu sağlamak içindir. Açıkçası, <command>--fast</command> gözle görülür bir hız artışı sağlamaz ve <command>--best</command> sadece öntanımlı değerlerin seçilmesini sağlar.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>--</command></glossterm>
        <glossdef><para>Ardından  belirtilen  bütün  argümanları  dosya  isimleri olarak kabul eder. Bu argümanların tek çizgi ile başlamış olmaları bile
önemli değildir. Böylece tek çizgi ile başlayan dosya isimlerini
kullanabilirsiniz. Örneğin: <command>bzip2 -- -benim_dosyam</command>.
        </para></glossdef>
      </glossentry><glossentry>
        <glossterm><command>--repetitive-fast</command></glossterm>
        <glossterm><command>--repetitive-best</command></glossterm>
        <glossdef><para>Bu seçenekler sürüm 0.9.5 ve üzerinde gereksizdir. Daha  eski sürümlerde, bazı kaba kontrollerin yapılmasını sağlamaya yönelik seçeneklerdir. Bazen faydalı  olabilmekte  idi.  0.9.5  ve  üstü sürümler  bu  ayarların  yapılmasına  gerek  bırakmayan daha iyi algoritmalar kullanmaktadırlar.
        </para></glossdef>
      </glossentry>
    </glosslist></para>
  </refsect1><refsect1 id="tr-man1-bzip2-mem"><title>BELLEK YÖNETİMİ</title><para>
<command>bzip2</command> büyük dosyaları bloklar halinde sıkıştırır. Blok  boyutları, hem sıkıştırma oranını, hem de sıkıştırma/açma için gereken bellek miktarını etkiler. <command>-1</command> den <command>-9</command> a kadarki seçenekler ile istenen blok  boyutlarını 100.000 bayttan 900.000 bayta (varsayılan değer budur) kadar tanımlamasını sağlar. Açma işlemi sırasında, sıkıştırılmış dosyanın baş kısmından sıkıştırma esnasında kullanılan blok boyutu okunur ve daha sonra <command>bunzip2</command> kendisi için gerekli olan bellek alanını ayırır ve oraya yerleşir. Sıkıştırma blok boyutları  sıkıştırılmış dosya içinde saklandığı için, <command>-1</command> den <command>-9</command> a kadar olan seçenekler açma işlemi esnasında geçersizdir. Şayet bu seçenekleri belirtirseniz, program bunları gözardı edecektir.
    </para><para>
Sıkıştırma ve açma gereksinimleri, bayt cinsinden, yaklaşık olarak:
</para><para><literallayout>Sıkıştırma:   400k + ( 8 x blok boyu )

      Açma:   100k + ( 4 x blok boyu ) veya
              100k + ( 2.5 x blok boyu )
</literallayout></para><para>
Daha büyük blok boyutları hızlı bir şekilde azalan sınıra yakın dönüşler verir. Sıkıştırmanın pek çoğu, blok boyutunun ilk iki veya üç yüz k lık kısmından elde edilir. Bu kuralı, küçük makinelerde <command>bzip2</command> kullanırken   aklınızdan  çıkarmayın.  Ayrıca aklınızdan çıkarmamanız gereken diğer bir noktada, açma sırasındaki bellek gereksinimlerinizin, sıkıştırma sırasında  kullandığınız blok boyutları ile birebir alakalı olduğudur.
    </para><para>
900k lık öntanımlı blok boyutu ile sıkıştırılan dosyalar için,  <command>bunzip2</command> açma işlemi sırasında 3700 kB lık belleğe ihtiyaç duyacaktır. 4 MB lık belleğe sahip bir makinede herhangi bir dosyayı açmak  için,  <command>bunzip2</command>, ihtiyaç  duyulan  bellek  miktarının  yarısı ile (takriben 2300KB) açma işlemini gerçekleştirecek bir argümana  sahiptir. Bu argümanın kullanılması açma hızını da yarı yarıya düşürecektir.  Çok gerekli olmadıkça bu seçeneği (<command>-s</command>)  kullanmayın.  (*Ç.N: günümüzde kullanılan makineler için bu seçenek oldukça nostaljik görünebilir ama test ve eğitim  amaçlı oldukça düşük özeliklere sahip ikinci  veya üçüncü makineleri olanlar bu seçeneğin değerini anlayacaktır. P233 makinede 16 MB edoram ile harikalar :-) yaratıyor.)
    </para><para>
Genel kural olarak, bellek sınırlarınız elverdiği sürece,  mümkün olan en büyük  blokları kullanın. Böylece azami sıkıştırma elde edilir. Sıkıştırma ya da açma hızının aslında blok boyutu ile bir ilgisi yoktur.
    </para><para>
Diğer bir önemli nokta da dosyalara tek bir bloğa sığacak dosyalara yapılan işlemdir.  Aslında karşılaşılan pek çok dosya bir bloktan küçüktür. Dosya bir  bloktan küçük olduğundan, gerçekte kullanılan bellek miktarı normalde gerekenden küçük olur. Örneğin: 20.000 baytlık bir dosyayı <command>-9</command> seçeneği ile sıkıştırmak, sıkıştırıcının 7600k belleğe ihtiyaç duymasına    sebep olacaktır ama gerçekte sadece <literal>400k+20000*8=560kB</literal>  bellek kullanılacaktır. Aynı şekilde açma işlemi de 3700k lık bir bellek ayıracak ama  sadece <literal>100k+20000*4=180kB</literal> lık bir alanı kullanacaktır.
    </para><para>
Aşağıda değişik blok boyutlarının bellek kullanımını gösteren bir tablo bulacaksınız. Ayrıca Calgary Text Compression Corpus'da (Calgary  Metin Sıkıştırma Külliyatı) 14 dosyalık sıkıştırılmış toplam boyut olarak 3.141.622  bayt kayıtlıdır. Aşağıdaki sütunlar, blok boyutu ile sıkıştırma arasındaki ilgi  hakkında bir fikir verecektir. Büyük dosyalar için büyük blok boyutlarını kullanmak daha avantajlıdır. Çünkü Külliyat daha küçük dosyalar üzerine kuruludur.
</para><para>
<literallayout>
         Sıkıştırma  Açma        -s ile açma   Külliyat
Seçenek  kullanımı   kullanımı   kullanımı     boyutu

  -1      1200k       500k         350k        914704
  -2      2000k       900k         600k        877703
  -3      2800k      1300k         850k        860338
  -4      3600k      1700k        1100k        846899
  -5      4400k      2100k        1350k        845160
  -6      5200k      2500k        1600k        838626
  -7      6100k      2900k        1850k        834096
  -8      6800k      3300k        2100k        828642
  -9      7600k      3700k        2350k        828642
</literallayout></para>
  </refsect1><refsect1>
    <title>HASARLI DOSYADAN VERİ KURTARMA</title>
    <para>
<command>bzip2</command> dosyaları genellikle 900k lık bloklar halinde sıkıştırır. Her bir blok birbirinden bağımsız olarak ele alınır. Bir aygıt ya da aktarım hatası pek çok <command>.bz2</command> bloğunun hasar görmesine sebep olursa, zarar görmemiş bloklardaki verileri kurtarmak mümkün olabilir.
    </para><para>
Sıkıştırılmış her bir blok 48 bitlik bir şablon ile temsil edilir. Böylece blok sınırlarını kesin olarak bulmak mümkün olabilir. Ayrıca her bir blok kendi 32 bitlik CRC'sini bulundurur, böylece bozuk bloklar sağlam olanlardan ayırt edilebilir.
    </para><para>
<command>bzip2recover</command>, basitçe, <command>.bz2</command> dosyaların içindeki blokları tarayan bir yazılımdır. Buradaki her bir taranmış bloğu kendi <command>.bz2</command>  dosyasına aktarır. Sonuçların bütünlüğünü kontrol etmek için <command>bzip2 -t</command> komutunu kullanabilirsiniz. Ardından bozulmamış verileri açabilirsiniz.
    </para><para>
<command>bzip2recover</command> sadece hasarlı dosya ismini argüman olarak alır ve kurtardığı blokları "<filename>rec00001file.bz2</filename>", "<filename>rec00002file.bz2</filename>" şeklinde yazar. Bu isim numaralandırması sonradan yapılacak işlemlerdeki simgelemlerin kullanımı içindir. Örneğin, <command>bzip2 -dc rec*file.bz2 > kurtarılan_veri</command> komutu dosyaları doğru sıralama ile üretir.
    </para><para>
<command>bzip2recover</command> daha çok büyük <command>.bz2</command> dosyaları için faydalıdır çünkü bunlar daha çok blok içerirler. Tek bloktan oluşmuş hasarlı bir dosya ile bu yazılımı kullanmanın hiçbir anlamı yoktur, çünkü bozuk blok kurtarılamaz. Şayet herhangi bir hasar durumunda zararınızı en azda tutmak istiyorsanız, daha küçük blok boyutları kullanmanız akıllıca  olacaktır.
    </para>
  </refsect1><refsect1><title>BAŞARIM HAKKINDA</title><para>
Sıkıştırmanın sınıflandırma aşaması, birbirine benzer dizgeleri bir araya getirmektir. Bu nedenle tekrarlanan sembollerden oluşmuş dosyaların sıkıştırması (<literal>aabaabaabaab</literal>  ... gibi) daha uzun tutabilir. Sürüm 0.9.5 ve üzerindekilerde başarım daha iyidir. En kötü durum ile ortalama durum sıkıştırma zamanı arasındaki oran 10:1 civarıdır. Daha önceki sürümlerde bu durum 100:1 gibiydi. İsterseniz sürecin bütün ayrıntılarını görebilmek için <command>-vvv</command> seçeneğini kullanabilirsiniz.
    </para><para>
Açma hızı bu durumdan bağımsızdır.
    </para><para>
<command>bzip2</command> genellikle işlem yapmak için, çok MB lı bellek alanları ayırır ve daha sonra tarafsız ve rasgele bir şekilde saldırır. Bunun anlamı, açma ve sıkıştırma performanslarının makinenizin önbelleğine erişim süresi ile alakalı olduğudur. Önbelleğe erişim kayıplarını düşürecek küçük kod değişiklikleri büyük performans artışları getirebilir. Çok büyük önbelleklere sahip makinelerde <command>bzip2</command> çok yüksek başarım göstermektedir.
    </para>
  </refsect1><refsect1><title>YETERSİZLİKLER</title><para>
G/Ç  hata  iletileri olmaları gerektiği kadar faydalı değildiler. <command>bzip2</command> G/Ç hatalarını tespit etmek ve temiz bir şekilde  çıkmak  için  oldukça ter döker ama bazen sorunun ayrıntıları gözden kaçabilmektedir.
    </para><para>
Bu kılavuz sayfası <command>bzip2</command>'nin 1.0.2 sürümüne  aittir. Bu sürüm ile sıkıştırılmış veriler geçmiş sürümler ile tamamen uyumludur (sürüm 0.1pl2, 0.9.0, 0.9.5, 1.0.0 ve 1.0.1 ile), tek istisna 0.9.0 ve üzeri sürümler çoklu dosya sıkıştırmaları düzgünce açabilirler, 0.1p12 bunu yapamaz, ilk dosyayı açtıktan sonra duracak ve akımın gerisini getirmeyecektir.
    </para><para>
<command>bzip2recover</command> sürümleri 1.0.2 den önceki sürümlere göredir. Sıkıştırılmış dosya içindeki bit konumlarını belirtmek için 32 bitlik tamsayılar kullanırlar ve bu yüzden 512 MB'den daha büyük sıkıştırılmış dosyalar elde edilemezler. Sürüm 1.0.2 ve üzeri 64 bitlik tam sayılar kullanırlar ve GNU ile Windows platformlarını desteklerler. Bu tip bir sınır ile kurulup kurulmadığını anlamak için <command>bzip2recover</command>'ı argümansız çalıştırın. Her halükarda, bu sınırı ortadan kaldırmak mümkündür.  Şayet yazılımı <literal>MaybeUInt64</literal> ile yeniden derleyebilirseniz, işaretsiz 64 bitlik tamsayı ayarlanmış  olacağından  bu  sınır  ortadan kalkmış olur.
    </para>
  </refsect1><refsect1><title>YAZAN</title><para>
Julian Seward, <email>jseward@acm.org</email> tarafından yazılmıştır.
    </para><para>
<ulink url="http://sources.redhat.com/bzip2"/>
    </para><para>
<command>bzip2</command>'deki  fikirlerin sahipleri şunlardır (en azından): Michael Burrows ve David Wheeler (blok sıralamalı dönüşüm için), David Wheeler (tekrar, Huffman kodlayıcısı), Peter Fenwick (orijinal bzip'teki yapısal kodlama modeli ve pek çok tasfiye için) ve Alistair Moffat, Radford Neal ve Ian Witten   (orijinal   bzip'teki   aritmetik   kodlayıcı   için).  Onlara yardımları, destek ve tavsiyeleri için şükran borçluyum. Belgeler  için kaynak  kod paketine bakınız. Christian von Roques, daha hızlı sıralama algoritması  için  beni  cesaretlendirdi  ve  böylece  daha  hızlı  bir sıkıştırma elde edebildik. Bela Lubkin, en kötü durum sıkıştırması için cesaret verdi. <command>bz*</command> betikleri GNU  <command>gzip</command>'inkilerden  türetildi.  Bir  çok kimse  de, yamalar gönderdi, taşınabilirlik sorunlarında yardımcı oldu, tavsiyelerde bulundu; bunlar çoğunlukla faydalı oldu.
    </para>
  </refsect1><refsect1><title>ÇEVİREN</title><para>Yalçın Kolukısa <email>yalcink01@yahoo.com</email>, Ocak 2004</para>
  </refsect1>
</refentry>

