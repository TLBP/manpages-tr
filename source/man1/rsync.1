.ig
 * Bu kılavuz sayfası Türkçe Linux Belgelendirme Projesi (TLBP) tarafından
 * XML belgelerden derlenmiş olup manpages-tr paketinin parçasıdır:
 * https://github.com/TLBP/manpages-tr
 *
 * Özgün Belgenin Lisans ve Telif Hakkı bilgileri:
 *
 * Routines common to more than one of the rsync processes.
 *
 * Copyright (C) 1996 Andrew Tridgell
 * Copyright (C) 1996 Paul Mackerras
 * Copyright (C) 2003-2022 Wayne Davison
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, visit the http://fsf.org website.
..
.\" Derlenme zamanı: 2022-11-18T11:59:29+03:00
.TH "RSYNC" 1 "15 Nisan 2022" "rsync 3.2.4" "Kullanıcı Komutları"
.\" Sözcükleri ilgisiz yerlerden bölme (disable hyphenation)
.nh
.\" Sözcükleri yayma, sadece sola yanaştır (disable justification)
.ad l
.PD 0
.SH İSİM
rsync - hızlı, becerikli, uzak (ve yerel) dosya kopyalama aracı
.sp
.SH KULLANIM
.SS "Yerel:"
.IP \fBrsync\fR 6
[\fISEÇENEK\fR...] \fIKAYNAK\fR... [\fIHEDEF\fR]
.sp
.PP
.sp
.SS "Uzak bağlantı:"
.B Alım:
.RS 4
.IP \fBrsync\fR 6
[\fISEÇENEK\fR...] [\fIKULL@\fR]\fIKONAK:KAYNAK\fR... [\fIHEDEF\fR]
.sp
.PP
.RE 1
.B Gönderim:
.RS 4
.IP \fBrsync\fR 6
[\fISEÇENEK\fR...] \fIKAYNAK\fR... [\fIKULL@\fR]\fIKONAK:HEDEF\fR
.sp
.PP
.RE 1
.sp
.SS "rsync sürecinden erişim:"
.B Alım:
.RS 4
.IP \fBrsync\fR 6
[\fISEÇENEK\fR...] [\fIKULL@\fR]\fIKONAK::KAYNAK\fR... [\fIHEDEF\fR]
.IP \fBrsync\fR 6
[\fISEÇENEK\fR...] \fBrsync://\fR[\fIKULL@\fR]\fIKONAK\fR[:\fIPORT\fR]/\fIKAYNAK\fR... [\fIHEDEF\fR]
.sp
.PP
.RE 1
.B Gönderim:
.RS 4
.IP \fBrsync\fR 6
[\fISEÇENEK\fR...] \fIKAYNAK\fR... [\fIKULL@\fR]\fIKONAK::HEDEF\fR
.IP \fBrsync\fR 6
[\fISEÇENEK\fR...] \fIKAYNAK\fR... \fBrsync://\fR[\fIKULL@\fR]\fIKONAK\fR[:\fIPORT\fR]/\fIHEDEF\fR
.sp
.PP
.RE 1
.sp
.SS " "
\fIHEDEF\fR belirtmeksizin yalnızca \fIKAYNAK\fR belirtilen kullanımda kopyalama yapılmaz, kaynak dosyalar listelenir.
.br
Bu kılavuz sayfasının belge içi bağlarla gezilebilir sürümü için bkz:
.br
http://tlbp.gen.tr/man/man1/man1-rsync.html
.sp
.sp
.SH "AÇIKLAMA"
\fBrsync\fR hızlı ve olağanüstü becerikli bir dosya kopyalama aracıdır. Yerel olarak veya herhangi bir uzak kabuk ya da uzak \fBrsync\fR sunucusu üzerinden başka bir konağa/konaktan kopyalama yapabilir. Davranışının her yönünü denetleyebilen çok sayıda seçenek sunar ve kopyalanacak dosyaların çok esnek belirlenmesine olanak sağlar. Yalnızca kaynak dosyalar ile hedefteki mevcut dosyalar arasındaki farkları göndererek ağ üzerinden gönderilen veri miktarını azaltan delta aktarım algoritmasıyla ünlüdür. \fBrsync\fR, yedekleme ve yansılama için ve günlük kullanım için geliştirilmiş bir kopyalama komutu olarak yaygın olarak kullanılır.
.sp
\fBrsync\fR boyutuna veya son değişiklik zamanında bakarak değişen dosyaları bulan "hızlı denetim" algoritmasını (öntanımlıdır) kullanarak aktarılacak dosyaları saptar. Hızlı bir denetimle dosya verisinin güncellenmesinin gerekmediği saptandığında bile ilgili seçenekler belirtilerek istendiği takdirde diğer öznitelikler de hedef dosyaya aktarılır.
.sp
\fBrsync\fR’e özgü bazı ek özellikler:
.sp
.PD 1
.RS 1
.IP \(ci 3
bağların, aygıtların, sahip, grup ve izinlerin kopyalanmasını destekler
.IP \(ci 3
GNU \fBtar\fR’a benzer exclude ve exclude-from seçenekleri
.IP \(ci 3
CVS’nin yok sayacağı dosyaların yoksayılmasını sağlayan CVS dışlama (.ignore) kipi
.IP \(ci 3
\fBrsh\fR, \fBssh\fR gibi uzak geçirgen kabukları kullanabilir
.IP \(ci 3
ayrıcalıklı kullancının yetkilerine ihtiyaç duymaz
.IP \(ci 3
görünmeyen maliyetleri asgari düzeyde tutmak için dosya aktarımlarında borulama yapar
.IP \(ci 3
hem anonim hem de kimlik doğrulamalı \fBrsync\fR sunucu desteği (yansılama için ideal)
.sp
.RE
.PD 0
.sp
.SH "GENEL"
\fBrsync\fR dosyaları, uzak konaktan yerele veya yerelden uzak konağa ya da yerel dosya sistemi içinde kopyalayabilir. İki uzak konak arasında dosya kopyalamayı desteklememektedir.
.sp
\fBrsync\fR’in uzak bir sisteme bağlanmasının iki yolu vardır: \fBssh\fR(1) veya \fBrsh\fR(1) gibi uzak kabuk uygulamalarından birini kullanarak ya da doğrudan TCP üzerinden \fBrsync\fR sunucusuna bağlanarak. Kaynak veya hedef, konak belirtiminden sonra tek bir : imi ile ayrılarak belirtiliyorsa uzak kabuk aktarımı uygulanır. Kaynak veya hedef, konak belirtiminden sonra bir çift : imi (::) ile ayrılarak belirtiliyorsa veya \fIrsync://URL\fR belirtimi kullanılmışsa doğrudan \fBrsync\fR sucucusuna bağlanmaya çalışılır. (İkinci kuralın bir istisnası için bkz: \fBRSYNC ARTALAN SÜRECİNE UZAK KABUKTAN BAĞLANMAK\fR).
.sp
Özel bir durum olarak, hedef belirtmeksizin tek bir kaynak belirtilmesi durumunda dosyalar "\fBls -l\fR" çıktısına benzer biçemde listelenir.
.sp
Beklendiği gibi, ne hedefte ne de kaynakta uzak bir konak belirtilmiyorsa dosya sistemi içinde kopyalama yapılır (ayrıca, bkz: \fB--list-only\fR seçeneği).
.sp
\fBrsync\fR yerel tarafı istemci, uzak tarafı sunucu olarak ele alır. Sunucu ile \fBrsync\fR artalan sürecini karıştırmayın. Artalan süreci daima sunucudur fakat sunucu (uzak taraf) bir artalan süreci olabileceği gibi uzak kabuğun çatalladığı bir süreç de olabilir.
.sp
.SH "AYARLAR"
Kurulum işlemleri için \fIREADME.md\fR dosyasına bakınız.
.sp
Kurduktan sonra, bir uzak kabuk üzerinden erişelebilen (veya \fBrsync\fR artalan kipi protokolü kullanarak erişilebilen) her makinede \fBrsync\fR kullanılabilir. Uzak dosya aktarımları için, günümüzde \fBrsync\fR iletişiminde \fBssh\fR kullanmasına rağmen öntanımlı olarak kullanacağı uzak kabuk \fBrsh\fR veya \fBremsh\fR gibi bir kabuk olarak da ayarlanabilir.
.sp
Bundan başka, istediğiniz uzak kabuk uygulamasını \fB-e\fR komut satırı seçeneğinin bağımsız değişkeni olarak veya \fBRSYNC_RSH\fR ortam değişkenine atayarak da belirtebilirsiniz.
.sp
Yalnız, \fBrsync\fR’in hem yerel hem de uzak makine üzerinde kurulu olması gerektiğini unutmayın.
.sp
.SH "KULLANIMI"
\fBrsync\fR’i \fBrcp\fR’yi nasıl kullanıyorsanız öyle kullanabilirsiniz. Biri uzak makine olmak üzere bir kaynak ve bir hedef belirtmelisiniz.
.sp
Şüphesiz sözdizimini açıklamanın en kolay yolu bir örnek vermektir:
.sp
.RS 4
.nf
rsync -t *.c foo:src/
.fi
.sp
.RE
Bu komut çalışma dizinindeki \fI*.c\fR kalıbı ile eşleşen tüm dosyaları \fIfoo\fR makinesinin \fIsrc\fR dizinine kopyalayacaktır. Bu dosyalardan uzak makinede mevcut olanları için \fBrsync\fR uzak güncelleme protokolü kullanılarak sadece farklar gönderilir. Komut satırında belirtilen \fI*.c\fR kalıbını yorumlayarak dosyaları bulma işlemini \fBrsync\fR değil, \fBrsync\fR’i çalıştırmadan önce kabuk yapar (tüm diğer Posix tarzı uygulamalar için de bu böyledir).
.sp
.RS 4
.nf
rsync -avz foo:src/bar /data/tmp
.fi
.sp
.RE
Bu komut, \fIfoo\fR makinesindeki \fIsrc/bar\fR dizinindeki tüm dosyaları varsa alt dizinlerdekileri de içererek yerel makinenin \fI/data/tmp/bar\fR dizinine kopyalar. Dosyaların, sembolik bağların, aygıtların, özniteliklerinin, izinlerinin, sahiplerinin, v.s.sinin korunmasını sağlayan "arşiv" kipinde aktarım yapılır. Buna ek olarak, aktarım işleminin verileri içeren kısımlarının boyutunu küçültmek için sıkıştırma uygulanır.
.sp
.RS 4
.nf
rsync -avz foo:src/bar/ /data/tmp
.fi
.sp
.RE
Kaynak yolunun sonuna eklenen \fI/\fR işareti hedefte ek bir dizin oluşturma davranışını değiştirir. Sona eklenen bu \fI/\fR işaretinin "dizini ismiyle kopyala" davranışının zıddı olarak "bu dizinin içeriğini kopyala" anlamına geldiğini düşünebilirsiniz, fakat her iki durumda da dizinin öznitelikleri hedefteki dizine kopyalanacaktır. Başka bir deyişle, aşağıdaki komutların her biri ile dosyalar aynı şekilde, \fI/dest/foo\fR dizininin öznitelikleri ayarlanarak kopyalanır:
.sp
.RS 4
.nf
rsync -av /src/foo /dest
rsync -av /src/foo/ /dest/foo
.fi
.sp
.RE
Ayrıca, geçerli dizinin içeriğini kopyalarken konak ve modül gönderimlerinde de sona eğik çizgi koymak gerekmez. Örneğin, aşağıdakilerin ikisi de uzak dizinin içeriğini "/hedef" dizinine kopyalayacaktır:
.sp
.RS 4
.nf
rsync -av konak: /hedef
rsync -av konak::modul /hedef
.fi
.sp
.RE
Ayrıca, \fBrsync\fR’i sadece yerel kipte de kullanabilirsiniz. Bu durumda hedef ve kaynak dosya yollarının ikisi de isimlerinde ’:’ içermeyecektir. Kopyalama işlemi güçlendirilmiş bir kopyalama komutu verilmiş gibi yürüyecektir.
.sp
Son olarak, belli bir \fBrsync\fR sunucusundaki modüllerden listelenebilir olanlar modül ismi boş bırakılarak listelenebilir:
.sp
.RS 4
.nf
rsync somehost.mydomain.com::
.fi
.sp
.RE
Daha fazla bilgi için aşağıdaki bölümlere bakınız.
.sp
.SH "İLERİ DÜZEY KULLANIM"
Bir uzak makineden çok sayıda dosya için istek yaparken aralarında boşluk bırakılmış kaynak dosya yolları, ilkinden sonra uzak konağı belirterek de belirtmeyerek de yazılabilir. Aşağıdakilerin hepsi çalışacaktır:
.sp
.RS 4
.nf
rsync -aiv konak:dosya1 :dosya2 konak:dosya{3,4} /hedef/
rsync -aiv konak::modismi/dosya{1,2} konak::modismi/ek /hedef/
rsync -aiv konak::modismi/first ::modismi/ek{1,2} /hedef/
.fi
.sp
.RE
Günümüz \fBrsync\fR’inde, yerel kabukta bir şeyleri tırnak içine almak veya ters eğik çizgi ile öncelemek gerekirse bunu ayrıca uzak konak için de yapmak gerekmez:
.sp
.RS 4
.nf
rsync -aiv konak:’basit bir dosya.pdf’ /hedef/
.fi
.sp
.RE
\fBrsync\fR’in oldukça eski sürümlerinde, tek bir konak bağımsız değişkenine izin verilirdi, dolayısıyla diğer tarafın bağımsız değişkenleri boşluklara göre ayıklaması gerekirdi. \fB--old-args\fR seçeneği belirtilerek eski tarz bağımsız değişken ayıklaması hala kullanabilmektedir:
.sp
.RS 4
.nf
rsync -ai --old-args konak:’dzn1/dosya1 dzn2/dosya2’ /hedef
rsync -ai --old-args konak::’modismi/dzn1/dosya1 modismi/dzn2/dosya2’ /hedef
.fi
.sp
.RE
Eski toplu işlem dosyalarına yardımcı olmak üzere atanabilecek ortam değişkeni için \fB--old-args\fR seçeneğinin açıklamasına bakınız.
.sp
.SH "RSYNC ARTALAN SÜRECİNE BAĞLANMAK"
Dosya aktarımı için \fBrsync\fR’i bir uzak kabuk olmaksızın kullanmak da mümkündür. Bu durumda, TCP 873. port üzerinde çalışan bir uzak \fBrsync\fR sunucusuna bağlanırsınız. Bu açıkça artalan sürecinin uzak makinada çalışıyor olmasını gerektirir. Bu konuda daha ayrıntılı bilgi için bkz: \fBRSYNC ARTALAN SÜRECİNE UZAK KABUKTAN BAĞLANMAK\fR
.sp
\fBrsync\fR’i bu yöntemle kullanmanın bir uzak kabuk üzerinden kullanmaya göre farkları şunlardır:
.sp
.PD 1
.RS 1
.IP \(ci 3
Ya makine ismini dosya yolundan ayırmak için tek bir : yerine :: kullanırsınız ya da \fIrsync://URL\fR biçimini kullanırsınız.
.IP \(ci 3
Dosya yolunun ilk sözcüğü aslında bir modül ismidir.
.IP \(ci 3
Sunucu bağlandığınızda günün iletisini basabilir.
.IP \(ci 3
Sunucu için bir dosya yolu belirtmezseniz, sunucu üzerinde erişilebilir olan dosya yollarının listesini alırsınız.
.IP \(ci 3
Bir yerel hedef belirtmezseniz, uzak sunucu istediğiniz dosyaların bir listesini yollar.
.IP \(ci 3
\fB--rsh\fR (\fB-e\fR) seçeneğini belirtmemelisiniz (yoksa ssh bağlantısı bir süreç çatallayacağından sunucuda çalışan artalan süreci yoksayılır -- bkz: \fBRSYNC ARTALAN SÜRECİNE UZAK KABUKTAN BAĞLANMAK\fR)
.sp
.RE
.PD 0
"\fIkaynak\fR" adlı uzak modüldeki dosyaların tümünü kopyalayan bir örnek:
.sp
.RS 4
.nf
rsync -av konak::kaynak /hedef
.fi
.sp
.RE
Sunucu üzerindeki bazı dosya depoları kimlik doğrulaması gerektirebilir. Böyle bir durumda bağlanmak istediğinizde sizden parola istenecektir. Parola istemi almamak için parolanızı \fBRSYNC_PASSWORD\fR ortam değişkenine kaydedebileceğiniz gibi, \fB--password-file\fR seçeneğini de kullanabilirsiniz. Bu kullanım \fBrsync\fR’i bir toplu işlem dosyası ile kullandığınız durumlarda yararlıdır.
.sp
.TP 4
\fBUyarı:\fR
Bazı sistemlerde ortam değişkenlerini tüm kullanıcılar görebilmektedir. Bu tür sistemlerde \fB--password-file\fR seçeneğinin tercih edilmesi önerilir.
.sp
.PP
\fBRSYNC_PROXY\fR ortam değişkenine bir \fIkonak:port\fR çifti belirterek bir vekil sunucu üzerinden de bağlantı sağlayabilirsiniz. Burada, vekil sunucunuzun yapılandırmasının 873. port üzerinden bağlantıya izin verdiğinden emin olmalısınız.
.sp
Doğrudan soket bağlantısı yapmak yerine \fBRSYNC_CONNECT_PROG\fR ortam değikenine çalıştırmak istediğiniz komutları atayarak bir uygulamayı vekil olarak kullanmak suretiyle artalan sürecinin ağa bağlanması sağlanabilir. Komut dizgesi, \fBrsync\fR komutunda belirtilen konak adını ifade etmek üzere "%H" değişkenini içerebilir (dizgede tek bir % belirtmek gerekirse yerine %% kullanılabilir). Örnek:
.sp
.RS 4
.nf
export RSYNC_CONNECT_PROG=’ssh vekilkonak nc %H 873’
rsync -av hedefkonak1::modul/kaynak/ /hedef/
rsync -av rsync://hedefkonak2/modul/kaynak/ /hedef/
.fi
.sp
.RE
Yukarıda, ilk komutta, tüm verileri \fIhedefkonak\fRtaki (%H) 873. porta (\fBrsync\fR artalan sürecine) ileten \fIvekilkonak\fR üzerinde \fBnc\fR(1) (netcat) çalıştırmak için \fBssh\fR(1) kullanılmaktadır. Ayrıca, \fBRSYNC_SHELL\fR ortam değişkenine bir uygulama tanımlanırsa, \fBRSYNC_CONNECT_PROG\fR komutunu çalıştırmak için \fBsystem\fR(3) çağrısının öntanımlı kabuğu yerine bu uygulama kullanılır.
.sp
.SH "RSYNC ARTALAN SÜRECİNE UZAK KABUKTAN BAĞLANMAK"
\fBrsync\fR artalan sürecinin, (isimli modüller gibi) çeşitli özelliklerini kullanarak, fazladan bir soket bağlantısı yapmadan, sisteme uzak kabukla bağlanmak bazen yararlıdır. \fBrsync\fR, bir konağa uzak kabuk kullanarak bağlanmayı ve ardından uzak kullanıcının ev dizinindeki bir yapılandırma dosyasını okuyacak tek kullanımlık bir "artalan" sunucusu çatallamayı destekler. Artalan süreci tarzı bir aktarımda verilerin şifrelenmek istenmesi durumunda bu yararlı olabilir, ancak artalan süreci uzak kullanıcı tarafından başlatıldığından, \fBchroot\fR(1) gibi özellikler kullanılamayabilir veya artalan süreci tarafından kullanılan kullanıcı kimliği değiştirilemeyebilir. (Artalan süreci aktarımını şifrelemenin başka bir yolu da, \fBssh\fR(1) kullanarak yerel bir portu uzak bir konağa tünellemek ve uzak konaktaki normal \fBrsync\fR artalan sürecini yalnızca "localhost" bağlantılarına izin verecek şekilde yapılandırmaktır.)
.sp
Kullanıcı açısından, uzak kabuk bağlantısıyla uzak artalan süreci çatallayarak aktarımda, normal \fBrsync\fR artalan süreci aktarımında kullanılanla hemen hemen aynı komut satırı sözdizimi kullanılır. Tek fark, uzak kabuğun \fB--rsh=\fR\fIKOMUT\fR seçeneğiyle komut satırında açıkça belirtilmesi gerekliliğidir. (\fBRSYNC_RSH\fR ortam değişkeninin kullanımı aynı işlevselliği sağlamaz.) Örnek:
.sp
.RS 4
.nf
rsync -av --rsh=ssh konak::modul /hedef
.fi
.sp
.RE
Farklı bir uzak kabuk kullanıcısı belirtmeniz gerekiyorsa, konaktan önce belirtilen kullanıcının (kullanıcı tabanlı kimlik doğrulaması gerektiren bir modül için) \fBrsync\fR kullanıcısını belirttiğini unutmayın. Yani, \fB--rsh\fR seçeneğinin kısa sürümünün kullanıldığı aşağıdaki örnekte olduğu gibi, Uzak kabuk kullanıcısını, \fBrsync\fR kullanıcısından ayırmak için uzak kabuk komutunda ’\fB-l \fR\fIkullanıcı\fR’ seçeneğini kullanmak gerekir:
.sp
.RS 4
.nf
rsync -av -e "ssh -l ssh-kull" rsync-kull@konak::modul /hedef
.fi
.sp
.RE
\fIssh-kull\fRanıcısı \fBssh\fR(1) seviyesinde kullanılmalıdır; \fIrsync-kull\fRanıcısı ise "modul"e oturum açmak için kullanılacaktır.
.sp
Bu kullanımda, \fBrsync\fR artalan süreci \fBssh\fR(1) tarafından sisteme erişilerek başlatılmaktadır (istenirse, \fI~/.ssh/authorized_keys\fR dosyası üzerinden de zorlanabilir). Ancak, artalan sürecine (uzak kabuk uygulaması ile değil) doğrudan erişilecekse sürecin önceden çalıştırılmış olması gerekir.
.sp
.SH "BAĞLANTI BEKLEYECEK RSYNC ARTALAN SÜRECİNİ BAŞLATMAK"
Bir \fBrsync\fR artalan sürecine bağlanabilmek için uzak sistemde \fBrsync\fR artalan sürecinin çalışmakta olması gerekir (veya belli bir porttan gelen bağlantıda bir \fBrsync\fR artalan sürecini çatallaması için \fBinetd\fR benzeri bir sürecin yapılandırılması gerekir). Gelen soket bağlantılarını işleyecek bir artalan sürecinin nasıl başlatılacağı hakkında bilgi için bkz: \fBrsyncd.conf\fR(5) -- bu, artalan sürecinin yapılandırma dosyasıdır ve artalan sürecinin nasıl çalıştırılacağına ilişkin tüm ayrıntıları içerir (artalan süreci ve \fBinetd\fR yapılandırmaları dahil).
.sp
Uzak kabuk aktarımlarından biri kullanılacaksa \fBrsync\fR artalan sürecini başlatmak gerekmez.
.sp
.SH "AKTARIM SIRALAMASI"
\fBrsync\fR, belirtilen dosya adlarını her zaman dahili aktarım listesinde sıralar. Aynı adlı dizinlerin içerikleri birleştirilerek, yinelenen dosya adlarını kaldırmak kolaylaşır, yoksa dosyalar komut satırında verilenden farklı bir sırada aktarıldığında birilerinin kafası karışabilirdi.
.sp
Belli bir dosyanın diğerlerinden önce aktarılması gerekirse, dosyalar farklı rsync oturumlarında aktarılabileceği gibi \fB--delay-updates\fR seçeneği de kullanılabilir (ikincisi sıralı dosya aktarımını etkilemez ama son dosya güncelleme aşaması daha hızlı olur).
.sp
.SH "ÖRNEKLER"
Burada \fBrsync\fR kullanımıyla ilgili bazı örneklere yer verilmiştir.
.sp
Büyük MS Word dosyaları ve eposta dizinlerinden oluşan eşimin ev dizinini yedeklemek için her gece bir PPP bağlantısı üzerinden bunları kendi makinemin \fIarvidsjaur\fR dizinine şöyle bir \fBcron\fR işi ile aktarıyorum:
.sp
.RS 4
.nf
rsync -Cavz . arvidsjaur:backup
.fi
.sp
.RE
Samba kaynak ağacını eşzamanlı tutmak için şu Makefile hedeflerini kullanıyorum:
.sp
.RS 4
.nf
get:
      rsync -avuzb --exclude ’*~’ samba:samba/ .
put:
      rsync -Cavuzb . samba:samba/
sync: get put
.fi
.sp
.RE
Bu sayede bağlantının öbür ucundaki bir CVS diziniyle benimkini güncellememi sağlıyor. Uzak makinede bir takım CVS işlemleri yaptıktan sonra uzak CVS protokolü ile bunları kendi makinemde güncellemek gecikmelerden dolayı pek verimli olmuyor.
.sp
"eski" ve "yeni" ftp sitelerim arasında bir dizini şu komutla yansılıyorum:
.sp
.RS 4
.nf
rsync -az -e ssh --delete ~ftp/pub/samba nimbus:"~ftp/pub/tridge"
.fi
.sp
.RE
Bu komut her saat başı \fBcron\fR(8)’dan çalıştırılıyor.
.sp
.SH "ÖZETLE SEÇENEKLER"
Burada \fBrsync\fR’de kullanılabilen seçeneklerin bir özetine yer verilmiştir. Bu seçenekler bir sonraki bölümde ayrıntılı olarak açıklanmıştır.
.sp
.RS 1
.nf
--verbose, -v            çıktı daha ayrıntılı olur
--quiet, -q              hatalar dışında bilgi verilmez
--info=SÇNK              ince taneli bilgilendirici ayrıntılama
--debug=SÇNK             ince taneli hata ayıklayıcı ayrıntılama
--stderr=e|a|c           std hata çıktı kipi değişir (ön: errors)
--quiet, -q              hata olmayan iletiler baskılanır
--no-motd                süreç kipi MOTD baskılanır
--checksum, -c           sadece toplam sağlamaya bakılır, zaman ve
                         boyut değişikliklerine bakılmaz
--archive, -a            arşiv kipi; -rlptgoD (-H’sız) ile aynı
--no-SEÇENEK             belirtilen seçeneği olumsuzlar (--no-D gibi)
--recursive, -r          dizinlerin alt dizinlerine inilir
--relative, -R           göreli dosya yolları kullanılır
--no-relative            --relative kapatılır
--no-implied-dirs        -R uygulanmış dizinler gönderilmez
--backup, -b             yedekleme yapılır (--suffix ve
                         --backup-dir seçeneklerine bakın)
--backup-dir=DİZİN       sadece belirtilen dizinin içeriği
                         yedeklenir
--suffix=SONEK           yedekleme soneki
                         (--backup-dir yoksa ~ öntanımlıdır)
--update, -u             hedeftekiler daha yeniyse bu dosyalar
                         atlanır
--inplace                hedef dosyaları yerinde günceller
--append                 hedef kısaysa ve eşit olacaksa veriyi ekler
--append-verify          eski veri sağlama toplamına eklenir
--dirs, -d               altdizinlere inmeden dizinleri aktarır
--old-dirs, --old-d      eski rsync ile iletişimde --dirs gibidir
--mkpath                 hedefin yol bileşeni oluşturulur
--links, -l              sembolik bağları sembolik bağ olarak
                         kopyalar
--copy-links, L          sembolik bağ değil bağın son hedefi
                         kopyalanır
--copy-unsafe-links      sadece güvensiz sembolik bağlar
                         dönüştürülür
--safe-links             ağacın dışını hedefleyen sembolik
                         bağlar yoksayılır
--munge-links            sembolik bağı bağ değil dosya olarak aktarır
--copy-dirlinks, -k      sembolik bağı hedefindeki dosyaya dönüştürür
--keep-dirlinks, -K      sembolik bağlı dizinler alıcıda dizin
                         yapılır
--hard-links, -H         sabit bağlar korunur
--perms, -p              izinler korunur
--executability, -E      çalıştırılabilirlik korunur
--chmod=CHMOD             dosya ve/ya dizin izinleri korunur
--acls, -A               ACLler korunur (--perms uygular)
--xattrs, -X             ek öznitelikler korunur
--owner, -o              sahip korunur (sadece root)
--group, -o              grup korunur
--devices, -D            aygıtlar korunur (sadece root)
--copy-devices           aygıt içeriğini normal dosya gibi kopyalar
--write-devices          aygıtlara dosya gibi yaz (--inplace uygula)
--specials               özel dosyalar korunur
-D                      --devices --specials kullanımına eşdeğer
--times, -t              zamanlar korunur
--atimes, -U             erişim zamanları korunur
--open-noatime           açılan dosyaların erişim zamanı değiştrlmez
--crtimes, -N            oluşturulma zamanları korunur (yeni-lik)
--omit-dir-times, -O     zamanlar korunurken dizinler bunun
                         dışında tutulur
--super                  alıcıya root’un işlerini de yapmasını söyler
--fake-super             xattr’lerle ayrıcalıklıları saklar/kurtarır
--sparse, -S             seyrek dosyaları en verimli şekilde
                         elde eder
--preallocate            hedef dosyaları yazmadan önce yer ayırır
--dry-run, -n            işlemi yapıyormuş gibi gösterir ama yapmaz
--whole-file, -W         dosyaları tamamen kopyalar
                         (rsync algoritması ile farkları değil)
--checksum-choice=AD     sağlama toplamı algoritmasını seçer (--cc gibi)
--one-file-system, -x    dosya sistemi sınırlarının dışına çıkılmaz
--block-size=BOYUT, -B   sabit bir blok boyunda sağlama toplamına
                         zorlar
--rsh=KOMUT, -e          kullanılacak uzak kabuk uygulaması
                         belirtilir
--rsync-path=UYGULAMA    uzak makinede rsnc’in çalıştıracağı
                         uygulama
--existing               sadece hedefte mevcut olan dosyalar
                         güncellenir
--ignore-existing        hedefte mevcut olan dosyalar yoksayılır
--remove-source-files    gönderen dosyaları eşzamanlı siler (dizinsiz)
--del                    --delete-during ile aynı
--delete                 göndericide olmayan dosyalar alıcıda
                         silinir
--delete-before          alıcıda aktarım öncesi silme yapılır
                         (öntanımlı)
--delete-during          alıcıda aktarım sırasında silme yapılır
--delete-delay           silinenleri saptar, aktarım sonrası siler
--delete-after           alıcıda aktarım sonrası silme yapılır
--delete-excluded        alıcıda ayrıca dışlanmış dosyalar da
                         silinir
--ignore-missing-args    kaynakta belirtilmeyenleri hatasız yoksayar
--delete-missing-args    kaynakta belirtilmeyenler hedefte silinir
--ignore-errors          G/Ç hataları olsa da siler
--force                  dizinler boş olmasa bile silinir
--max-delete=SAYI        SAYIdan fazla dosya silinmez
--max-size=BOYUT         BOYUTtan büyük dosyalar aktarılmaz
--min-size=BOYUT         BOYUTtan küçük dosyalar aktarılmaz
--max-alloc=BOYUT        bellek ayırma sınırını değiştirir
--partial                kısmen aktarılmış dosyalar tutulur
--partial-dir=DİZİN      kısmen aktarılmış dosyalar DİZİNde tutulur
--delay-updates          güncellenecek tüm dosyalar sona bırakılır
--prune-empty-dirs, -m   dosya listesindeki boş dizinleri budar
--numeric-ids            kullanıcı/grup kimliklerini isimlerle
                         eşleştirmez
--usermap=İSİM           özel kullanıcı adı eşlemi
--groupmap=İSİM          özel grup adı eşlemi
--chown=KULL:GRUP        basit kullanıcı/grup eşlemi
--timeout=SÜRE           G/Ç zamanaşımını SÜRE saniyeye ayarlar
--contimeout=SÜRE        bağlantı zamanaşımını SÜRE saniyeye ayarlar
--ignore-times, -I       zaman ve boyut bakımından eşleşen dosyalar
                         atlanmaz
--size-only              boyutları aynı olan dosyalar atlanır
--modify-window=SAYI     doğruluğu arttırmak için değişiklik
                         zamanları karşılaştırılır
--temp-dir=DİZİN, -T     geçici dosyaları DİZİNde oluşturur
--fuzzy, -y              hedefte dosya yoksa benzerini bulur
--compare-dest=DİZİN     alınan dosyaları ayrıca DİZİNdekilerle
                         karşılaştırır
--copy-dest=DİZİN        DİZİNde değişmemiş dosyaları hedefe kopyalar
--link-dest=DİZİN        değişmediyse DİZİNdeki dosyalara sabit bağ
--compress, -z           aktarım sırasında dosya verisi sıkıştırılır
--compress-choice=STR    sıkıştırma algoritması belirtir (--zc gibi)
--compress-level=SAYI    sıkıştırma seviyesi belirtir (--zl gibi)
--skip-compress=LISTE    uzantısı LİSTEdeki dosyalar sıkıştırılmaz
--cvs-exclude, -C        dosyalar CVS’nin yaptığı gibi yoksayılır
--filter=KURAL, -f       bir dosya süzme kuralı ekler
-F                       --filter=’dir-merge /.rsync-filter’ ve
                         yinelemeli: --filter=’- .rsync-filter’
                         ile aynı
--exclude=KALIP          KALIP ile eşleşen dosyalar dışlanır
--exclude-from=DOSYA     dışlama kalıpları DOSYAdan okunur
--include=KALIP          KALIP ile eşleşen dosyalar dışlanmaz
--include-from=DOSYA     dışlanmayan kalıplar DOSYAdan okunur
--files-from=DOSYA       aktarılacak dosyaların isimlerinin listesi
                         DOSYAdan okunur
--from0, -0              *from seçeneklerindeki dosya listeleri boş
                         karakter sonlandırmalı kabul edilir
--old-args               eski tarz boşluk ayıklaması etkin olur
--protect-args, -s       boşluk ayıklama yok; yalnız jokerler
--copy-as=KULL[:GRUP]    kopyalama içim kullanıcı ve seçimlik grup
--address=ADRES          giden soketine adresi bağlar
--port=PORT              başka bir port belirtmek için
--sockopts=SÇNK          özel TCP SeÇeNeKleri belirtilir
--blocking-io            uzak kabukta engellemeli G/Ç kullanılır
--outbuf=N|L|B           çıktı tamponu biçim: None, Line, Block
                                               yok, satır, blok
--stats                  dosya aktarımı sırasında durum bilgileri
                         verir
--8-bit-output, -8       yüksek bitli karakterler çıktıda öncelenmez
--human-readable, -h     okunabilen sayılar çıktılanır
--progress               aktarım sırasında gelişimi gösterir
-P                       --partial --progress ile aynı
--itemize-changes, -i    tüm güncellemeler için bir değişiklik
                         özeti çıktılar
--remote-option=SÇN, -M  SEÇENEK sadece uzak taraf gönderilir
--out-format=BÇM         çıktı belirtilen BiÇeMde güncellenir
--log-file=DOSYA         günlük belritilen DOSYAya kaydedilir
--log-file-format=BÇM    günlük belirtilen BiÇeM ile  güncellenir
--password-file=DOSYA    parola DOSYAdan okunur
--early-input=DOSYA      sürecin başta çalıştıracağı DOSYA
--list-only              dosyaları kopyalamaz, sadece listeler
--bwlimit=KBPS           saniyede kBayt cinsinden G/Ç band genişliği
--stop-after=DAK         DAK dakika sonra rsync durdurulur
--stop-at=y-m-dTh:m      rsync belirtilen zamanda durdurulur
--write-batch=DOSYA      bir toplu işlemli güncellemeyi DOSYAya yazar
--only-write-batch=DOSYA --write-batch gibi ama hedef güncellenmez
--read-batch=DOSYA       bir toplu işlemli güncellemeyi DOSYAdan okur
--protocol=SAYI          eski protokol sürümüne zorlar
--iconv=DNŞM             dosyalara karakter kümesi dönüşümü ister
--checksum-seed=SAYI     blok/dosya sağlama toplamı tohumunu ayarlar
--ipv4, -4               IPv4 tercih edilir
--ipv6, -6               IPv6 tercih edilir
--version, -V            sürüm + diğer bilgileri basar ve çıkar
--help, -h               bu yardım iletisini gösterir ve çıkar
.fi
.sp
.RE
\fBrsync\fR ayrıca bir artalan süreci olarak da çalıştırılabilir. Bu durumda şu seçenekleri kabul eder:
.sp
.RS 0
.nf
--daemon                  bir rsync artalan süreci olarak çalışır
--address=ADRES           belirtilen adres kullanılır
--bwlimit=KBPS            saniyede kBayt cinsinden G/Ç band genişliği
--config=DOSYA            rsyncd.conf yerine kullanılacak DOSYA
--dparam=YENİSİ, -M       genel sunucu yapılandırması geçersiz olur
--no-detach               üst süreçten ayrık çalışmaz
--port=PORT               belirtilen PORTu dinler
--log-file=DOSYA          "günlük dosyası" ayarları geçersiz olur
--log-file-format=BÇM     "günlük biçemi" ayarları geçersiz olur
--sockopts=SÇNKLER        özel TCP seçenekleri belirtilir
--verbose, -v             ayrıntı düzeyini arttırır
--ipv4, -4                IPv4 tercih edilir
--ipv6, -6                IPv6 tercih edilir
--help, -h --daemon       bu yardım iletisini gösterir ve çıkar
.fi
.sp
.RE
.sp
.SH "AÇIKLAMALARIYLA SEÇENEKLER"
\fBrsync\fR hem kısa (tek tire artı harf) hem de uzun seçenekleri (çift-tire artı sözcük) kabul eder. Aynı amaca yönelik birden fazla seçenek varsa aralarına virgül konarak listelenmiştir. Bir seçenek bağımsız değişken alıyorsa ve sadece uzun seçenekte belirtilmişse, bağımsız değişkenin kısa seçenekte için de kullanılması zorunludur. Bazı seçenekler ise sadece uzun seçeneklerden oluşur, kısaları yoktur. ’=’ işareti içeren seçeneklerde ’=’ isteğe bağlıdır; ’=’ yerine boşluk kullanılabilir. Bağımsız değişkenleri kabuk yorumlamasından korumak için önceleyerek belirtmek gerekebilir. Bir dosya yolundaki yaklaşık imi (~) kabuk tarafından ev dizininiz olarak yorumlanır, bu nedenle \fB--option=~/foo\fR kullanımında yaklaşık iminin kabuk tarafından ev dizininiz olarak yorumlanabilmesi için ’=’ işareti yerine boşluk kullanılmalıdır.
.sp
.TP 4
\fB--help\fR
\fBrsync\fR tarafından kabul edilen seçenekleri açıklayan kısa bir yardım iletisi basar ve çıkar. Normalde \fB--human-readable\fR seçeneğinin kısa kullanımı olan \fB--h\fR seçeneğini başka seçenekler olmadan \fB--help\fR yerine de kullanabilirsiniz.
.sp
.TP 4
\fB-V\fR, \fB--version\fR
\fBrsync\fR sürüm numarasını ve ek bilgiler basar ve çıkar.
.sp
Çıktıda, lisans ve telif hakkı bilgilerinden başka rysnc sitesine bir bağlantı, öntanımlı sıkıştırma ve sağlama toplamı algoritmalarının listesi ile derlenmiş yeteneklerin listesi bulunur.
.sp
.TP 4
\fB-v\fR, \fB--verbose\fR
Bu seçenek aktarım sırasında verilen bilgi miktarını arttırır. \fBrsync\fR öntanımlı olarak sessiz çalışır. Tek \fB-v\fR belirtildiğinde, hangi dosyaların aktarıldığını gösterip sonunda bir özet basar. İki \fB-v\fR belirtildiğinde atlanan dosyaları gösterir ve sonunda daha fazla bilgi verir. İkiden fazla \fB-v\fR kullanımı sadece \fBrsync\fR hata ayıklaması yapıyorsanız anlamlıdır.
.sp
Çalıştırma sonu özeti, oturum boyunca uzak \fBrsync\fR’e (yerel kopyalamada alıcı tarafa) gönderilen ve alınan bayt sayısını ve saniyede aktarılan bayt sayısını gösterir. İkinci satır, \fBrsync\fR’in oturumda aktaracağı dosyaların toplam bayt sayısı ile gönderilen ve alınan baytların bunların toplamına oranları (bunlar gerçekten daha iyi hissettiren, daha büyüğün daha iyi olduğu sayılardır) gösterilir. Bu değerler ayrıca, \fB--human-readable\fR (veya \fB--no-human-readable\fR) seçenekleri kullanılarak insan tarafından daha fazla (veya daha az) okunabilir duruma da getirilebilir.
.sp
Günümüz \fBrsync\fR’inde, \fB-v\fR seçeneği \fB--info\fR ve \fB--debug\fR seçeneklerinin birlikte kullanımına eğdeğer bir çıktı üretir. Ayrıntı düzeyi arttıkça her bilginin ayrıntı düzeyi aynı oranda artmadığından \fB-v\fR seçeneği yerine veya birlikte bu yeni seçeneklerin kullanımı tercih edilebilir. Hem \fB--info\fR hem de \fB--debug\fR, ayrıntıdaki her artış için tam olarak hangi ayarlamaların yapıldığını belirten bir yardım istemine de sahiptir.
.sp
Bununla birlikte, artalan sürecinin "azami ayrıntı" ayarlarının, artalan süreci tarafında hangi seçenekleri ne kadar yüksek bir ayrıntıyla sınırlayabileceği de dikkate alınmalıdır. Örneğin azamilik 2 ise, \fB-vv\fR ile ayarlanandan daha yüksek bir değere ayarlanan info ve debug seçeneklerinin ayrıntı düzeyi, artalan süreci oturumunun \fB-vv\fR düzeyine indirilir.
.sp
.TP 4
\fB--info\fR=\fISEÇENEKLER\fR
\fB--info\fR çıktıda görmek istenilen bilgiler üzerinde ince ayar yapılabilmesini sağlar. Her \fISEÇENEK\fR sonunda bir rakam içerir. 0 çıktıda sessizliğe, 1 öntanımlı çıktı düzeyine, daha yüksek değerler de (daha yüksek ayrıntı düzeyini destekleyenler için) daha yüksek ayrıntı düzeyine karşılık gelir. Kullanılabilecek seçenek isimlerini, bunların ne çıktıladıklarını ve ayrıntı düzeyindeki her artış için hangi seçenek isimlerinin ekleneceğini görmek için \fBrsync --info=help\fR komutu verilebilir. Bazı örnekler:
.sp
.RS 4
.RS 4
.nf
rsync -a --info=progress2 kaynak/ hedef/
rsync -avv --info=stats2,misc1,flist0 kaynak/ hedef/
.fi
.sp
.RE
.RE
.IP
\fB--info=name\fR çıktısının \fB--out-format\fR ve \fB--itemize-changes\fR (\fB-i\fR) seçeneklerinden etkileneceği dikkate alınmalıdır. Bu seçeneklerin ne zaman ne çıktılayacaklarını görmek için seçeneklerin açıklamalarına bakılabilir.
.sp
Bu seçenek 3.1.0 sürümünde eklenmiştir, bu nedenle sunucu tarafındaki daha eski bir \fBrsync\fR, ince ayar girişimlerini reddedebilir (sunucuya bir veya daha fazla seçenek gönderilmesi gerekiyorsa ve sunucu bunları anlamayacak kadar eskiyse). Bir artalan süreciyle çalışılacaksa yukarıdaki azami ayrıntı uyarısına da bakmakta yarar vardır.
.sp
.TP 4
\fB--debug\fR=\fISEÇENEKLER\fR
\fB--debug\fR çıktıda görmek istenilen bilgiler üzerinde ince ayar yapılabilmesini sağlar. Her \fISEÇENEK\fR sonunda bir rakam içerir. 0 çıktıda sessizliğe, 1 öntanımlı çıktı düzeyine, daha yüksek değerler de (daha yüksek ayrıntı düzeyini destekleyenler için) daha yüksek ayrıntı düzeyine karşılık gelir. Kullanılabilecek seçenek isimlerini, bunların ne çıktıladıklarını ve ayrıntı düzeyindeki her artış için hangi seçenek isimlerinin ekleneceğini görmek için \fBrsync --debug=help\fR komutu verilebilir. Bazı örnekler:
.sp
.RS 4
.RS 4
.nf
rsync -avvv --debug=none kaynak/ hedef/
rsync -avA --del --debug=del2,acl kaynak/ hedef/
.fi
.sp
.RE
.RE
.IP
Bazı hata ayıklama iletilerinin, özellikle G/Ç ve tampon ile ilgili olanlarının sadece \fB--stderr=all\fR seçeneği belirtildiğinde çıktılanacağına dikkat edilmelidir.
.sp
3.2.0 sürümünden itibaren, her aktarım tarafı için farklı hata ayıklama değerleri belirlemenize ve \fBrsync\fR sürümlerinden yalnızca birinde bulunan yeni bir hata ayıklama seçeneğini belirtmenize izin vermek için bu seçenek, artık sunucu tarafına otomatik olarak iletilmemektedir. Aynı seçeneğin her iki tarafa da uygulanması istenirse, kaşlı ayraç genişletmesini kullanmak, kod yazmaktan kurtulmanın kolay bir yoludur. Aşağıdaki komut, \fBzsh\fR(1) ve \fBbash\fR(1)’ta çalışır:
.sp
.RS 4
.RS 4
.nf
rsync -aiv {-M,}--debug=del2 kaynak/ hedef/
.fi
.sp
.RE
.RE
.IP
.sp
.TP 4
\fB--stderr\fR=errors|all|client
Bu seçenek, hangi işlemlerin ve bilgi iletilerinin standart hataya çıktılanacağını belirtmekte kullanılır. Kip dizgeleri kısaltılabilir, bu nedenle tek harflik değerler de kullanılabilir. Olası 3 seçim şunlardır:
.sp
.RS
.TP 4
\fBerrors\fR
Süreç aktarımın uzak tarafında olsa bile \fBrsync\fR öntanımlı olarak hataları doğrudan standart hataya gönderir. İstemci tarafa bilgi iletileri ise protokol akımı üzerinden gönderilir. Standart hata kullanılabilir değilse (yani, sürece doğrudan bir soket üzerinden bağlanılıyorsa) hatalar son çare olarak protokol akımı üzerinden gönderilir.
.sp
.TP 4
\fBall\fR
Tüm \fBrsync\fR iletilerinin (bilgi ve hata) tüm (olası) süreçler tarafından doğrudan standart hataya gönderilmesini sağlar. Bu, standart hatanın (ham değil) satır tamponlu duruma gelmesine sebep olarak, bilgi ve hata iletilerinin dosya tanıtıcısına göre işlenmesi özelliğini ortadan kaldırır. Hata ayıklaması yapılan veya yüksek ayrıntı düzeyiyle kullanılan süreçler için bu seçenek, aktarım akımının tıkanmasını önlemeye yardımcı olabilir (bunun, çıkmaza girme hatasında bir şeylerin kapanma olasılığını önlemesi gerekir). Ayrıca \fB--debug\fR seçeneğinin G/Ç ile ilgili bazı ek iletileri etkinleştirmesini sağlar.
.sp
.TP 4
\fBclient\fR
Tüm \fBrsync\fR iletilerinin istemci tarafa protokol akımı üzerinden gönderilmesini sağlar. Tüm iletileri tek istemci süreç çıktılar; hataları standart hataya, bilgi iletilerini standart çıktıya gönderir. Bu durum, eski \fBrsync\fR sürümlerine öntanımlıydı. Fakat, iletilerin önünde çok fazla aktarım verisi olduğunda hata gecikmelerine neden olabiliyordu. Dosyalar eski bir \fBrsync\fR’e gönderiliyorsa, çoğu sürümde geçerli olan \fB--stderr=all\fR seçeneği tercih edilebilir.
.sp
.PP
.RE
.IP
Bu seçenek \fBrsync\fR’e 3.2.3 sürümünde eklenmiştir. Bu sürüm ayrıca uzak tarafa öntanımlı olmayan bir ayarı iletmeye başlamasına rağmen \fBrsync\fR, sırasıyla \fBall\fR ve \fBclient\fR ayarlarını temsil etmek üzere geriye dönük uyumlu \fB--msgs2stderr\fR ve \fB--no-msgs2stderr\fR seçeneklerini kullanıyordu. Yeni \fBrsync\fR sürümleri, uyumluluğu korumak için bu eski seçenek adlarını kabul etmeye devam edecektir.
.sp
.TP 4
\fB-q\fR, \fB--quiet\fR
Bu seçenek aktarım sırasında verilen bilgi miktarını azaltır. Özellikle uzak sunucudaki bilgi iletileri baskılanır. Bu seçenek \fBrsync\fR’i \fBcron\fR’dan çalıştırırken yararlıdır.
.sp
.TP 4
\fB--no-motd\fR
Artalan sürecine aktarımın başlangıcında istemci tarafından çıktılanan bilgiyi etkiler. Günün iletisini (MOTD) baskılar fakat ayrıca, (\fBrsync\fR protokolü ile ilgili sınırlamalar nedeniyle) artalan sürecinin \fBrsync host::\fR isteğine yanıt olarak gönderdiği modül listesini de etkiler. Bu bakımdan, artalan sürecinden modül listesi isteği yapılacaksa bu seçeneğin kullanılmaması gerekir.
.sp
.TP 4
\fB-I\fR, \fB--ignore-times\fR
Normalde \fBrsync\fR hedefte de aynı boyutta ve aynı değişiklik zamanına sahip dosyalar varsa bunları atlayacaktır. Bu seçenek bu "hızlı sınama" davranışını kapatarak tüm dosyaların güncellenmesini sağlar.
.sp
Bu seçenek \fBrsync\fR’in daha fazla dosya aktarmasına sebep olduğundan, \fBrsync\fR’in birkaç dosya aktarmasına sebep olan \fB--ignore-existing\fR ve \fB--ignore-non-existing\fR seçenekleriyle karşılaştırıldığında kafa karıştırıcı olabilir.
.sp
.TP 4
\fB--size-only\fR
Bu seçenek bu "hızlı sınama" davranışını değiştirerek dosyaların değişiklik zamanlarına bakılmaksızın hedefte de aynı boyutta iseler aktarılmamalarını sağlar. \fBrsync\fR, zaman değerlerinin doğru tutulmadığı başka bir yansılama sistemini kullandıktan sonra kullanılmaya başlanacaksa bu seçenek yararlıdır.
.sp
.TP 4
\fB-@\fR, \fB--modify-window\fR=\fISAYI\fR
İki zaman değerini karşılaştırırken, fark \fISAYI\fR’da küçükse \fBrsync\fR bu değerleri eşit kabul eder. Bu fark normalde 0 saniyedir (tam eşitlik). Negatif değer belirtilirse, nanosaniyeler de dikkate alınır (alıcı tarafın sürümü en az 3.1.3 olmalıdır). Ancak bu farkı bazı durumlarda daha büyük bir değere ayarlamak daha yararlıdır. Örneğin, MS Windows FAT dosya sistemi (zaman değerleri 2 saniyelik çözünürlüğe sahiptir) taraflardan biri olduğunda \fB--modify-window=1\fR yararlıdır (1 saniyelik farklara izin vermek).
.sp
Tüm aktarımlarda nanosaniyelik karşılaştırmanın öntanımlı olması istenirse bir \fI~/.popt\fR dosyası oluşturulup içine şu satırlar konabilir:
.sp
.RS 4
.RS 4
.nf
rsync alias -a -a@-1
rsync alias -t -t@-1
.fi
.sp
.RE
.RE
.IP
Bu artık öntanımlı olduğundan, örneğin, ext3 ve ext4 arasında kopyalama yapılacaksa ya da alıcı \fBrsync\fR, 3.1.3 sürümünden eskiyse nanosaniyeleri yoksaymak ve geçersiz kılmak için \fB--modify-window=0\fR (yani, \fB-@0\fR) seçeneğinin belirtilmesi gerekecektir.
.sp
.TP 4
\fB-c\fR, \fB--checksum\fR
Bu seçenek \fBrsync\fR’in dosyaların değiştirilip değiştirilmediğini ve bir aktarıma ihtiyaç olup olmadığını denetleme şeklini değiştirir. Bu seçenek olmadan \fBrsync\fR, (öntanımlı olarak) her dosyanın boyutunun ve son değişiklik zamanının gönderici ve alıcı arasında eşleşip eşleşmediğini denetlemek için "hızlı sınama" yöntemini kullanır. Bu seçenek ile, her dosyanın 128 bitlik sağlama toplamıyla eşleştirilmesi sağlanmaya çalışılır. Sağlama toplamlarının oluşturulması, her iki tarafın da aktarımdaki dosyalardan tüm verileri okumak için çok fazla disk G/Ç işlemi yapılacağı anlamına gelir, bu nedenle bu seçenek, işleri önemli ölçüde yavaşlatabilir (ve bu, değiştirilen dosyaları aktarmak için yapılacak herhangi bir okumadan önce yapılır).
.sp
Gönderen taraf, kullanılabilir dosyaların listesini oluşturmak için dosya sistemini tararken sağlama toplamlarını da üretir. Alıcı taraf ise, sağlama toplamlarını değişmiş dosyaları tararken üretir ve gönderici taraftakiyle aynı boyuttaki dosyalarda sağlama yapar; boyutları veya sağlama toplamaları değişen dosyalar aktarım için seçilir.
.sp
\fBrsync\fR’in, dosya aktarılırken oluşturulan dosya sağlama toplamlarını sınayarak, aktarılan her dosyanın alıcı tarafta doğru şekilde yeniden oluşturulduğunu daima doğruladığı unutulmamalıdır. Ancak bu aktarım sonrası otomatik doğrulamanın, bu seçeneğin aktarım öncesi yaptığı “Bu dosyanın güncellenmesi gerekiyor mu?” sınaması ile hiçbir ilgisi yoktur.
.sp
Kullanılan sağlama toplamı üzerinde, istemci ve sunucu arasında uzlaşım otomatiktir, ancak \fB--checksum-choice\fR (\fB--cc\fR) seçeneği veya bu seçeneğin açıklamasında bahsi geçen \fBRSYNC_CHECKSUM_LIST\fR ortam değişkeni kullanılarak bu geçersiz kılınabilir.
.sp
.TP 4
\fB-a\fR, \fB--archive\fR
Bu seçenek \fB-rlptgoD\fR seçeneklerine eşdeğerdir. Alt dizinlere inerek işlem yapılmasını ve hemen hemen herşeyin korunmasını istemenin en kestirme yoludur; bir şey dışında: \fB--files-from\fR seçeneği belirtilmişse \fB-r\fR uygulanmayacaktır.
.sp
ACL’lerin (\fB-A\fR), ek özniteliklerin (\fB-x\fR), erişim zamanlarının (\fB-U\fR), oluşturma zamanlarının (\fB-N\fR) korunmasını veya sabit bağların bulunmasını ve korunmasını (\fB-H\fR) sağlayan seçeneklerin belirtilmemesine özen gösterilmelidir.
.sp
.TP 4
\fB--no-\fR\fISEÇENEK\fR
Seçenek adının önüne \fB--no-\fR getirerek seçenekleri olumsuzlayabilirsiniz. Ancak olumlu seçeneklerin hepsi olumsuzlanamaz ama çoğu için bu yapılabilir. Bazıları bir işlemi kapatırken (\fB--no-D\fR, \fB--no-perms\fR gibi), bazıları da öntanımlıkları değiştirir (\fB--no-whole-file\fR, \fB--no-blocking-io\fR, \fB--no-dirs\fR gibi). Olumsuzlama uzun seçeneklere uygulanabildiği gibi kısa seçeneklere de uygulanabilir (\fB--no-relative\fR ve \fB--no-R\fR gibi).
.sp
Bir örnek olarak, \fB-rlptgoD\fR seçeneklerine eşdeğer olan \fB-a\fR seçeneğinde sadece \fB-o\fR seçeneğinin uygulanmaması istenirse \fB-a\fR seçeneğini \fB-rlptgD\fR’ye dönüştürüp kullanmak yerine \fB-a --no-o\fR (yani, \fB--archive\fR \fB--no-owner\fR) kullanılabilirdi.
.sp
Seçeneklerin birbirlerine göre konumları da önemlidir: \fB-a --no-r\fR kullanımının tersine \fB--no-r -a\fR kullanıldığında \fB-r\fR tekrar etkin olur. Bunun yanında, çeşitli seçeneklerin öntanımlı durumlarını etkileyerek \fB-a\fR seçeneğinin anlamını oldukça değiştiren \fB--files-from\fR seçeneğinin yan etkisi konumsal bile değildir. Daha fazla bilgi için bkz: \fB--files-from\fR
.sp
.TP 4
\fB-r\fR, \fB--recursive\fR
Bu seçenek alt dizinlerinde ardışık olarak kopyalanmasını sağlar. Ayrıca, tek bir dizinin taranmasını sağlayan \fB--dirs\fR (\fB-d\fR) seçeneğine de bakınız.
.sp
Aktarılacak dosyaların listesini oluşturmaya yönelik arttırımlı özyinelemeyle ilgili bilgiler için \fB--inc-recursive\fR seçeneğine bakılabilir.
.sp
.TP 4
\fB--i-r\fR, \fB--inc-recursive\fR
\fBrsync\fR 3.0.0 ve sonrasında aktarımın her iki tarafında da \fB--recursive\fR seçeneği kullanılırken öntanımlı olarak etkinleştirilen yinelemeli dosya taramasının arttırımlı olmasını sağlar.
.sp
Arttırımlı özyineleme, dosyalar aktarılmaya başlanmadan önce tüm dosya hiyerarşisinin taranmasını gerektirmediğinden arttırımsız olana göre aktarımın daha çabuk başlamasını sağlar. Kaynak dosyalarda özyineleme etkin değilse bu seçenek etkisizdir.
.sp
Bazı seçenekler \fBrsync\fR’in dosya listesinin tamamını bilmesini gerektirir, dolayısıyla bu seçenekler arttırımlı özyineleme kipini iptal eder. Arttırımlı özyinelemeyi iptal eden seçenekler:
.sp
.RS 4
.RS 4
.nf
\fB--delete-before\fR (\fB--delete\fR seçeneğinden önce öntanımlıydı)
\fB--delete-after\fR
\fB--prune-empty-dirs\fR
\fB--delay-updates\fR
.fi
.sp
.RE
.RE
.IP
\fB--delete\fR seçeneğinin arttırımlı özyineleme ile uyumlu olması için \fBrsync\fR 3.0.0’da \fB--delete-during\fR öntanımlı silme kipi yapıldı (silme kipi 2.6.4 sürümünde eklenmişti).
.sp
Arttırımlı özyinelemenin tek yan etkisi, özyinelemeli olarak taranan bir dizindeki eksik alt dizinlerin (öntanımlı olarak) özyinelemeden önce oluşturulmasıdır. Bu erken oluşturma aşaması (arttırımsız olanın tersine) \fBrsync\fR’in bitmiş dizinin değişiklik zamanını (özyinelemeli kopyalama bitene kadar geciktirmek zorunda kalmadan) hemen tanımlamasını sağlar. Ancak, daha sınırlayıcı ayrıcalıklar bu alt dizinlere kopyalama bitmeden atanmaz. \fB--omit-dir-times\fR seçeneği kullanılarak bu erken oluşturma aşamasından kaçınılabilir.
.sp
Arttırımlı özyineleme \fB--no-inc-recursive\fR (\fB--no-i-r>\fR) seçeneği ile iptal edilebilir.
.sp
.TP 4
\fB--no-i-r\fR, \fB--no-inc-recursive\fR
\fB--recursive\fR seçeneğinin yeni arttırımlı özyineleme algoritmasını iptal eder. Böylece \fBrsync\fR dosyaları aktarmaya başlamadan önce tüm dosya listesini tarar. Daha fazla bilgi için bkz: \fB--inc-recursive\fR
.sp
.TP 4
\fB-R\fR, \fB--relative\fR
Göreli dosya yolları kullanılır. Yani, komut satırının gönderici kısmında belirtilen dosya yolunun son parçası değil, dosya yolunun tamamı kopyalanır. Bu seçenek aynı anda çok sayıda farklı dizini göndermek için yararlıdır. Örneğin şöyle bir komut,
.sp
.RS 4
.RS 4
.nf
rsync /foo/bar/foo.c remote:/tmp/
.fi
.sp
.RE
.RE
.IP
uzak makinede \fI/tmp/foo.c\fR dosyasını oluşturur. Bunun yerine şu komutu kullansaydınız,
.sp
.RS 4
.RS 4
.nf
rsync -R /foo/bar/foo.c remote:/tmp/
.fi
.sp
.RE
.RE
.IP
uzak makinede \fI/tmp/foo/bar/foo.c\fR dosyası oluşturulacaktı (dosya yolunun tamamı kopyalanır). Bu fazladan yol elemanlarına \fBrsync\fR terminolojisinde \fBörtük dizin\fR adı verilir (yukarıdaki \fIfoo\fR ve \fIfoo/bar\fR dizinleri).
.sp
\fBrsync\fR 3.0.0 ve sonrasında, dosya yolu aslında sembolik bağ olsa bile dosya listesindeki örtük dizinler daima gerçek dizin olarak gönderilir. Bu, dosya yolunu kopyalarken bir sembolik bağın varlığını fark etmediğiniz durumda beklenmeyen bazı davranışları önler. Bir sunucu tarafı sembolik bağlı kopyalamak istiyorsanız, hem yolu ile birlikte sembolik bağı hem de gerçek yolu ile birlikte hedef dizini ekleyin. Gönderen tarafta daha eski bir \fBrsync\fR ile uğraşıyorsanız, \fB--no-implied-dirs\fR seçeneğini kullanmanız gerekebilir.
.sp
Ayrıca, belirtilen her yol için, örtük dizin olarak gönderilen dizin miktarını da sınırlamak mümkündür. Gönderen tarafta 2.6.7 ve üstü bir \fBrsync\fR olması durumunda, kaynak yola aşağıdaki gibi bir nokta ve eğik çizgi yerleştirebilirsiniz:
.sp
.RS 4
.RS 4
.nf
rsync -avR /foo/./bar/baz.c uzak:/tmp/
.fi
.sp
.RE
.RE
.IP
Bu, uzak konakta \fI/tmp/bar/baz.c\fR dosyasını oluşturur. (Dikkat: Noktadan sonraki eğik çizgi zorunludur, “\fI/foo/.\fR” gibi bir kısaltma çalışmaz). Daha eski \fBrsync\fR sürümlerinde kaynak yolunu sınırlamak için \fBcd\fR(1) ile dizin değiştirmek gerekebilir. Örnek:
.sp
.RS 4
.RS 4
.nf
(cd /foo; rsync -avR bar/baz.c uzak:/tmp/)
.fi
.sp
.RE
.RE
.IP
(Yaylı ayraçlar komutların bir alt kabukta çalışmasını sağlar, böylece daha sonraki komutlar için dizin değişikliğinin etkisi olmaz.) Uzak dosyalar eski bir \fBrsync\fR’den alınıyorsa şöyle bir işlem yapılabilir (artalan süreci aktarımı olmamak koşuluyla):
.sp
.RS 4
.RS 4
.nf
rsync -avR --rsync-path="cd /foo; rsync" uzak:bar/baz.c /tmp/
.fi
.sp
.RE
.RE
.IP
.sp
.TP 4
\fB--no-implied-dirs\fR
Bu seçenek, \fB--relative\fR seçeneğinin öntanımlı davranışını etkiler. Belirtildiğinde kaynak taraftaki örtük dizinlerin öznitelikleri aktarıma dahil edilmez. Bu, hedef sistemdeki karşılık gelen yol elemanlarının varsa değişmeden bırakıldığı ve eksik örtük dizinlerin öntanımlı özniteliklerle oluşturulduğu anlamına gelir. Böylece, bu örtük yol elemanlarının alıcı taraftaki bir dizine sembolik bağ olması gibi büyük farklılıklara bile izin verilir.
.sp
Örneğin, bir komut satırı bağımsız değişkeni veya bir gönderici dosya girdisi ile \fBrsync\fR’in "\fIyol/foo/dosya\fR" dosyasını aktarması istenirse \fB--relative\fR seçeneği de kullanılmışsa buradaki "\fIyol\fR" ve "\fIyol/foo\fR" örtük dizinlerdir. "\fIyol/foo\fR", hedef sistemdeki ""\fIbar\fR"a bir sembolik bağ ise, alıcı \fBrsync\fR normalde "\fIyol/foo\fR"yu siler, onu bir dizin olarak yeniden oluşturur ve dosyayı yeni dizine yerleştirir. \fB--no-implied-dirs\fR seçeneği ile, alıcı \fBrsync\fR, mevcut yol elemanlarını kullanarak "\fIyol/foo/dosya\fR"yı günceller; bu, "\fIyol/bar\fR" dosyasının oluşturulmasının sona erdiği anlamına gelir. Bu bağ korumasını gerçekleştirmenin bir başka yolu da \fB--keep-dirlinks\fR seçeneğini kullanmaktır (bu, aktarımın geri kalanındaki dizin sembolik bağlarını da etkiler).
.sp
3.0.0’dan eski bir \fBrsync\fR’den dosya kopyalarken, gönderen tarafta bir sembolik bağ varsa ve örtük dizinlerin normal dizinler gibi aktarılması isteniyorsa bu seçeneğin kullanılması gerekebilir.
.sp
.TP 4
\fB-b\fR, \fB--backup\fR
Bu seçenekle, evvelce mevcut hedef dosyaların her aktarımında ya da silinmesinde bu dosyaların isimleri değiştirilir. Yedek dosyaların nereye gideceğini ve nasıl bir sonek alacaklarını \fB--backup-dir\fR ve \fB--suffix\fR seçenekleri ile belirtebilirsiniz.
.sp
Eğer \fB--backup-dir\fR seçeneğini belirtmezseniz:
.sp
.PD 1
.RS 5
.IP 1. 3
\fB--omit-dir-times\fR seçeneği etkin kılınır.
.IP 2. 3
\fB--delete\fR kullanımı (\fB--delete-excluded\fR olmadan), \fBrsync\fR’in \fB--filter "P *~"\fR kuralının benzeri olarak tüm mevcut süzgeçlerin sonuna yedekleme soneki için "koruyucu" bir süzme kuralı eklenmesine neden olur. Bu kural, önceden yedeklenmiş dosyaların silinmesini engeller.
.sp
.RE
.IP
.PD 0
Kendi süzme kurallarını sağlayanların, dışlama/koruma kurallarını, etkili olması ve yeterince yüksek bir önceliğe sahip olması için listede daha yüksek bir yere elle eklemeleri gerekebileceği unutulmamalıdır (örneğin, kurallarınız sonuna bir * içerme/dışlaması eklerseniz otomatik eklenen kurala asla ulaşılmaz).
.sp
.TP 4
\fB--backup-dir\fR=\fIDİZİN\fR
\fB--backup\fR seçeneğinin uygulanmasını sağlayan bu seçenekle yedek dosyaların alıcı tarafta saklanacağı \fIDİZİN\fR belirtilebilir. Arttırımlı yedekleme yaparken kullanılabilir. Buna ek olarak \fB--suffix\fR seçeneğini kullanarak bir yedek soneki de belirtebilirsiniz (aksi takdirde dosyalar belirtilen \fIDİZİN\fRe kendi isimleri ile yedeklenir).
.sp
Göreli bir yol belirtilirse, yedekleme dizininin hedef dizine göreli olacağını unutulmamalıdır, bu nedenle muhtemelen mutlak bir yol veya “\fI../\fR” ile başlayan bir yol belirtmek gerekebilir. Alıcı \fBrsync\fR artalan süreciyse, yedekleme dizini modülün yol hiyerarşisinin dışına çıkamaz, bu nedenle \fIDİZİN\fRi silmemeye veya içine kopyalamamaya özen göstermek gerekir.
.sp
.TP 4
\fB--suffix\fR=\fISONEK\fR
Bu seçenek \fB--backup\fR (\fB-b\fR) ile kullanıldığında, belirtilen \fISONEK\fR öntanımlı yedekleme sonekinin yerine kullanılır. Öntanımlı sonek, \fB--backup-dir\fR belirtilmemişse \fB~\fR imi, belirtilmişse boş dizgedir.
.sp
.TP 4
\fB-u\fR, \fB--update\fR
Bu seçenek, hedefteki dosyanın değişiklik zamanı kaynak dosyanınkinden yeniyse dosyanın atlanmasını sağlar. (Eğer hedef dosyanın değişiklik zamanı kaynağınkiyle aynıysa, ama boyutları farklıysa güncelleme yapılır.)
.sp
Dizinlerin, sembolik bağların veya diğer özel dosyaların kopyalanmasını etkilemez. Ayrıca, gönderici ve alıcı arasındaki dosya biçemi farkı, nesneler üzerinde hangi tarih olursa olsun, güncelleme için her zaman yeterince önemli kabul edilir. Başka bir deyişle, hedefteki bir dosyayı içeren dizin kaynakta da varsa, aktarım zaman damgalarına bakılmaksızın gerçekleşir.
.sp
Bu seçenek bir aktarım kuralıdır, dışlama kuralı değildir, bu nedenle dosya listelerine giren verileri etkilemez ve dolayısıyla silme işlemlerini de etkilemez. Sadece alıcının aktarılmasını istediği dosyaların sayısını sınırlar.
.sp
.RS 4
.TP 4
\fB--inplace ile  birlikte kullanım\fR
Kesintiye uğramış bir aktarım, alıcı tarafta aktarımı bitmemiş bir dosya bırakabilir, bu durumda aktarımı yeniden çalıştırmak muhtemelen kesintiye uğrayan dosyadan devam edilmesini sağlamayacaktır. Bu nedenle, kesintiye uğrayan ve devam eden dosyaları işlemek için elle bir takım işlemler yapmak gerekiyorsa \fB--inplace\fR seçeneği işe yarayabilir.
.sp
.RE
.IP
.sp
.TP 4
\fB--inplace\fR
Bu seçenek, verilerinin güncellenmesi gerektiğinde dosyaların aktarılma yöntemini değiştirir: Dosyanın yeni bir kopyasını oluşturma ve tamamlandığında yerine taşıma şeklindeki öntanımlı yöntem yerine, \fBrsync\fR güncellenecek verileri doğrudan hedef dosyaya yazar.
.sp
Bunun bazı yan etkileri vardır:
.sp
.PD 1
.RS 5
.IP \(bu 3
Sabit bağları bozmaz. Bu, yeni verilerin diğer sabit bağlar üzerinden hedef dosyaya görünür olacağı anlamına gelir. Dahası, farklı kaynak dosyaları hedefteki birden çok sabit bağlı hedefe kopyalama girişimleri, hedef verilerin ileri geri değişmesine yol açan "çekme savaşları" ile sonuçlanabilir.
.IP \(bu 3
Kullanımdaki ikil dosyalar güncellenemez (işletim sistemi bunun olmasını engeller yoksa verileri değiştirilmeye çalışılan ikil dosyalar hatalı çalışır ve çöker).
.IP \(bu 3
Aktarım sırasında tutarsız olan dosya verileri, aktarım kesintiye uğrar veya güncelleme başarısız olursa bu şekilde kalır.
.IP \(bu 3
\fBrsync\fR’in yazamadığı bir dosya güncellenemez. Yazma işlemi, dosyanın yazmak amacıyla açılmasını gerektirdiğinden ayrıcalıklı kullancının bu kullanıcıya bu dosyada yazma izni vermesi gerekir.
.IP \(bu 3
Aktarım sürerken hedef dosyadaki veriler, \fBrsync\fR dosyaya yazmadan önce değişikliğe uğrarsa, \fBrsync\fR’in delta-aktarım algoritmasının verimliliği düşebilir. Bu, \fB--backup\fR kullanıyorsanız geçerli değildir, çünkü \fBrsync\fR, yedekleme dosyasını aktarım için temel dosya olarak kullanacak kadar akıllıdır.
.sp
.RE
.IP
.PD 0
.RS 4
.TP 4
\fBUyarı:\fR
Bu seçenek, başkaları tarafından erişilen dosyaları güncellemek için kullanılmamalıdır. Kopyalama için bu seçenek kullanılacaksa buna dikkat edilmelidir.
.sp
.RE
.IP
Bu seçenek, büyük dosyalardaki blok değişiklikleri veya veri eklenmesi durumlarında özellikle ağdan değil diskten açılan sistemlerde yararlıdır. Ayrıca, ’sadece kopyada değişiklik olduğunda aslın güncellendiği’ dosya sistemlerinde, bir dosyadaki küçük değişikliklerden dolayı dosyanın tamamı için anlık kopya oluşturulmasını engellemeye de yardımcı olabilir.
.sp
\fB--partial\fR seçeneğinin uygulanmasını sağlar (kesintiye uğrayan aktarım dosyayı silmez), dolayısıyla \fB--partial-dir\fR ve \fB--delay-updates\fR seçenekleri ile birlikte kullanılamaz. \fBrsync\fR 2.6.4’ten önce bu seçenek, \fB--compare-dest\fR ve \fB--link-dest\fR ile de uyumlu değildi.
.sp
.TP 4
\fB--append\fR
Bu özel kopyalama kipi, yalnızca, alıcı taraftaki içeriğin göndericidekiyle aynı olduğu bilindiğinde, büyüdüğü bilinen dosyaları verimli bir şekilde güncellemeye yarar. Aktarımdaki tüm dosyaların büyüyen dosyalar olduğundan %100 emin değilseniz \fB--append\fR kullanımı tehlikeli olabilir. Bu nedenle, bu koşula uymayan dosyaların ayıklandığından emin olmak için süzme kuralları kullanılmalıdır.
.sp
\fBrsync\fR, dosyada içeriğini tamamen doğrulamadan büyüyen dosyayı yerinde günceller (yalnızca eklediği içeriği doğrular). \fBrsync\fR, alıcı tarafta göndericideki dosyadan daha kısa olmayan tüm dosyaları atlar (bu, yeni dosyaların da aktarıldığı anlamına gelir). Ayrıca, gönderme uzlaşımları sırasında gönderen taraftaki boyutu kısalan dosyaları da atlar (bu olduğunda \fBrsync\fR "küçülen dosya" uyarısı yapar).
.sp
Dosyanın aktarımına gerek yoksa ya da bir dizinin veya sıradan olmayan dosyaların güncellenmesini etkilemiyorsa, dosyanın içerik dışı özniteliklerinin (örneğin, izinler, sahiplik ve benzerlerinin) güncellenmesini engellemez.
.sp
.TP 4
\fB--append-verify\fR
Bu özel kopyalama kipi \fB--append\fR gibi çalışır, farklı olarak dosyadaki tüm veriler sağlama toplamı doğrulamasına dahil edilir (bunu daha az verimli ama muhtemelen daha güvenli hale getirir). Aktarımdaki tüm dosyaların büyüyen dosyalar olduğundan %100 emin değilseniz \fB--append-verify\fR kullanımı tehlikeli olabilir. Daha fazla ayrıntı için -\fB--append\fR seçeneğine bakın.
.sp
.RS 4
.TP 4
\fBBilgi:\fR
3.0.0 sürümünden önce \fB--append\fR seçeneği \fB--append-verify\fR gibi çalışıyordu, bu nedenle böyle bir \fBrsync\fR ile etkileşim durumunda (veya aktarımda 30’dan eski bir protokol kullanıyorsa), ekleme seçeneklerinden herhangi birinin belirtilmesi bile \fB--append-verify\fR aktarımını başlatılacaktır.
.sp
.RE
.IP
.sp
.TP 4
\fB-d\fR, \fB--dirs\fR
Gönderen tarafta saptanan her dizinin aktarıma dahil edilmesini sağlar. \fB--recursive\fR seçeneğinin tersine, komut satırında dizin ismi "\fB.\fR" ya da bölü çizgisi ile bitmedikçe (“\fI.\fR”, “\fIdizin/.\fR”, "\fIfoo/\fR" gibi) dizinin içeriği kopyalanmaz. Bu seçenek ya da \fB--recursive\fR seçeneği olmaksızın, \fBrsync\fR saptadığı tüm dizinleri atlar (ve her biri için bir ileti çıktılar). \fB--dirs\fR ve \fB--recursive\fR seçenekleri birlikte belirtilirse, önceliği \fB--recursive\fR alır.
.sp
\fB--files-from\fR ve \fB--list-only\fR seçeneklerinin (örtük \fB--list-only\fR dahil) yanında \fB--recursive\fR belirtilmezse, \fB--dirs\fR seçeneği örtük olarak uygulanır (böylece dizinler de listede görünür). Bunun olmaması istenirse \fB--no-dirs\fR (veya \fB--no-d\fR) belirtilebilir.
.sp
Ayrıca, geriye uyumluluğa yardımcı bir seçenek de vardır: \fB--old-dirs\fR (\fB--old-d\fR) seçeneği, taraflarda eski bir \fBrsync\fR bulunması durumunda özyineleme olmadan tek bir dizini listelemek için \fB-r --exclude=’/*/*’\fR çözümünün kullanılmasını sağlar.
.sp
.TP 4
\fB--mkpath\fR
Bağımsız değişkende belirtilen ancak hedefte bulunmayan yol bileşenini oluşturur. Bu, \fBrsync\fRin hedefte çok seviyeli dizinler oluşturmasına ve gerekirse adını değiştirerek tek bir dosyayı bu yola yerleştirilmesine olanak tanır. Tek bir bağımsız değişken ile kopyalama yaparken hedef yolun tamamının bir dizin olarak ele alınmasını (\fBrsync\fR’in hedefte yol bileşeni zaten varmış gibi davranmasını) istiyorsanız, sona bir eğik çizgi yerleştirmeniz gerekir.
.sp
Aşağıdaki örnekte, \fIfoo\fR dosyasından \fIalt/dizin\fR dizininde \fIbar\fR dosyası oluşturulmakta, "\fIalt\fR" ve "\fIalt/dizin\fR" dizinleri hedefte yoksa oluşturulmaktadır:
.sp
.RS 4
.RS 4
.nf
rsync -ai --mkpath foo alt/dizin/bar
.fi
.sp
.RE
.RE
.IP
Bunun yerine işlem aşağıdaki gibi yapılsaydı, \fIfoo\fR dosyası hedefte \fIalt/dizin/bar\fR dizini altında oluşturulacaktı:
.sp
.RS 4
.RS 4
.nf
rsync -ai --mkpath foo alt/dizin/bar/
.fi
.sp
.RE
.RE
.IP
.sp
.TP 4
\fB-l\fR, \fB--links\fR
Karşılaşılan her sembolik bağ "skipping non-regular file" (normal dosya olmadığından atlanıyor) uyarısı ile yok sayılmak yerine, aktarılan dosyalara sessizce sembolik bağ eklenir. Uyarıyı \fB--info=nonreg0\fR kullanarak susturmak da mümkündür.
.sp
Daha ayrıntılı bilgi için bkz: \fBSEMBOLİK BAĞLAR\fR
.sp
.TP 4
\fB-L\fR, \fB--copy-links\fR
Gönderici, sembolik bağın gösterdiği dosya veya dizine giden zinciri izleyerek karşılaşılan her sembolik bağı olduğu gibi kopyalar. Sembolik bağ zinciri bozulursa, bir hata çıktılanır ve dosya aktarımdan çıkarılır.
.sp
Bu seçenek, aktarımda hiçbir sembolik bağ bırakmadığından, aktarımdaki sembolik bağları etkileyen diğer seçeneklerin yok sayılmasına sebep olur.
.sp
Bu seçenek, sembolik bağların alıcı tarafta da izlenmesine sebep olan bir yan etkiye sahip 2.6.3’ten önceki \fBrsync\fR sürümlerinden farklı olarak, alıcı tarafta zaten mevcut olan sembolik bağların izlenmesi işleminde bir değişiklik yapmaz. Günümüz \fBrsync\fR’i, bu seçeneği uzak alıcıya iletmez (çünkü yalnızca gönderenin bunu bilmesi gerekir), bu nedenle, bu yetersizliğin yalnızca 2.6.7’den eski (alıcıya \fB-L\fR seçeneğinin aktarımı durdurmayan) \fBrsync\fR istemcisi kullananları etkilemesi gerekir.
.sp
Alıcı tarafta gerçek bir dizin olarak ele alınması için bir dizine sembolik bağ gereksinimi varsa bkz: \fB--keep-dirlinks\fR (\fB-K\fR).
.sp
Daha ayrıntılı bilgi için bkz: \fBSEMBOLİK BAĞLAR\fR
.sp
.TP 4
\fB--copy-unsafe-links\fR
Bu seçenek \fBrsync\fR’e, kopyalanan ağacın dışındaki bir hedefi gösteren sembolik bağları kopyalamasını söyler. Mutlak sembolik bağlar ayrıca sıradan dosyalar olarak ele alınır, böylece bunlar \fB--relative\fR kullanıldığında kaynak dosya yolunun kendindeki sembolik bağlar haline gelir.
.sp
Kesme noktasının, \fBrsync\fR’in ayrıntılı çıktıda bahsetmediği yolun parçası olarak aktarımın tepe dizini oluşuna dikkat edilmelidir. “\fI/kaynak/alt\fR” dizinini “\fI/hedef/\fR” dizinine kopyalarsanız, “\fIalt\fR" dizini aktarımın tepe dizini değil (\fI/kaynak\fR için tepe dizindir) aktarım ağacının içindeki bir addır, dolayısıyla oluşturulan göreli sembolik bağlar, \fI/kaynak\fR ve \fI/hedef\fR dizinlerindeki diğer adlar için meşrudur. Bunun yerine “\fI/kaynak/alt/\fR” (sonda eğik çizgi ile) “\fI/hedef/alt\fR” dizinine kopyalanırsa, “\fIalt\fR" dizini dışındaki hiçbir dosyaya sembolik bağa izin verilmez.
.sp
Güvenli sembolik bağların yalnızca \fB--links\fR açıkça veya örtük olarak belirtilmişse kopyalanacağını unutmayın. \fB--copy-unsafe-links\fR seçeneğinin, \fB--copy-links\fR ile birlikte kullanılınca fazladan bir etkisi olmaz.
.sp
Daha ayrıntılı bilgi için bkz: \fBSEMBOLİK BAĞLAR\fR
.sp
.TP 4
\fB--safe-links\fR
Bu seçenek \fBrsync\fR’e, kopyalanan ağacın dışındaki bir hedefi gösteren sembolik bağları yoksaymasını söyler. Ayrıca, mutlak sembolik bağların da tamamı yok sayılır.
.sp
Yok sayma alıcı tarafta gerçekleştiğinden, gönderen taraf geçersiz sembolik bağlara sahip olsa bile (\fB--munge-links\fR kullanılıyorsa) bu yok sayma yine de etkili olacaktır. Ayrıca, silme işlemlerini de etkiler, çünkü dosya aktarımda mevcut ise, sembolik bağın güvenli olmadığı kabul edildiğinde ve atlandığında alıcıdaki karşılığının silinmesini önler.
.sp
Sembolik bağların aktarımda koşullu olarak yok sayılabilmesi için bu seçenek \fB--links\fR (veya \fB--archive\fR) ile birlikte kullanılmalıdır. \fB--copy-unsafe-links\fR seçeneğini etkisiz kılar.
.sp
Bu seçeneğin \fB--relative\fR ile birlikte kullanımı istenmeyen sonuçlara yol açabilir.
.sp
Daha ayrıntılı bilgi için bkz: \fBSEMBOLİK BAĞLAR\fR
.sp
.TP 4
\fB--munge-links\fR
Bu seçenek, aktarımın yalnızca bir tarafını etkiler ve \fBrsync\fR’e, sembolik bağ değerlerini dosya alırken geçersiz kılmasını veya dosya gönderirken geçerli kılmasını söyler. \fBrsync\fR’in sembolik bağları geçersiz kılmak için kullandığı yöntem, sembolik bağ (adının değil) dizgesinin önüne “/rsyncd-munged/” dizgesi koymak, geçerli kılmak için de dizgenin önüne konan “/rsyncd-munged/” dizgesini kaldırmaktır. Geçersiz kılınmış değerler, sembolik bağları diskte kullanılamaz hale getirir, ancak sembolik bağın gösterdiği dosyaya/dizine dokunulmaz.
.sp
Örneğin bir \fBrsync\fR artalan sürecinin yapılandırma dosyasındaki veya \fBrrsync\fR(1) (sınırlı \fBrsync\fR) betiğine aktarılan bir seçenek üzerinden \fBrsync\fR sunucu tarafında bu seçeneği genellikle istemcinin bilgisi dışında etkinleştirir. İstemci tarafında belirtildiğinde, geçersiz sembolik bağlara sahip olan/ihtiyaç duyan istemci tarafıysa seçenek normal olarak belirtilmelidir; geçersiz sembolik bağlara sahip olduğunda/ihtiyaç duyduğunda sunucuya seçenek vermek için \fB-M\fR \fB--munge-links\fR kullanılmalıdır. Yerel bir aktarımda, istemcinin gönderici olduğuna dikkat edin, bu nedenle seçeneğin belirtilmesi sembolik bağları doğrudan geçerli kılarken, uzak seçenek olarak belirtildiğine sembolik bağları geçersiz kılar.
.sp
Bu seçeneğin \fB--remote-option\fR aracılığıyla bir artalan sürecine gönderildiğinde hiçbir etkisi yoktur, çünkü artalan süreci geçersiz sembolik bağlar isteyip istemediğini "\fBmunge symlinks\fR" bağımsız değişkeni aracılığıyla yapılandırır.
.sp
Sembolik bağ değeri, aktarıma girdikten sonra geçerli/geçersiz duruma getirilir, bu nedenle, sembolik bağları sembolik olmayanlara dönüştüren herhangi bir seçenek, alıcının yaptığı bir seçim olan \fB--safe-links\fR dışında, geçerli/geçersiz kılma işleminden önce gerçekleşir, bu nedenle, karar geçerli/geçersiz kılma değerine dayandırılır. Bu, bir alıcıda geçersiz kılma etkinleştirilmişse, \fB--safe-links\fR kullanmanın tüm sembolik bağların yok sayılmasına neden olacağı anlamına gelir (çünkü hepsi mutlaktır).
.sp
\fBrsync\fR’in sembolik bağları geçersiz kılmak için kullandığı yöntem, her birinin değerinin önüne “/rsyncd-munged/” dizgesi koymaktır. Bu, dizin olmadığı sürece bağların kullanılmasını engeller. Bu seçenek etkinleştirildiğinde, bu yol bir dizinse veya bir dizine bir sembolik bağ ise \fBrsync\fR çalışmayı reddedecektir (ancak yalnızca başlangıçta buna bakar). Bir veya daha fazla sembolik bağı yerinde geçerli/geçersiz kılmak için kaynak kodun \fIsupport\fR dizinindeki "\fBmunge-symlinks\fR" python betiğine de bakın.
.sp
.TP 4
\fB-k\fR, \fB--copy-dirlinks\fR
Bu seçenek, gönderen tarafın bir dizin sembolik bağını gerçek bir dizinmiş gibi ele almasına neden olur. \fB--copy-links\fR kullanılırken, dosya sembolik bağlarının etkilenmesi istenmiyorsa bu seçenek kullanışlıdır.
.sp
Bu seçenek olmadan, gönderen taraf bir dizini dizin sembolik bağıyla değiştirmişse, alıcı taraf yeni sembolik bağın yolunda olan her şeyi dizinler dahil siler (\fB--force\fR veya \fB--delete\fR etkili olduğu sürece).
.sp
Alıcı taraf için benzer bir seçenek \fB--keep-dirlinks\fR seçeneğidir.
.sp
\fB--copy-dirlinks\fR, kaynaktaki dizin sembolik bağlarının tamamına uygulanır. Yalnızca belli birkaç sembolik bağın izlenmesi isteniyorsa, yolların doğru eşleşmesi için \fB--relative\fR seçeneğini kullanarak bunları eğik çizgi sonlandırmalı kaynak bağımsız değişkenleri olarak belirtmektir. Örnek:
.sp
.RS 4
.RS 4
.nf
rsync -r --relative kaynak/./ kaynak/./devam/ hedef/
.fi
.sp
.RE
.RE
.IP
Bunun çalışmasının nedeni, \fBrsync\fR’in kaynak bağımsız değişkende belirtildiği gibi \fBlstat\fR(2) çağrısı yapması ve sondaki eğik çizginin lstat() işlevinin sembolik bağı izlemesini sağlamasıyla dosya listesinde "\fIkaynak/./\fR” taraması sırasında bulunan sembolik bağı geçersiz kılan bir dizine yol açmasıdır.
.sp
Daha ayrıntılı bilgi için bkz: \fBSEMBOLİK BAĞLAR\fR
.sp
.TP 4
\fB-K\fR, \fB--keep-dirlinks\fR
Alıcı taraftaki bir dizin sembolik bağı, göndericide gerçek bir dizinle eşleşiyorsa gerçek bir dizinmiş gibi ele alınır. Bu seçenek olmaksızın alıcıdaki sembolik bağ silinip yerine gerçek bir dizin konur.
.sp
Örneğin, "\fIdosya\fR" dosyasını içeren "\fIfoo\fR" dizinini aktardığınızı, ancak "\fIfoo\fR"nun alıcıda "\fIbar\fR" dizinine sembolik bağ olduğunu varsayalım. \fB--keep-dirlinks\fR olmadan, alıcıda "\fIfoo\fR" sembolik bağı silinir, bir dizin olarak yeniden oluşturulur ve dosya bu yeni dizine kopyalanır. \fB--keep-dirlinks\fR ile alıcıdaki sembolik bağ korunur ve "\fIdosya\fR" içeriği "\fIbar\fR" dosyasına aktarılır.
.sp
.RS 4
.TP 4
\fBDikkat:\fR
\fB--keep-dirlinks\fR kullanıyorsanız, alıcıdaki tüm sembolik bağlara güvenmeli veya alıcı tarafta \fB--munge-links\fR seçeneğini etkinleştirmelisiniz! Güvenilmeyen bir kullanıcının gerçek bir dizini gösteren bir sembolik bağ oluşturması mümkünse, kullanıcı (bir sonraki kopyada) sembolik bağı gerçek bir dizinle değiştirebilir ve sembolik bağın başvurduğu dizinin içeriğini etkileyebilir. Yedekleme kopyalarında, alıcıdaki hiyerarşiyi değiştirmek için sembolik bağ kullanmak yerine dosyayı bir bağlama noktası gibi kullanmak daha iyidir.
.sp
.RE
.IP
Gönderen taraf için benzer bir seçenek \fB--copy-dirlinks\fR seçeneğidir.
.sp
Daha ayrıntılı bilgi için bkz: \fBSEMBOLİK BAĞLAR\fR
.sp
.TP 4
\fB-H\fR, \fB--hard-links\fR
Bu seçenek \fBrsync\fR’e, sabit bağları aynı kaynak sistemdeki gibi yeniden oluşturmasını söyler. Bu seçenek olmaksızın kaynak taraftaki sabit bağlı dosyalar ayrı dosyalar olarak ele alınır.
.sp
Bu seçenek, hedefteki sabit bağ kalıbının kaynaktakiyle tam olarak eşleşmesini GEREKTİRMEZ. Hedefte ek sabit bağların oluşabileceği durumlar:
.sp
.PD 1
.RS 5
.IP \(bu 3
Alıcı, ikincil sabit bağlar (kaynak dosya listesinde mevcut olandan daha fazlasını) içeriyorsa, kopyalama algoritması bunların bağını açıkça kesmez. Ancak, yollardan birinin veya daha fazlasının içerik farklılıkları varsa, normal dosya güncelleme işlemi bu ek bağları kesecektir (\fB--inplace\fR seçeneği kullanılmıyorsa).
.IP \(bu 3
Sabit bağlar içeren bir \fB--link-dest\fR dizini belirtilirse, hedef dosyaların \fB--link-dest\fR dosyalarıyla karşılıklı bağlanması, \fB--link-dest\fR ilişkilendirmeleri nedeniyle hedefteki bazı yolların birbirine bağlanmasına neden olabilir.
.sp
.RE
.IP
.PD 0
\fBrsync\fR’in yalnızca aktarım listesinde bulunan dosyalar arasındaki sabit bağları algılayabildiği unutulmamalıdır. \fBrsync\fR, aktarımın dışındaki dosyalarla fazladan sabit bağ ilişkileri olan bir dosyayı güncellerse, bu ilişki kopacaktır. Bu kırılmayı önlemek için \fB--inplace\fR seçeneği kullanılmak istenirse, dosyaların nasıl güncellendiğinin bilinmesi gerekir, böylece kalıcı sabit bağlar nedeniyle istenmeyen değişikliklerin olmayacağından emin olunabilir (başka uyumsuzluklar için \fB--inplace\fR seçeneğine de bakılabilir).
.sp
Arttırımlı özyineleme etkinse (bkz. \fB--inc-recursive\fR), \fBrsync\fR, başka bir yerde bu içerikler için başka bir bağın bulunduğunu keşfetmeden önce eksik bir sabit bağlı dosyayı aktarabilir. Bu, aktarımın doğruluğunu (yani, hangi dosyaların birbirine sabit olarak bağlı olduğunu) değil, yalnızca verimliliğini etkiler (yani, aktarımda sabit bağlı dosya kümesinin daha sonra bulunabilecek başka bir üyesi olan sabit bağlı bir dosyanın yeni bir ilk kopyası için verilerin kopyalanması). Bu verimsizliği önlemenin tek yolu, \fB--no-inc-recursive\fR seçeneğini kullanarak arttırımlı özyinelemeyi devre dışı bırakmaktır.
.sp
.TP 4
\fB-p\fR, \fB--perms\fR
Bu seçenek \fBrsync\fR’e, izinleri hedefte aynı kaynak sistemdeki gibi belirlemesini söyler. (\fBrsync\fR’in kaynak izinlerini hedefte nasıl değiştirdiği \fB--chmod\fR seçeneğinde açıklanmıştır.)
.sp
Bu seçenek belirtilmediğinde izinler şöyle belirlenir:
.sp
.PD 1
.RS 5
.IP \(bu 3
Mevcut dosyaların (güncellenmiş dosyalar dahil) mevcut izinleri korunursa da \fB--executability\fR seçeneği ile dosyanın çalıştırma izni değiştirilebilir.
.IP \(bu 3
Yeni dosyalar "normal" izin bitlerini, alıcı dizinin öntanımlı izinleriyle (alıcı sürecin umask’ı veya hedef dizinin öntanımlı ACL’si aracılığıyla belirtilen izinler) maskelenmiş kaynak dosya izinlerinden alır, özel izin bitleri ise, yeni bir dizinin setgid bitini kendi üst dizininden devraldığı durum dışında devre dışı bırakılır.
.sp
.RE
.IP
.PD 0
Bu nedenle, \fB--perms\fR ve \fB--executability\fR seçeneklerinin ikisi de devre dışı bırakıldığında, \fBrsync\fR’in davranışı \fBcp\fR(1) ve \fBtar\fR(1) gibi diğer dosya kopyalama uygulamalarıyla aynıdır.
.sp
Özetle: Hedef dosyalara (hem eski hem de yeni) kaynak izinlerini vermek için \fB--perms\fR kullanılmalıdır. Yeni dosyalara hedefin öntanımlı izinlerini vermek için (mevcut dosyaları değiştirmeden bırakarak), \fB--perms\fR seçeneği olmaksızın \fB--chmod=ugo=rwX\fR kullanılması gerekir (bu, tüm maskelenmemiş bitlerin etkinleştirilmesini sağlar). Bu seçeneklerin daha sonra kolayca yazılması için, ~/.popt adında bir dosya oluşturup komut satırının bu dosyay yazılması ve popt takma adının tanımlanması yeterli olur. Aşağıdaki örnekte, diğer seçeneklere ek olarak hedef dizinin öntanımlı grubunun kullanılması için \fB--no-g\fR seçeneğini de içeren bir takma ad olarak \fB-Z\fR seçeneği tanımlanmaktadır:
.sp
.RS 4
.RS 4
.nf
rsync alias -Z --no-p --no-g --chmod=ugo=rwX
.fi
.sp
.RE
.RE
.IP
Bu yeni seçenek komut satırında şöyle kullanılabilirdi:
.sp
.RS 4
.RS 4
.nf
rsync -avZ kaynak/ hedef/
.fi
.sp
.RE
.RE
.IP
(Önemli: \fB-a\fR seçeneğinin \fB-Z\fR seçeneğinden önce kullanılmasına dikkat edilmelidir, yoksa yukarıdaki -\fB-no-*\fR seçeneklerinin ikisi de geçersiz olur.)
.sp
\fB--perms\fR seçeneğinin belirtilmediği durumda yeni oluşturulan dizinlerde hedefin setgid bitinin korunması özelliği 2.6.7 sürümünde eklenmiştir. Daha eski \fBrsync\fR sürümleri, yeni oluşturulan dizinde hedefin setgid bitini geçersiz kılarken, \fB--perms\fR belirtilmediğinde yeni oluşturulan dosyalar için üç özel izin bitini hatalı bir şekilde koruyordu. \fBrsync\fR 2.6.7 sürümünde ACL yamasına öntanımlı ACL gözlemi eklendi, bu nedenle daha eski (veya ACL-etkin olmayan) \fBrsync\fR’ler, öntanımlı ACL’ler mevcut olsa bile umask’ı kullanır. (Bu davranışları etkileyenin, alıcının \fBrsync\fR sürümü olduğunu unutulmamaldır.)
.sp
.TP 4
\fB-E\fR, \fB--executability\fR
\fB--perms\fR seçeneği etkin değilse bu seçenek normal dosyaların çalıştırılabilirliğini/çalıştırılamazlığını korur. Normal bir dosyanın çalıştırılabilir olması için izinlerinde en azından bir "x" etkin olmalıdır. Mevcut bir hedef dosyanın çalıştırılabilirliği kaynaktakinden farklıysa \fBrsync\fR hedef dosyanın izinlerinde aşağıdaki gibi değişiklik yapar:
.sp
.PD 1
.RS 5
.IP \(bu 3
Bir dosyanın çalıştırılabilir olmaması için \fBrsync\fR dosyanın tüm ’x’ izinlerini kapatır.
.IP \(bu 3
Bir dosyayı çalıştırılabilir yapmak için her etkin ’r’ izni için ’x’ iznini etkin kılar.
.sp
.RE
.IP
.PD 0
\fB--perms\fR seçeneği etkinse bu seçenek yok sayılır.
.sp
.TP 4
\fB-A\fR, \fB--acls\fR
Bu seçenekle hedefin ACL’si (Erişim Denetim Listesi) kaynağınkiyle aynı yapılır. Bu seçenek \fB--perms\fR seçeneğinin örtük olarak uygulanmasına sebep olur.
.sp
Bu seçeneğin düzgün çalışabilmesi için kaynak ve hedef ACL’lerinini uyumlu olması gerekir. Uyumlu olmayan ACL’lerin yedeklenmesi ve geri yüklenmesi ile ilgili bilgi için bkz: \fB--fake-super\fR.
.sp
.TP 4
\fB-X\fR, \fB--xattrs\fR
Bu seçenek, hedefin ek özniteliklerinin kaynağınkiyle aynı olmasını sağlar.
.sp
Genişletilmiş öznitelik isim alanlarını destekleyen sistemler için, ayrıcalıklı kullancı tarafından yapılan bir kopyalama, \fIsistem.*\fR dışındaki tüm isim alanlarını kopyalar. Normal bir kullanıcı yalnızca \fIuser.*\fR isim alanını kopyalar. Normal kullanıcı aidiyetinde olmayan isim alanlarının normal bir kullanıcı olarak yedeklenmesi ve geri yüklenmesi ile ilgili bilgi için bkz: \fB--fake-super\fR.
.sp
Yukarıdaki isim alanı yetkilendirmesi x belirteçli süzme seçenekleriyle geçersiz kılınabilir. Ek öznitelikleri etkileyen bir süzme kuralı belirtildiğinde, \fBrsync\fR, kullanıcının kendi \fIsistem.*/user.*\fR süzme kurallarını uygulamasını ve ayrıca kopyalanacak veya silinecek ek öznitelik adlarına ilişkin ek süzme işlemlerini yapmasını gerektirir. Örneğin, \fIsistem.*\fR isim alanını atlamak için şu belirtilebilir:
.sp
.RS 4
.RS 4
.nf
--filter=’-x system.*’
.fi
.sp
.RE
.RE
.IP
Kullanıcı isim alanı dışındaki tüm isim alanlarını atlamak için kullanıcı isim alanına olumsuzlama uygulanabilir:
.sp
.RS 4
.RS 4
.nf
--filter=’-x! user.*’
.fi
.sp
.RE
.RE
.IP
Özniteliklerin silinmesini engellemek için tüm isimleri dışlayan alıcıya özel bir kural belirtilebilir:
.sp
.RS 4
.RS 4
.nf
--filter=’-xr *’
.fi
.sp
.RE
.RE
.IP
\fB-X\fR seçeneği yinelenmedikçe (\fB-XX\fR gibi) \fBrsync\fR’in özel ek öznitelik değerlerini (örn, \fB--fake-super\fR ile kullanılanları) kopyalamaz. Bu "tüm ek öznitelikleri kopyala" kipi \fB--fake-super\fR seçeneğiyle birlikte kullanılamaz.
.sp
.TP 4
\fB--chmod\fR=\fIKİP\fR
Bu seçenek, aktarımdaki dosyaların izinlerine bir veya daha fazla virgül ayraçlı \fBchmod\fR kipinin uygulamasını sağlar. Ortaya çıkan değer, gönderen tarafın dosya için sağladığı izinler olarak değerlendirilir; \fB--perms\fR seçeneği belirtilmemişse bu seçeneğin mevcut dosyalar üzerinde hiçbir etkisi olmaz.
.sp
\fBchmod\fR(1) kılavuz sayfasında belirtilen normal çözümleme kurallarına ek olarak, ’\fBD\fR’ ile öncelenerek belirtilen öğeler yalnızca dizinlere, ’\fBF\fR’ ile öncelenerek belirtilen öğeler ise yalnızca dosyalara uygulanır. Örneğin, aşağıdakiler tüm dizinlerin setgid olarak imlenmesini, dosyalara başkaları tarafından yazılamamasını, kullanıcı ve grup tarafından yazılabilmesini ve tüm bitlerle tutarlı çalıştırılabilirlik sağlayacaktır:
.sp
.RS 4
.RS 4
.nf
--chmod=Dg+s,ug+w,Fo-w,+X
.fi
.sp
.RE
.RE
.IP
Ayrıca sekizlik gösterime de izin verilir:
.sp
.RS 4
.RS 4
.nf
--chmod=D2775,F664
.fi
.sp
.RE
.RE
.IP
Çok sayıda \fB--chmod\fR seçeneği belirterek bunların yapılacak değiklikler listesine eklenmesini sağlamak da mümküdür.
.sp
Aktarımdaki dosyalara uygulanabilen izin değerlerinin \fB--perms\fR ve \fB--executability\fR seçenekleriyle verdiği sonuçları incelemek için bu seçeneklerin açıklamalarına bakılabilir.
.sp
.TP 4
\fB-o\fR, \fB--owner\fR
Alıcı taraftaki \fBrsync\fR ayrıcalıklı kullancının aidiyetinde çalıştırıldığı takdirde, hedef dosyanın sahibinin aynı kaynak dosyadaki gibi belirlenmesini sağlar (ayrıca, bkz: \fB--super\fR ve \fB--fake-super\fR). Çoğu sistemde sadece ayrıcalıklı kullanıcı dosya aidiyetini belirleyebilir. Bu seçenek olmaksızın yeni ve/veya aktarılan dosyaların sahibi alıcı taraftaki \fBrsync\fR’i çalıştıran kullanıcıdır.
.sp
Sahiplik koruması, ilişkilendirmenin öntanımlı olarak kullanıcı adıyla yapılmasını gerektirir, ancak bazı durumlarda son çare olarak kullanıcı kimliği de kullanılabilir (Bu konu \fB--numeric-ids\fR seçeneğinin açıklamasında daha ayrıntılı incelenmiştir).
.sp
.TP 4
\fB-g\fR, \fB--group\fR
Alıcı taraftaki \fBrsync\fR ayrıcalıklı kullancının aidiyetinde çalıştırıldığı takdirde, hedef dosyanın grubunun aynı kaynak dosyadaki gibi belirlenmesini sağlar. Alıcı tarafta \fBrsync\fR’i ayrıcalıklı kullanıcı çalıştırmıyorsa (veya --no-super belirtilmişse), yalnızca çalıştıran kullanıcının üyesi olduğu gruplar korunur. Bu seçenek olmaksızın yeni ve/veya aktarılan dosyaların grubu alıcı taraftaki \fBrsync\fR’i çalıştıran kullanıcının öntanımlı grubudur.
.sp
Grup koruması, ilişkilendirmenin öntanımlı olarak grup adıyla yapılmasını gerektirir, ancak bazı durumlarda son çare olarak grup kimliği de kullanılabilir (Bu konu \fB--numeric-ids\fR seçeneğinin açıklamasında daha ayrıntılı incelenmiştir).
.sp
.TP 4
\fB--devices\fR
Aktarılan karakter ve blok aygıtları alıcı sistemde yeniden oluşturulur. Alıcı taraftaki \fBrsync\fR ayrıcalıklı kullanıcının aidiyetine değilse, aygıt dosyalarını oluşturma adımı sessizce atlanır (ayrıca, bkz: \fB--super\fR ve \fB--fake-super\fR).
.sp
Bu seçenek belirtilmemişse, öntanımlı olarak \fBrsync\fR rastladığı her aygıt dosyası için "skipping non-regular file" (normal dosya olmadığından atlanıyor) uyarısı üretir. Uyarıyı \fB--info=nonreg0\fR kullanarak susturmak mümkündür.
.sp
.TP 4
\fB--specials\fR
Soket, isimli boru gibi özel dosyaların aktarılmasını sağlar. Alıcı taraftaki \fBrsync\fR ayrıcalıklı kullanıcının aidiyetine değilse, bu dosyaları oluşturma adımı sessizce atlanır (ayrıca, bkz: \fB--super\fR ve \fB--fake-super\fR).
.sp
Bu seçenek belirtilmemişse, öntanımlı olarak \fBrsync\fR rastladığı her özel dosya için "skipping non-regular file" (normal dosya olmadığından atlanıyor) uyarısı üretir. Uyarıyı \fB--info=nonreg0\fR kullanarak susturmak mümkündür.
.sp
.TP 4
\fB-D\fR
"\fB--devices\fR \fB--specials\fR" seçeneklerine eşdeğerdir.
.sp
.TP 4
\fB--copy-devices\fR
Bir aygıtın gönderen tarafta sıradan bir dosya olarak ele alınmasını ve alıcı tarafta normal bir dosyaya (veya \fB--write-devices\fR seçeneği de belirtilmişse başka bir aygıta) kopyalanmasını sağlar.
.sp
Bu seçenek \fBrsync\fR artalan süreci tarafından öntanımlı olarak reddedilir.
.sp
.TP 4
\fB--write-devices\fR
Bir aygıtın alıcı tarafta sıradan bir dosya olarak ele alınmasını ve dosya verisinin bir aygıta yazılmasını sağlar.
.sp
Örtük olarak --inplace seçeneğinin uygulanmasını sağlar.
.sp
.RS 4
.TP 4
\fBDikkat:\fR
\fBrsync\fR özellikle, ayrıcalıklı kullancının aidiyetinde çalışıyorsa, aktarım sırasında alıcı tarafta hangi aygıtların mevcut olduğunun bilinmesi gerekir.
.sp
.RE
.IP
Bu seçenek \fBrsync\fR artalan süreci tarafından öntanımlı olarak reddedilir.
.sp
.TP 4
\fB-t\fR, \fB--times\fR
Bu seçenek \fBrsync\fR’e, dosyaları değişiklik zamanlarına göre aktarmasını ve bunları uzak sistemde güncellemesini söyler. Bu seçenek kullanılmazsa, değiştirilmemiş dosyaları dışlayan en iyileme etkili olamaz; başka bir deyişle, bu seçeneğin veya \fB-a\fR seçeneğinin yokluğu sonraki aktarımda \fB-I\fR kullanılmış gibi tüm dosyaların güncellenmesine yol açar (eğer dosyalar gerçekten değişmemişse, \fBrsync\fR’in delta aktarım algoritması güncellemeyi oldukça verimli yapsa da bu seçeneğin kullanılması çok daha iyi olacaktır).
.sp
.TP 4
\fB-U\fR, \fB--atimes\fR
Hedef dosyanın erişim zamanına kaynak dosyadaki değerin atanmasını sağlar.
.sp
Yinelenirse, aktarım tamamlandıktan sonra \fBrsync\fR’in bir süre daha çalıştırılması gerekmeksizin, gönderici ve alıcı sistemlerin aktarılan dosyaların erişim zamanlarını eşlemesine yardımcı olan \fB--open-noatime\fR seçeneğini örtük olarak etkinleştirir.
.sp
.RS 4
.TP 4
\fBBilgi:\fR
3.2.0 öncesi bazı \fBrsync\fR sürümleri, bu seçenek yinelendiğinde örtük olarak \fB--open-noatime\fR uygulamayan bir ön \fB--atimes\fR yamasıyla derlenmiş olabilir.
.sp
.RE
.IP
.sp
.TP 4
\fB--open-noatime\fR
Aktarılmakta olan dosyaların erişim zamanının değiştirilmemesi için dosyaların \fBO_NOATIME\fR bayrağıyla (destekleyen sistemlerde) açılmasını sağlar. İşletim sisteminiz \fBO_NOATIME\fR bayrağını desteklemiyorsa, \fBrsync\fR bu seçeneği sessizce yok sayar. Ayrıca, bazı dosya sistemlerinin, \fBO_NOATIME\fR bayrağı belirtilmeden bile, okuma erişiminde erişim zamanın güncellenmesini önleyecek şekilde bağlanabildiği unutulmamalıdır.
.sp
.TP 4
\fB-N\fR, \fB--crtimes\fR
Hedef dosyanın oluşturulma zamanına kaynak dosyadaki değerin atanmasını sağlar.
.sp
.TP 4
\fB-O\fR, \fB--omit-dir-times\fR
Değişiklik, erişim ve oluşturulma zamanlarını korumak için dizinlerin atlanmasını sağlar. Alıcı tarafta NFS’nin paylaştığı dizinler için bu seçeneği kullanmak daha iyidir. \fB--backup\fR bu seçenekle birlikte \fB--backup-dir\fR olmaksızın kullanılamaz.
.sp
Bu seçeneğin ayrıca \fB--inc-recursive\fR seçeneğinde incelendiği gibi arttırımlı özyineleme etkinleştirildiğinde eksik alt dizinlerin önceden oluşturulmasını önleme gibi bir yan etkisi de vardır.
.sp
.TP 4
\fB-J\fR, \fB--omit-link-times\fR
Değişiklik, erişim ve oluşturulma zamanlarını korumak için sembolik bağların atlanmasını sağlar.
.sp
.TP 4
\fB--super\fR
Bu seçenekle \fBrsync\fR, alıcı tarafta ayrıcalıklı kullanıcı tarafından çalıştırılmamış olsa bile ayrıcalıklı kullanıcı etkinliklerini yerine getirebilir. Bu etkinlikler şunları içerir: \fB--owner\fR seçeneği aracılığıyla kullanıcıları korumak, \fB--group\fR seçeneği aracılığıyla tüm grupları (yalnızca geçerli kullanıcının gruplarını değil) korumak ve \fB--devices\fR seçeneği aracılığıyla aygıtları kopyalamak. Ayrıcalıklı kullanıcı olmadan bu tür etkinliklere izin veren sistemler için ve ayrıca alıcı taraf ayrıcalıklı kullanıcı olarak çalıştırılmıyorsa hata almanızı sağlamak için kullanışlıdır. Ayrıcalıklı kullanıcı etkinliklerini kapatmak için ayrıcalıklı kullanıcı \fB--no-super\fR seçeneğini kullanabilir.
.sp
.TP 4
\fB--fake-super\fR
Bu seçenek etkinleştirildiğinde, \fBrsync\fR, her dosyaya eklenen özel ek öznitelikler aracılığıyla (gerektiğinde) ayrıcalıklı öznitelikleri kaydederek/geri yükleyerek ayrıcalıklı kullanıcı etkinliklerini taklit eder. Buna dosyanın sahip ve grubu (öntanımlı değilse), dosyanın aygıt bilgisi (aygıt ve özel dosyalar boş metin dosyaları olarak oluşturulur) ve gerçek dosyalara atanmasına izin verilmeyen veya sahibinin erişimini kısıtlayan (\fBchattr +i <dosya>\fR komutundaki gibi) izin bitleri dahildir. Bu seçenek ayrıca ACL’lerin (\fB--acls\fR belirtilmişse) ve kullanıcı ek özniteliklerinin (\fB--xattrs\fR belirtilmişse) de işlenebilmesini sağlar.
.sp
Bu seçenek, ayrıcalıklı kullanıcı olmaksızın verileri yedeklemenin ve uyumsuz sistemlerdeki ACL’leri depolamanın iyi bir yoludur.
.sp
Bu seçenek sadece seçeneği kullanan tarafı etkiler. Uzak kabuk bağlantısının uzak tarafını etkilemek için \fB--remote-option\fR (\fB-M\fR) seçeneği kullanılır:
.sp
.RS 4
.RS 4
.nf
rsync -av -M --fake-super /kaynak/ konak:/hedef/
.fi
.sp
.RE
.RE
.IP
Yerel kopya için, bu seçenek hem kaynağı hem de hedefi etkiler. Yerel kopyanın sadece hedef dosyalar için bu seçeneği etkinleştirmesi istenirse \fB-M\fR -\fB-fake-super\fR seçenekleri, sadece kaynak dosyalar için ise \fB--super\fR ile \fB-M\fR \fB-fake-super\fR birlikte kullanılır.
.sp
Bu seçenek hem \fB--super\fR hem de \fB--no-super\fR seçeneğini geçersiz kılar.
.sp
Artalan sürecinin \fBrsyncd.conf\fR(5) dosyasındaki "\fBfake süper\fR" modül bağımsız değişkeninin açıklamasına da bakılabilir.
.sp
.TP 4
\fB-S\fR, \fB--sparse\fR
Bu seçenekle \fBrsync\fR, seyrek dosyaların hedefte daha az yer kaplayacak şekilde elde edilmesini sağlamaya çalışır. \fB--inplace\fR ile birlikte kullanılırsa, oluşturulan dosya bazı çekirdek sürümlerinde ve/veya dosya sistemlerinde seyrek bloklarla sonuçlanmayabilir. \fB--whole-file\fR etkinse (örneğin yerel kopya için), güncellenmiş sürüm yazılmadan önce dosya kırpıldığından daima en iyi sonuç elde edilir.
.sp
.RS 4
.TP 4
\fBUyarı:\fR
3.1.3 öncesi \fBrsync\fR sürümlerinde \fB--sparse\fR ve \fB--inplace\fR birlikte kullanılamaz.
.sp
.RE
.IP
.sp
.TP 4
\fB--preallocate\fR
Alıcı tarafın, dosyaya veri yazmadan önce her hedef dosyaya nihai boyutunu tahsis etmesini sağlar. \fBrsync\fR, her bloğa boş karakter yazan yavaş glibc uygulamasını değil, yalnızca Linux’un \fBfallocate\fR(2) sistem çağrısı veya Cygwin’in \fBposix_fallocate\fR(3) çağrısı tarafından sağlanan gerçek dosya sistemi düzeyinde ön tahsis desteğini kullanır.
.sp
Bu seçenek olmadan, büyük dosyaların blokları dosya sisteminde bitişik olmayabilir, ancak bu seçenekle \fBrsync\fR muhtemelen daha yavaş kopyalama yapar. Hedef, genişletme destekleyen bir dosya sistemi (ext4, xfs, NTFS, vb.) değilse, bu seçeneğin hiçbir olumlu etkisi olmayabilir.
.sp
\fB--sparse\fR ile birlikte kullanımda çekirdek sürümü ve dosya sistemi türü, (boş karakter dizgeleri tahsisinin aksine) ayrılan veride delikler oluşturmayı destekliyorsa, dosyada yalnızca seyrek bloklar bulunacaktır.
.sp
.TP 4
\fB-n\fR, \fB--dry-run\fR
Bu seçenek \fBrsync\fR’e, herhangi bir dosya aktarımı yapmamasını, sadece yapıyormuş gibi işlemleri raporlamasını söyler. \fBrsync\fR gerçekten çalıştırılmadan önce ne yapacağını görmek için çoğunlukla \fB--verbose\fR (\fB-v\fR) ve/veya \fB--itemize-changes\fR (\fB-i\fR) seçenekleriyle birlikte kullanılır.
.sp
\fB--itemize-changes\fR çıktısının, kuru çalıştırmada ve sonraki gerçek çalıştırmada tamamen aynı olması beklenir (kasıtlı hile ve sistem çağrısı hataları hariç); aynı değilse, bu yazılım hatasıdır. Diğer çıktıların çoğunlukla değişmemesi gerekir, ancak bazı alanlarda farklılık gösterebilir. Özellikle, kuru çalıştırmada dosya aktarımları için gerçek veriler gönderilmez, bu nedenle \fB--progress\fR seçeneğinin hiçbir etkisi olmaz, "gönderilen baytlar", "alınan baytlar", "değişmez veriler" ve "eşleşen veriler" istatistikleri çok küçüktür ve "hızlanma" değeri, dosya aktarımının gerekmediği bir çalıştırmaya eşdeğerdir.
.sp
.TP 4
\fB-W\fR, \fB--whole-file\fR
Bu seçenekle delta aktarım algortiması kullanılmaz ve bunun yerine dosya olduğu gibi gönderilir. Eğer kaynak ile hedef konaklar arasındaki aktarım hızı disk yazma hızından (özellikle disk, ağ dosya sisteminin bir parçası ise) yüksekse bu seçenekle aktarım daha hızlı olabilir. Kaynak ve hedef yerel dosya yolları olarak belirtilmişse ve hiçbir toplu işlem dosyası yazma seçeneği etkin değilse bu seçenek öntanımlıdır.
.sp
.TP 4
\fB-no-W\fR, \fB--no-whole-file\fR
Yerel aktarımda \fB--whole-file\fR öntanımlı olduğunda bu seçenek onu kapatır. Bu genellikle \fBrsync\fR’i yavaşlatır, ancak hedef dosyaya yazılanlar en aza indirilmeye çalışılıyorsa (\fB--inplace\fR ile birlikte kullanılıyorsa) veya sağlama toplamı tabanlı güncelleme algoritması sınanacaksa yararlı olabilir.
.sp
Bkz: Yukarıdaki \fB--whole-file\fR seçeneği.
.sp
.TP 4
\fB-cc\fR, \fB--checksum-choice\fR=\fIALGO\fR
Bu seçenek, sağlama toplamı algoritmalarını geçersiz kılar. Bir algoritma adı belirtilirse, hem aktarım sağlama toplamları hem de (\fB--checksum\fR belirtildiğini varsayarak) aktarım öncesi sağlama toplamları için kullanılır. Virgülle ayrılmış iki ad verilirse, ilk ad aktarım sağlama toplamlarını ve ikinci ad aktarım öncesi sağlama toplamlarını (\fB-c\fR) etkiler.
.sp
Algoritma seçenekleri:
.sp
.RS 4
.RS 4
.nf
\fBauto\fR (öntanımlı otomatik seçim)
\fBxxh128
xxh3
xxh64\fR (diğer adı: xxhash)
\fBmd5
md4
none\fR
.fi
.sp
.RE
.RE
.IP
Kurulu sürümün öntanımlı sağlama toplamı algoritmalarının listesi (yukarıdakinden farklı olabilir) için \fBrsync --version\fR komutu kullanılabilir.
.sp
İlk isim veya tek isim olarak "\fBnone\fR" belirtilirse \fB--whole-file\fR seçeneği zorlanır ve hiçbir sağlama toplamı sınaması yapılmaz. İkinci veya tek isim olarak "\fBnone\fR" belirtilirse \fB--checksum\fR seçeneği belirtilemez.
.sp
"\fBauto\fR" seçeneği öntanımlı olup \fBrsync\fR, algoritma seçimini aşağıdaki gibi istemci ve sunucu arasındaki uzlaşıma dayalı olarak yapar:
.sp
Aktarımın her iki tarafında da 3.2.0 ve üstü \fBrsync\fR olduğunda, istemcinin ve sunucunun seçenekler listesindeki ilk algoritma seçilir. Ortak bir sağlama toplamı seçeneği bulunamazsa, \fBrsync\fR hata vererek çıkar. Uzak \fBrsync\fR, sağlama toplamı uzlaşımını desteklemek için çok eskiyse, protokol sürümüne göre bir değer seçilir (protokol yaşına göre MD4’ün çeşitli türleri ile MD5 arasından bir seçim yapılır).
.sp
Öntanımlı sıra, \fBRSYNC_CHECKSUM_LIST\fR ortam değişkenine boşlukla ayrılmış kabul edilebilir sağlama toplamı adları listesi atanarak özelleştirilebilir. Dizge bir "&" karakteri içeriyorsa, liste "istemci dizgesi & sunucu dizesi" olarak ayrılır, aksi takdirde aynı dizge her ikisi için de geçerli olur. Dizge (veya dizge bölümü) boşluk olmayan karakterler içermiyorsa, öntanımlı sağlama toplamı listesi kullanılır. Bu yöntem, aktarım sağlama toplamını, aktarım öncesi sağlama toplamından ayrı olarak belirlemenize izin vermez ve "\fBauto\fR" ve tüm bilinmeyen sağlama toplamı adlarını yok sayar. Yalnızca geçersiz adlardan oluşan bir liste, başarısız uzlaşımla sonuçlanır.
.sp
Bu seçenek ortam değişkeninde belirtilen listeyi geçersiz kılar.
.sp
.TP 4
\fB-x\fR, \fB--one-file-system\fR
Bu seçenek \fBrsync\fR’e, ardışık aktarım sırasında dosya sistemi sınırlarının dışına çıkmamasını söyler. Bu, kullanıcının birden çok dosya sisteminden kopyalanacak öğeleri belirleme yeteneğini sınırlamaz, yalnızca \fBrsync\fR’in kullanıcının belirlediği her dizini ve alt dizinlerini ardışık taramasını ve ayrıca silme sırasında alıcı tarafta da buna benzer bir işlem yapmasını sağlar. Ayrıca, \fBrsync\fR’in aynı aygıta bir "bağlama" noktası oluşturup aynı dosya sistemindeymiş gibi davrandığını unutulmamalıdır.
.sp
Bu seçenek yinelenirse, \fBrsync\fR tüm bağlama noktası dizinlerini kopyadan çıkarır. Aksi takdirde, karşılaştığı her bağlama noktasında (bağlama noktasının bulunduğu dizininin özelliklerine erişilemediğinden bağlı dizinin özniteliklerini kullanarak) boş bir dizin oluşturur.
.sp
\fBrsync\fR’ten sembolik bağları daraltması istendiyse (\fB--copy-links\fR veya \fB--copy-unsafe-links\fR aracılığıyla), başka bir aygıttaki bir dizine giden bir sembolik bağ, bir bağlama noktası olarak değerlendirilir. Dizin olmayanlara sembolik bağlar bu seçenekten etkilenmez.
.sp
.TP 4
\fB--existing\fR, \fB--ignore-non-existing\fR
Bu seçenek \fBrsync\fR’e, hedefte yeni dosya/dizin oluşturulmasını gerektirecek aktarımları yapmamasını sadece güncelleme yapmasını söyler. \fB--ignore-existing\fR seçeneği ile birlikte kullanılırsa, hiçbir dosya güncellenmez (yapılmak istenen gereksiz dosyaları silmekse yararlı olabilir).
.sp
Bu seçenek bir aktarım kuralıdır, dışlama kuralı değildir, bu bakımdan dosya listelerine giden veriyi ve dolayısıyla silme işlemini etkilemez. Sadece alıcının aktarılmasını istediği dosyaları sınırlar.
.sp
.TP 4
\fB--ignore-existing\fR
Bu seçenek \fBrsync\fR’e, hedefte mevcut olan dosyaları güncellememesini söyler (Bu mevcut dizinleri yok saymaz ya da hiçbir şey yapılmaz). Ayrıca bkz: \fB--ignore-non-existing\fR
.sp
Bu seçenek bir aktarım kuralıdır, dışlama kuralı değildir, bu bakımdan dosya listelerine giden veriyi ve dolayısıyla silme işlemini etkilemez. Sadece alıcının aktarılmasını istediği dosyaları sınırlar.
.sp
Bu seçenek, \fB--link-dest\fR seçeneğini kullanarak yedekleme yapanlar için kesintiye uğrayan bir yedeklemeyi devam ettirmek gerektiğinde yararlı olabilir. \fB--link-dest\fR kullanımı (düzgün kullanıldığında) yeni bir dizin hiyerarşisine kopyalama yapılmasını sağladığından \fB--ignore-existing\fR seçeneği ile evvelce işlem görmüş dosyaların didiklenmemesi sağlanır (sabit bağlı dosyaların izinlerinde değişiklik yapılmasını önler). Yani, bu seçenek yalnızca hedef hiyerarşi içinde mevcut olan dosyalarla ilgilenir.
.sp
\fB--info=skip2\fR kullanıldığında \fBrsync\fR, \fIBİLGİ\fR’nin "tür değişikliği", "toplam değişiklik" (\fB-c\fR gerektirir), "dosya değişikliği" (hızlı sınamaya dayalı olarak),"öznitelik değişikliği" veya "güncel" anlamına geldiği "\fIDOSYA\fR var (\fIBİLGİ\fR)" iletisini çıktılar. \fB--info=skip1\fR kullanıldığında ise (örtük olarak \fB-vv\fR uygulayarak) mevcut iletiyi \fIBİLGİ\fR soneki olmadan çıktılar.
.sp
.TP 4
\fB--remove-source-files\fR
Bu seçenek \fBrsync\fR’e, hedefte yeni oluşturulan dosyalarla içeriği güncellenenleri, gönderen taraftan silmesini söyler. Dizinler ve aygıtlar ile sadece öznitelikleri değiştirilmiş dosyalar silinmez.
.sp
Bu seçenek yalnızca hareket görmeyen kaynak dosyalarda kullanılmalıdır. Belirli bir dizinde görünen dosyaların başka bir konağa taşınması için kullanılıyorsa, tamamlanan dosyaların kaynak dizinde doğrudan üzerlerine yazılmadığından, isimlerinin değiştirildiğinden emin olunmalıdır, böylece \fBrsync\fR henüz tam olarak yazılmamış bir dosyayı muhtemelen aktaramayacaktır. Dosyalar önce farklı bir dizine yazılamıyorsa, \fBrsync\fR’in henüz tamamlanmamış dosyaları aktarmaktan kaçınmasını sağlayan bir adlandırma deyimi kullanılmalıdır (örneğin, dosyanın adını yazıldığında “\fIfoo.new\fR”, işi bittiğinde “\fIfoo\fR” yapmak ve ardından \fBrsync\fR aktarımı için \fB--exclude=’*.new’\fR seçeneğini kullanmak gibi).
.sp
3.1.0 sürümünden başlayarak, dosyanın boyutu veya değiştirilme zamanı değişmemişse, \fBrsync\fR gönderen tarafı silme işlemini bir hata vererek atlayacaktır.
.sp
.TP 4
\fB--delete\fR
Bu seçenek \fBrsync\fR’e, hedefte olup kaynakta olmayan dosyaları hedeften silmesini söyler, fakat sadece dosyalar dizinleri ile belirtilmişse bu yapılır. Yani, \fBrsync\fR’den tüm dizini ("\fIdir\fR" veya "\fIdir/\fR" gibi) göndermesini istemeli, dizin içeriğini belirten dosya kalıpları ("\fIdir/*\fR" gibi) belirtmemelisiniz. Dosya kalıpları belirtildiğinde kalıp kabuk tarafından yorumlanır ve kabuk \fBrsync\fR’den dosyaları kapsayan dizini değil, tek tek dosyaları aktarmasını ister. Aktarımdan dışlanan dosyalardan biriyse, \fB--delete-excluded\fR kullanılmamışsa ya da kurallar sadece gönderen tarafla eşleşenleri imliyorsa hedefte silinecek olanlar da dışlanır (\fBSÜZME KURALLARI\fR bölümündeki içerme/dışlama belirteçlerine bakınız).
.sp
rsync 2.6.7 öncesinde, \fB--recursive\fR etkin olmadıkça bu seçeneğin hiçbir etkisi olmazdı. 2.6.7 sürümünden itibaren, silme işlemi sadece içeriği kopyalanan dizinler için sadece \fB--dirs\fR (-d) etkin olduğunda etkili olur.
.sp
Bu seçenek doğru şekilde kullanılmazsa tehlikeli olabilir. Önce \fB--dry-run\fR (\fB-n\fR) seçeneğiyle silinecek dosyaları görüp, önemli dosyaların silinmeyeceğinden emin olduktan sonra asıl işlemi başlatmak çok daha iyidir.
.sp
Gönderen tarafta bir G/Ç hatası saptandığında hedefteki dosya silme işlemi iptal edilir. Bu, gönderen tarafın alıcı taraftaki dosyaları tümden silmesi gibi geçici dosya sistemi hatalarına karşı (NFS hataları gibi) bir önlemdir. Bu davranış \fB--ignore-errors\fR seçeneğiyle iptal edilebilir.
.sp
\fB--delete\fR seçeneği silme zamanını belirten \fB--delete-*\fR seçenekleriyle, \fB--delete-excluded\fR dahil, herhangi bir sorun olmaksızın birleştirilebilir. Ancak, silme zamanını belirten \fB--delete-*\fR seçeneklerinden biri belirtilmemişse, öntanımlı olarak hedefteki \fBrsync\fR 3.0.0 veya sonraki bir sürümse \fB--delete-during\fR algoritmasını, öncekilerden biri ise \fB--delete-before\fR algoritmasını seçer. Ayrıca bkz: \fB--delete-after\fR ve \fB--delete-delay\fR.
.sp
.TP 4
\fB--delete-before\fR
Alıcı taraftaki dosya silme işlemlerinin aktarım başlamadan önce yapılmasını sağlar. Doğrudan veya örtük dosya silinmesi ile ilgili daha ayrıntılı bilgi için bkz: \fB--delete\fR seçeneği.
.sp
Aktarımın başında silme yapılması, eğer dosya sistemi doluluk bakımından sınırda ise ve ancak fazlalıkların kaldırılmasıyla dosya aktarımı mümkün olabilecekse yararlıdır. Ancak, bu seçenek aktarımın başlamasını geciktirdiğinden aktarımın zamanaşımına uğramasına (\fB--timeout\fR belirtilmişse) sebep olabilir. Ayrıca \fBrsync\fR’i, aktarımdaki tüm dosyaları bellekte bir kerede taramak için eski, artırımlı olmayan yineleme algoritmasını kullanmaya zorlar. (Bkz: \fB--recursive\fR seçeneği).
.sp
.TP 4
\fB--del\fR, \fB--delete-during\fR
Alıcı taraftaki dosya silme işlemlerinin aktarım sırasında arttırımlı yapılmasını sağlar. Bu yöntem silme işleminin aktarımdan önce ve sonra yapıldığı algoritmalardan daha hızlıdır. Dizin başına silme taraması, her dizin güncellemeler için denetlenmeden hemen önce yapılır, bu nedenle daha verimli bir \fB--delete-before\fR gibi davranır, silme işlemlerinin dizin başına süzme dosyalarının güncellenmesinden önce yapılması da buna dahildir. Fakat ilk olarak \fBrsync\fR’in 2.6.4 sürümüyle kullanılabilir olmuştur. Doğrudan veya örtük dosya silinmesi ile ilgili daha ayrıntılı bilgi için bkz: \fB--delete\fR seçeneği.
.sp
.TP 4
\fB--delete-delay\fR
Alıcı taraftaki dosya silme işlemlerinin aktarım sırasında hesaplanmasını (\fB--delete-during\fR gibi) ve aktarım tamamlandıktan sonra da gerçekleştirilmesini sağlar. Bu, \fB--delay-updates\fR ve/veya \fB--fuzzy\fR ile birleştirildiğinde yararlıdır ve \fB--delete-after\fR kullanmaktan daha verimlidir (ancak farklı davranabilir, çünkü \fB--delete-after\fR silmeleri, tüm güncellemeler yapıldıktan sonra ayrı bir geçişte hesaplanır). Kaldırılan dosyaların sayısı dahili bir tamponu aşarsa, adları tutmak için alıcı tarafta geçici bir dosya oluşturulur (açılırken kaldırılır, bu nedenle aktarım sırasında göremezsiniz). Geçici dosyanın oluşturulması başarısız olursa, \fBrsync\fR \fB--delete-after\fR kullanmaya geri dönmeye çalışır (eğer \fB--recursive\fR arttırımlı bir tarama yapıyorsa bu yapılamaz). Doğrudan veya örtük dosya silinmesi ile ilgili daha ayrıntılı bilgi için bkz: \fB--delete\fR seçeneği.
.sp
.TP 4
\fB--delete-after\fR
Alıcı taraftaki dosya silme işlemlerinin aktarım tamamlandıktan sonra yapılmasını sağlar. Eğer aktarımın bir parçası olarak dizin başına yeni dosya birleşimleri yapıyorsanız ve bunların dışlanmasının aktarımın silme fazında etkin olmasını istiyorsanız bu seçenek yararlı olacaktır. Ayrıca \fBrsync\fR’i, aktarımdaki tüm dosyaları bellekte bir kerede taramak için eski, arttırımlı olmayan özyineleme algoritmasını kullanmaya zorlar. (Bkz: \fB--recursive\fR seçeneği). Doğrudan veya örtük dosya silinmesi ile ilgili daha ayrıntılı bilgi için bkz: \fB--delete\fR seçeneği.
.sp
Ayrıca, yalnızca silme işlemlerinin aktarımın sonunda gerçekleşmesini isteyenler için daha hızlı bir seçim olabilecek \fB--delete-delay\fR seçeneğine de bakılabilir.
.sp
.TP 4
\fB--delete-excluded\fR
Alıcı tarafta olup, gönderici tarafta olmayan dosyaların alıcı tarafta silinmesine ek olarak, alıcı tarafta dışlanan dosyalarında silinmesini sağlar (bkz: \fB--exclude\fR seçeneği). Alıcı tarafta tek tek dosyaların dışlanmasının bu yöntemle silinmesi ve silinmesi istenmeyen dosyaların bu seçenekten korunması ile ilgili bilgiler için \fBSÜZME KURALLARI\fR bölümüne bakınız. Doğrudan veya örtük dosya silinmesi ile ilgili daha ayrıntılı bilgi için bkz: \fB--delete\fR seçeneği.
.sp
.TP 4
\fB--ignore-missing-args\fR
\fBrsync\fR, açıkça (örneğin, komut satırı bağımsız değişkenleri veya \fB--files-from\fR girdileri ile) istenen kaynak dosyaları ilk kez işlerken, dosyanın bulunamaması normalde bir hatadır. Bu seçenek bu hatayı baskılar ve dosyayı aktarmaya çalışmaz. Bir dosyanın başlangıçta mevcut olduğu ve daha sonra artık orada olmadığı tespit edilmişse, sonraki kaybolan dosyalarla ilgili hatalar bundan etkilenmez.
.sp
.TP 4
\fB--delete-missing-args\fR
Bu seçenek \fB--ignore-missing-args\fR seçeneğinin (örtük) davranışını bir adım öteye taşır: her eksik bağımsız değişken, alıcı taraftaki (varsa) karşılık gelen hedef dosya için silme isteği haline gelir. Hedef dosya boş olmayan bir dizinse, yalnızca \fB--force\fR veya \fB--delete\fR etkinse başarıyla silinir. Bunun dışında, bu seçenek diğer herhangi bir silme işlemi türünden bağımsızdır.
.sp
Eksik kaynak dosyalar, \fB--list-only\fR çıktısında "\fI*missing\fR" girdisi olarak görünen özel dosya listesi girdileriyle temsil edilir.
.sp
.TP 4
\fB--ignore-errors\fR
G/Ç hataları olsa bile \fB--delete\fR işleminin sürdürülmesini sağlar.
.sp
.TP 4
\fB--force\fR
Gönderici tarafta olmayan ancak alıcı tarafta olan dizinlerin içleri dolu bile olsa yerlerine aynı isimde bir dosya aktarılıyorsa silinmesini sağlar. Bu sadece \fB--delete\fR seçeneği olmaksızın böyledir, çünkü silme işlemleri artık iç içe dizinler içeren bir tepe dizinin silinmesi şeklinde yapılmaktadır. Doğrudan veya örtük dosya silinmesi ile ilgili daha ayrıntılı bilgi için bkz: \fB--delete\fR seçeneği.
.sp
.RS 4
.TP 4
\fBEski rsync sürümlerinde\fR
\fB--delete-after\fR kullanılırken \fB--force\fR hala zorunluydu ve \fB--recursive\fR seçeneği de etkinleştirilmediği takdirde işlevsel değildi.
.sp
.RE
.IP
.sp
.TP 4
\fB--max-delete\fR=\fISAYI\fR
\fISAYI\fR’dan fazla dosya ya da dizin silinmez. Sınır aşılırsa silme işlemi aktarımın sonuna atlar ve atlanan silme işlemlerinin sayısını bildiren bir uyarı çıktılayıp (daha önemli hatalar olmadıkça) 25 hata koduyla çıkar. Yansılama yapılırken çok büyük ağaçların yıkımına yol açmamak için yararlıdır.
.sp
3.0.0 sürümünden itibaren, hedefteki gereksiz dosyalar hakkında hiçbiri silinmeden uyarılmak için \fB--max-delete=0\fR belirtilebilir. Daha eski istemciler bunu "sınırsız" olarak yorumluyordu, bu nedenle istemcinin sürümü bilinmiyorsa, silmeye izin verilmeyeceğini belirtmek için geriye dönük uyumlu bir yol olarak, daha az belirgin olan \fB--max-delete=-1\fR kullanılabilir (gerçekten eski sürümler, sınır aşıldığında uyarmıyordu).
.sp
.TP 4
\fB--max-size\fR=\fIBOYUT\fR
\fIBOYUT\fR bayttan dha büyük dosyalar aktarılmaz. \fIBOYUT\fR belirtilirken, bayttan büyük birimler için sonek olarak K, M, G gibi bayt çarpanları belirtilebileceği gibi kesirli değerler de belirtilebilir (\fB--max-size=1.5m\fR gibi).
.sp
Bu seçenek bir aktarım kuralıdır, dışlama kuralı değildir, bu nedenle dosya listelerine giren verileri etkilemez ve dolayısıyla silme işlemlerini de etkilemez. Sadece alıcının aktarılmasını istediği dosyaların sayısını sınırlar.
.sp
Birim dizgesinin ilk harfi B (bayt), K (kilo), M (mega), G (giga), T (tera) veya P (peta) olabilir. Dizge tek bir karakterse veya kendisine "ib" eklenmişse (örneğin, "G" veya "GiB") bu durumda birimler 1024’ün katlarıdır. "B" ile biten iki harfli bir son ek kullanırsanız (ör. “kb”) 1000’in katları olan birimler elde edersiniz. Dizgenin harfleri, birimi belirten herhangi bir büyük veya küçük harfi içerebilir.
.sp
Son olarak, dizge “+1” veya “-1” ile bitiyorsa, belirtilen yönde bir bayt kaydırılır. Mümkün olan en büyük değer genellikle 8192P-1’dir.
.sp
Örnekler: \fB--max-size=1.5mb-1\fR ise 1499999 bayttır ve \fB--max-size=2g+1\fR ise 2147483649 bayttır.
.sp
3.1.0 öncesi \fBrsync\fR sürümlerinde \fB--max-size=0\fR belirtilemezdi.
.sp
.TP 4
\fB--min-size\fR=\fIBOYUT\fR
Belirtilen \fIBOYUT\fR değerinden daha küçük herhangi bir dosyayı aktarmaktan kaçınmasını söyler, küçük, gereksiz dosyaları aktarmamaya yardımcı olabilir. \fIBOYUT\fR açıklaması ve diğer bilgiler için bkz: \fB--max-size\fR seçeneği.
.sp
3.1.0 öncesi \fBrsync\fR sürümlerinde \fB--max-size=0\fR belirtilemezdi.
.sp
.TP 4
\fB--max-alloc\fR=\fIBOYUT\fR
Öntanımlı olarak \fBrsync\fR, malloc/realloc’u ayrırma başına boyut olarak yaklaşık 1 GB ile sınırlar. Çoğu durumda bu sınır gayet iyi çalışır ve \fBrsync\fR’in çok büyük miktarda bellek talep etmesine neden olan bir protokol hatasını önler. Ancak, bir aktarımda milyonlarca dosya, büyük miktarda sunucu belleği varsa ve aktarım birden çok parçaya bölünmek istenmiyorsa, ayırma başına sınır daha büyük bir değere yükseltilebilir ve böylece \fBrsync\fR daha fazla bellek tüketir.
.sp
Bunun, ayrılan belleğin toplam boyutu için bir sınır olmadığını unutmayın. Her ayrı tahsis için tutarlılık değeridir.
.sp
\fIBOYUT\fR \fB--max-size\fR seçeneğinde açıklanan bir sonekle belirtilebilmektedir. Bir sonek belirtilmezse birim olarak bayt öntanımlıdır.
.sp
3.2.3 sürümü itibariyle 0 değeri sınır olmadığını belirtmektedir.
.sp
Bu seçenek tarafından desteklenen \fIBOYUT\fR değerlerini kullanarak \fBRSYNC_MAX_ALLOC\fR ortam değişkenine öntanımlı bir değer atayabilirsiniz. Uzak \fBrsync\fR \fB--max-alloc\fR seçeneğini anlamıyorsa, \fB--max-alloc=1g\fR belirterek ortam değişkenindeki değeri geçersiz kılabilirsiniz; "1G" öntanımlı değer olduğundan \fBrsync\fR seçeneği uzak tarafa göndermeyecektir.
.sp
.TP 4
\fB-B\fR, \fB--block-size\fR=\fIBOYUT\fR
Delta aktarım algoritmasında sabit bir blok boyunun kullanımına zorlar. Normalde, bu değer güncellenen her dosya için ayrı ayrı seçilir. Daha ayrıntılı bilgi için teknik rapora bakınız.
.sp
3.2.3 sürümü itibariyle, \fIBOYUT\fR \fB--max-size\fR seçeneğinde açıklanan bir sonekle belirtilebilmektedir. Daha eski sürümler \fIBOYUT\fR olarak sadece bayt sayısı kabul ederdi.
.sp
.TP 4
\fB-e\fR, \fB--rsh\fR=\fIKOMUT\fR
Bu seçenek yerel ve uzak \fBrsync\fR kopyaların arasında iletişim için başka bir uzak kabuk uygulaması belirleyebilmeyi sağlar. Genelde, \fBrsync\fR öntanımlı olarak \fBssh\fR(1) kullanacak şekilde yapılandırılır, fakat yerel ağda \fBrsh\fR(1) kullanımı da tercih edilebilir.
.sp
Bu seçenek [kullanıcı@]konak::modül/yol bağımsız değişkeni ile birlikte kullanılırsa, uzak makinedeki \fBrsync\fR sunucusunu çalıştırmak için belirtilen uzak kabuk \fIKOMUT\fR’u kullanılacak ve aktarım için uzak makinede çalışan \fBrsync\fR sunucusunun soket bağlantısı değil, uzak kabuk bağlantısı kullanılacaktır. Ayrıca, bkz: \fBRSYNC ARTALAN SÜRECİNE UZAK KABUKTAN BAĞLANMAK\fR
.sp
\fBrsync\fR 3.2.0 ve sonrasında, uzak kabuk bağlantısı aracılığıyla artalan sürecine bağlanılırsa \fBRSYNC_PORT\fR ortam değişkeni etkinleştirilir. Öntanımlı artalan süreci portu kullanılacaksa değişkene 0 atanır. Ya da \fIrsync://URL\fR ile veya \fB--port\fR seçeneği ile belirtilen \fBrsync\fR portunun değeri atanır. Bu, betiğin öntanımlı olmayan bir port istenip istenmediğini ayırt etmesine ve \fBssl\fR veya \fBstunnel\fR yardımcı betiğinin öntanımlı porta veya başka bir porta bağlanmasını sağlar.
.sp
\fIKOMUT\fR’un \fBrsync\fR’e tek bir bağımsız değişken olarak sunulması koşuluyla, \fIKOMUT\fR içinde komut satırı bağımsız değişkenleri kullanımına izin verilir. Komutu ve bağımsız değişkenleri birbirinden ayırmak için boşluk (sekme veya diğer boşluk karakterlerini değil) kullanılmalıdır. Bir bağımsız değişkendeki boşlukları korumak için ise tek ve/veya çift tırnak kullanılabilir (ancak ters eğik çizgileri değil). Tek tırnaklı bir dizge içinde çifte tek tırnak kullanımının tek tırnakla sonuçlandığı, çift tırnak için de benzerinin geçerli olduğunu unutulmamalıdır (ayrıca, kabuğun ve \fBrsync\fR’in hangi tırnakları çözümlediğinin de bilinmesi gerekir). Bazı örnekler:
.sp
.RS 4
.RS 4
.nf
-e ’ssh -p 2234’
-e ’ssh -o "VekilKomutu nohup ssh firewall nc -w1 %h %p"’
.fi
.sp
.RE
.RE
.IP
(ssh kullanıcıları konağa özgü bağlantı seçeneklerini kendi \fI.ssh/config \fR dosyalarında belirtebilir.)
.sp
Ayrıca, uzak kabuk uygulaması \fB-e\fR seçeneğindeki gibi değer kabul eden \fBRSYNC_RSH\fR ortam değişkeni kullanılarak da belirtilebilir.
.sp
Ayrıca, bu seçenekten etkilenen \fB--blocking-io\fR seçeneğine de bakılabilir.
.sp
.TP 4
\fB--rsync-path\fR=\fIUYGULAMA\fR
Uzak makinede başlangıçta çalıştırılacak \fIUYGULAMA\fRyı belirtmek için kullanılır. Çoğunlukla, \fBrsync\fR’in uzak kabuğun öntanımlı yolları dışında bulunduğu durumda kullanılır (\fB--rsync-path=/usr/local/bin/rsync\fR gibi). \fIUYGULAMA\fR kabuk tarafından çalıştırılacağından herhangi bir uygulama, betik ya da bir dizi komut olabilir. Bir dizi komut belirtiyorsanız \fBrsync\fR’in iletişimde kullanacağı standart girdi ve standart çıktının devre dışı kalmamasına dikkat edilmelidir.
.sp
Aşağıdaki örnekte uzak makinede \fB--relative\fR seçeneği ile kullanmak için farklı bir öntanımlı dizin belirtilmektedir:
.sp
.RS 4
.RS 4
.nf
rsync -avR --rsync-path="cd /a/b && rsync" konak:c/d /e/
.fi
.sp
.RE
.RE
.IP
.sp
.TP 4
\fB-M\fR, \fB--remote-option\fR=\fISEÇENEK\fR
Bu seçenek, belli etkilerin aktarımın sadece bir tarafıyla sınırlanmasının istendiği ileri düzey durumlarda kullanılır. Örneğin, \fB--log-file\fR\fI=DOSYA\fR ve \fB--fake-super\fR seçenekleri uzak sisteme aktarılmak istenirse, şöyle belirtilebilir:
.sp
.RS 4
.RS 4
.nf
rsync -av -M --log-file=foo -M --fake-super kaynak/ hedef/
.fi
.sp
.RE
.RE
.IP
Normalde her iki tarafı da etkileyen bir seçeneğin, aktarımın sadece yerel tarafını etkilemesi istenirse uzak tarafa bir red gönderilebilir:
.sp
.RS 4
.RS 4
.nf
rsync -av -x -M --no-x kaynak/ hedef/
.fi
.sp
.RE
.RE
.IP
Bu kullanılırken dikkatli olunmalıdır, çünkü rsync’in soket üzerinden hangi verilerin bekleneceği konusunda farklı bir fikre sahip olmasına neden olacak ve anlaşılmaz bir nedenle başarısız kılacak bir seçeneği açıp kapamak mümkündür.
.sp
Aktarmak istediğiniz her uzak seçenek için ayrı bir \fB-M\fR seçeneği kullanmanız gerektiğini unutmayın. Daha eski rsync sürümlerinde, uzak seçenek bağımsız değişkeni içinde herhangi bir boşluğun varlığı, onun ayrı ayrı uzak bağımsız değişkenlere bölünmesine neden olabilir, ancak günümüz rsync’inde bu durum \fB--old-args\fR kullanımını gerektirir.
.sp
Yerel aktarım açısından, "yerel" taraf gönderici, "uzak" taraf alıcıdır.
.sp
Popt seçenek çözümleme kütüphanesinin bazı sürümlerinde, içinde eşit imi bulunan bir seçeneğin, kısa bir seçenek harfine bitişik olarak kullanılmasını (-M--log-file=/tmp/foo gibi) engelleyen bir yazılım hatası vardır. Kullanılan popt sürümünü etkileyen böyle bir hata varsa, rsync ile birlikte gelen popt sürümü kullanılabilir.
.sp
.TP 4
\fB-C\fR, \fB--cvs-exclude\fR
Sistemler arasında aktarımı istenmeyen geniş bir dosya kümesinin dışlanması için bir kısayol olarak kullanışlıdır. CVS’nin yoksayılacak dosyaları saptamakta kullandığı algoritma kullanılır.
.sp
Dışlama listesi aşağıdakilerle ilklendirilir (bunlar kolay bozulan olarak imlenir - bkz: \fBSÜZME KURALLARI\fR):
.sp
RCS SCCS CVS CVS.adm RCSLOG cvslog.* tags TAGS .make.state .nse_depinfo *~ #* .#* ,* _$* *$ *.old *.bak *.BAK *.orig *.rej .del-* *.a *.olb *.o *.obj *.so *.exe *.Z *.elc *.ln core .svn/ .git/ .hg/ .bzr/
.sp
\fI$HOME/.cvsignore\fR içindeki dosyalarla CVSIGNORE ortam değişkeninde (tüm isimler bir boşlukla ayrılarak belirtilir) listelenen her dosya aralarına boşluk konarak bu listeye eklenir.
.sp
Son olarak, \fI.cvsignore\fR dosyası ile aynı dizindeki dosyalardan \fI.cvsignore\fR dosyasında listelenmiş kalıplarla eşleşen dosyalar yok sayılır. \fBrsync\fR’in süzme ve dışlama uyguladığı dosyaların aksine bu kalıplar boşluklarla ayrılır. Daha fazla bilgi için \fBcvs\fR(1) sayfasına bakınız.
.sp
Bu seçenek \fB--filter\fR kurallarıyla birlikte belirtilirse, \fB-C\fR seçeneğinin komut satırının neresinde olduğuna bakılmaksızın, CVS dışlananları \fB--filter\fR kurallarının sonuna eklenir. Bu, onlara \fB--filter\fR kurallarına göre daha düşük öncelik verir. CVS dışlananlarının \fB--filter\fR kurallarına nasıl ekleneceği belirlenmek istenirse, \fB-C\fR seçeneği, komut satırında değil \fB--filter=:C\fR veya \fB--filter=-C\fR biçeminde \fB--filter\fR seçeneğinin bir uzantısı olarak belirtilebilir (bu, komut satırında belirtilebileceği gibi süzme dosyasına ":C" ve "-C" kuralları yerleştirilerek de belirtilebilir). İlk kural her dizinde \fI.cvsignore\fR dosyalarına bakılmasını, ikinci kural ise yukarıda bahsedilen CVS dışlananlarının bir kereliğine dahil edilmesini sağlar.
.sp
.TP 4
\fB-f\fR, \fB--filter=\fR\fIKURAL\fR
Bu seçenek aktarılacak dosyalar listesinden belli dosyaların seçilerek dışlanması için kurallar eklemenizi mümkün kılar. Bu seçenek alt dizinlerin ardışık aktarıldığı aktarımlarda kullanıldığında çok yararlıdır.
.sp
Dışlanacak dosyaların listesini oluşturmak içim komut satırında çok sayıda \fB--filter\fR seçeneği belirtebilirsiniz. \fIKURAL\fR boşluk karakterleri içeriyorsa, kabuğun kuralı tek bir terim olarak aktarabilmesi için tırnak içine alınması gerekir. Kılavuzun devamında belirtildiği gibi, kuralı bağımsız değişkenleriyle ilişkilendirmek için boşluk yerine alt çizgi konulabilir.
.sp
Bu seçenek hakkında daha ayrıntılı bilgi için bkz: \fBSÜZME KURALLARI\fR
.sp
.TP 4
\fB-F\fR
Bu seçenek iki defa belirtildiğinde komuta iki \fB--filter\fR kuralı eklemeye eşdeğerdir. İlk seçenek şu kuralı ekler:
.sp
.RS 4
.RS 4
.nf
--filter=’: /.rsync-filter’
.fi
.sp
.RE
.RE
.IP
Bu kural, \fBrsync\fR’in dizin hiyerarşisi dahilinde serpiştirilmiş \fI.rsync-filter\fR dosyalarına bakmasını ve aktarımda bu dosyalardaki süzme kurallarını kullanmasını sağlar. \fB-F\fR seçeneği ikinci kez kullanılmışsa şu kuralı uygular:
.sp
.RS 4
.RS 4
.nf
--filter=’- .rsync-filter’
.fi
.sp
.RE
.RE
.IP
Bu kural \fI.rsync-filter\fR dosyalarının kendilerinin aktarımdan dışlanmasını sağlar.
.sp
Bu seçenek hakkında daha ayrıntılı bilgi için bkz: \fBSÜZME KURALLARI\fR
.sp
.TP 4
\fB--exclude\fR=\fIKALIP\fR
Bu seçenek bir dışlama kuralı tanımlanmasını sağlayan \fB--filter\fR seçeneğinin basitleştirilmiş bir biçimidir. Seçenek, normal süzme kurallarının kural çözümleme sözdizimine izin vermez.
.sp
Bu seçenek hakkında daha ayrıntılı bilgi için bkz: \fBSÜZME KURALLARI\fR
.sp
.TP 4
\fB--exclude-from\fR=\fIDOSYA\fR
Bu seçenek, dışlama kurallarının belirtilen dosyadan alınmasını sağlaması dışında \fB--exclude\fR seçeneğinin benzeridir. \fIDOSYA\fR içindeki boş satırlar, ’\fB;\fR’ veya ’\fB#\fR’ ile başlayan satırlar yoksayılır.
.sp
\fIDOSYA\fR olarak \fB-\fR belirtilmişse, liste standart girdiden okunur.
.sp
.TP 4
\fB--include\fR=\fIKALIP\fR
Bu seçenek bir içerme kuralı tanımlanmasını sağlayan \fB--filter\fR seçeneğinin basitleştirilmiş bir biçimidir. Seçenek, normal süzme kurallarının kural çözümleme sözdizimine izin vermez.
.sp
Bu seçenek hakkında daha ayrıntılı bilgi için bkz: \fBSÜZME KURALLARI\fR
.sp
.TP 4
\fB--include-from\fR=\fIDOSYA\fR
Bu seçenek, içerme kurallarının belirtilen dosyadan alınmasını sağlar. \fIDOSYA\fR içindeki boş satırlar, ’\fB;\fR’ veya ’\fB#\fR’ ile başlayan satırlar yoksayılır.
.sp
\fIDOSYA\fR olarak \fB-\fR belirtilmişse, liste standart girdiden okunur.
.sp
.TP 4
\fB--files-from\fR=\fIDOSYA\fR
Bu seçeneği kullanarak aktarılacak dosyaların tam listesi belirtilebilir. Liste \fIDOSYA\fRdan ya da "-" belirtilmişse standart girdiden okunur. Ayrıca, bu seçenekle birlikte öntanımlı uygulanan seçeneklere bağlı olarak \fBrsync\fR’in öntanımlı davranışı kolayca değiştirilebilir:
.sp
.PD 1
.RS 5
.IP \(ci 3
\fB--relative\fR (\fB-R\fR) seçeneği uygulanarak \fIDOSYA\fR içindeki her öğede belirtilen yol bilgisi korunmuştur (bu davranışı kapatmak için \fB--no-relative\fR veya \fB--no-R\fR seçeneği kullanılmalıdır).
.IP \(ci 3
\fB--dirs\fR (\fB-d\fR) seçeneği uygulanarak listede belirtilen dizinlerin atlanmayıp, hedefte oluşturulması sağlanmıştır (bu davranışı kapatmak için \fB--no-dirs\fR veya \fB--no-d\fR seçeneği kullanılmalıdır).
.IP \(ci 3
\fB--archive\fR (\fB-a\fR) seçeneği uygulanmasına rağmen bu seçeneğin uygulamalarından biri olan \fB--recursive\fR (\fB-r\fR) seçeneği uygulanmadığından, bu davranışın uygulanması istenirse \fB--recursive\fR (\fB-r\fR) seçeneğinin ayrıca belirtilmesi gerekir.
.IP \(ci 3
Yan etkiler \fBrsync\fR’in öntanımlı durumunu değiştirir. Bu nedenle komut satırındaki \fB--files-from\fR seçeneğinin konumunun diğer seçeneklerin çözümlenişiyle hiçbir ilgisi yoktur (örneğin, \fB-a\fR seçeneği, \fB--files-from\fR seçeneğinin öncesinde de sonrasında da aynı biçimde çalışır).
.sp
.RE
.IP
.PD 0
\fIDOSYA\fR’dan okunan dosya isimlerinin hepsi kaynak dizine göre değerlendirilir; öğelerin başındaki "\fB/\fR"lar ile daha üst dizinlere çıkılmasını sağlayan "\fB../\fR"lar kaldırılır. Örnek:
.sp
.RS 4
.RS 4
.nf
rsync -a --files-from=/tmp/foo /usr uzak:/yedek
.fi
.sp
.RE
.RE
.IP
\fI/tmp/foo\fR içinde "\fIbin\fR" (hatta "\fI/bin\fR") diye bir girdi varsa, \fI/usr/bin\fR dizini hedefte \fI/yedek/bin\fR dizini olarak oluşturulur. Dizin "\fIbin/\fR" olarak içeriliyorsa (sondaki \fB/\fR’a dikkat), 2.6.4 ve üstü sürümlerde \fI/usr/bin\fR dizinindeki dosyalar da aktarılır. Her iki durumda da \fB-r\fR (ardışıklık) seçeneği belirtilmişse dizinin tüm hiyerarşisi aktarılır (\fB-a\fR seçeneği tarafından uygulanmadığından \fB-r\fR seçeneğinin açıkça \fB--files-from\fR seçeneği ile birlikte belirtilmesi gerektiği unutulmamalıdır). Ayrıca \fB-r\fR seçeneğinin etkisinin (öntanımlı olarak etkindir) yalnızca dosyadan okunan yol bilgisini yinelemek olduğu da unutulmamalıdır - ancak, kaynak için belirtilmiş yolun yinelenmesine zorlamaz (örnekte \fI/usr\fR)
.sp
Ek olarak, eğer \fIDOSYA\fR’yı "\fIuzak:\fR" öneki ile belirtirseniz, bu dosya yerel konaktan değil, uzak konaktan okunur (konak eşleştirmesi aktarımın sonunda yapılır). Bir kısaltma olarak, "aktarımın yapıldığı uzak konak" anlamında sadece ":" önekini de kullanabilirsiniz. Örnek:
.sp
.RS 4
.RS 4
.nf
rsync -a --files-from=:/yol/dosya-listesi uzak:/ /tmp/kopya
.fi
.sp
.RE
.RE
.IP
Bu komut "\fIuzak\fR" makinesindeki \fI/yol/dosya-listesi\fR dosyasında listelenmiş dosyaları kopyalayacaktır.
.sp
\fB--iconv\fR ve \fB--protect-args\fR seçenekleri belirtilmişse ve \fB--files-from\fR seçeneği dosyaları bir konaktan diğerine gönderiyorsa aktarılan dosyaların karakter kümesi, gönderen konağın karakter kümesinden alıcı konağın karakter kümesine dönüştürülür.
.sp
.RS 4
.TP 4
\fBBilgi:\fR
\fB--files-from\fR girdisindeki dosya listesini sıralamak, bitişik girdiler arasında paylaşılan yol öğelerinin yeniden ziyaretinden kaçınılacağından \fBrsync\fR’in daha verimli olmasına yardımcı olur. Giriş sıralanmazsa, bazı yol öğeleri (örtük dizinler) birden çok kez taranabilir ve \fBrsync\fR, bunları eninde sonunda dosya listesi öğelerine dönüştürerek tekilleştirir.
.sp
.RE
.IP
.sp
.TP 4
\fB-0\fR, \fB--from0\fR
Bu seçenek \fBrsync\fR’e, bir dosyadan okunan dosya isimlerinin sonlandırılmasının satır sonu karakteri (LF) veya satır başı karakteri (CR) ya da her bu ikisinin birlikte kullanılmasıyla (CR+LF) değil sadece boş karakterle (’\\0’) yapıldığını belirtir. Bu seçenek \fB--exclude-from\fR, \fB--include-from\fR, \fB--files-from\fR ve \fB--filter\fR kuralı ile belirtilen dosyaları etkiler. Dosya isimlerinin boşluk ile ayrıldığı \fI.cvsignore\fR dosyalarını kullanan \fB--cvs-exclude\fR seçeneğini etkilemez.
.sp
.TP 4
\fB--old-args\fR
\fBrsync\fR’e uzak taraftaki bağımsız değişken değerlerini istenmeyen sözcük ayrıştırmasından veya diğer yanlış yorumlamalardan korumaya çalışmayı bırakmasını söyler.
.sp
Günümüz \fBrsync\fR’inde öntanımlı olan, uzak kabuğa gönderilen bağımsız değişkenlerde kabuğun özel karakterlerinin (boşluklar dahil) ters eğik çizgi ile öncelenmesidir. \fB*, ?, [, ]\fR joker karakterleri , \fB--usermap\fR gibi seçenek bağımsız değişkenlerinde öncelenirken dosya adı bağımsız değişkenlerinde öncelenmez (birden çok dosya adına genişlemeleri sağlanır).
.sp
Dosya adlarında eski tarz sözcük ayrıştırması bir betikle yapılıyorsa, bu seçenek bir kez belirtilir. Uzak kabukta ters eğik çizgi öncelemesi sorunluysa, iki kez belirtilir.
.sp
Bu seçenek yerine \fBRSYNC_OLD_ARGS\fR ortam değişkeni de kullanılabilir. Ortam değişkenin değeri "1" ise \fBrsync\fR öntanımlı olarak tek seçenekli, "2" veya daha büyük ise, \fBrsync\fR öntanımlı olarak yinelenen seçenek durumuna geçer. "0" ise, öntanımlı önceleme davranışı elde edilir. Ortam değişkeninin değeri, komut satırından belirtilen olumlu veya olumsuz seçenekler tarafından geçersiz kılınabilir (\fB--no-old-args\fR olumsuz seçenektir).
.sp
Bu seçenek \fB--protect-args\fR seçeneğiyle birlikte kullanılamaz.
.sp
.TP 4
\fB-s\fR, \fB--protect-args\fR
Bu seçenek, tüm dosya adlarını ve çoğu seçeneği \fBrsync\fR’e uzak kabukta yorumlamamak üzere gönderir. Joker karakterler, uzak konakta kabuk yerine \fBrsync\fR tarafından genişletilir.
.sp
Bu, 3.2.4’te eklenen, bağımsız değişkenlerin yeni tarz ters eğik çizgi öncelemesine benzer, ancak bazı ek özellikler de desteklenir ve işlem, uzak kabuktaki ters eğik çizgi öncelemesine bırakılmaz.
.sp
Bu seçenek \fB--iconv\fR ile birlikte kullanıldığında, uzak taraftaki ilgili bağımsız değişkenlerin karaktar kümesi yerelinkinden uzağınkine dönüştürülür. Bu dönüşüm joker karakterler genişletilmeden önce yapılır. Ayrıca bkz: \fB--files-from\fR.
.sp
Bu seçenek yerine \fBRSYNC_PROTECT_ARGS\fR ortam değişkeni de kullanılabilir. Sıfırdan farklı bir değer atanırsa işlem öntanımlı olarak etkin olur, aksi takdirde öntanımlı olarak etkin olmaz. Ortam değişkeninin değeri, komut satırından belirtilen olumlu veya olumsuz seçenekler tarafından geçersiz kılınabilir (\fB--no-s\fR ve \fB--no-protect-args\fR olumsuz seçeneklerdir). Bu ortam değişkeni ayrıca sıfırdan farklı bir değerle atanmış \fBRSYNC_OLD_ARGS\fR ortam değişkeni tarafından da geçersiz kılınabilir.
.sp
3.0.0 öncesi bir \fBrsync\fR ile etkileşirken bu seçeneği iptal etmeniz gerekebilir.
.sp
Bu seçenek \fB--old-args\fR seçeneği ile birlikte kullanılamaz.
.sp
Bu seçeneğin, seçenekleri betiğin incelemesinden gizleyen kısıtlı \fBrsync\fR betiğinin (\fBrrsync\fR) kullanımıyla uyumlu olmadığını unutulmamalıdır.
.sp
.TP 4
\fB--copy-as\fR=\fIKULLANICI\fR[:\fIGRUP\fR]
Bu seçenek, kopyalama işlemleri için \fBrsync\fR’e \fIKULLANICI\fR’yı ve (iki nokta üst üste belirtilmişse) \fIGRUP\fR’u kullanmasını söyler. Bu, yalnızca \fBrsync\fR’i çalıştıran kullanıcının kullanıcıları değiştirme yeteneği varsa çalışır. \fIGRUP\fR belirtilmemişse, kullanıcının öntanımlı grubu kullanılır.
.sp
Bu seçenek, sistem dosyalarının root yetkileriyle okunup yazılmadığından emin olunmak istenmesi durumunda ve \fBrsync\fR’in, üzerinde anlık değişiklikler olabilecek bir dizinde root olarak dizin içinden veya dışından çalıştırılma riskini azaltmaya yardımcı olabilir. Seçenek, bazen root seviyesinde konak erişim yetkilerinin kullanımına ihtiyaç duyulan bir ortamda \fBrsync\fR’i belirtilen kullanıcı olarak çalıştırabilmeyi mümkün kılar. Böylece, uzak kabuk veya artalan süreci bağlantısından sonra kopyalama aşaması için \fBrsync\fR’in root yetkilerini belirtilen kullanıcya terketmesi sağlanabilir.
.sp
Seçenek, aktarım yerelken iki tarafıda etkilerken yerel olmadığı durumda yalnızca yerel tarafı etkiler. Uzak tarafı etkilemek için \fB--remote-option\fR kullanılır. Yerel aktarım için, aktarımın uzak tarafını etkileyen seçenekleri belirtmek için "localhost:" veya "lh:" konak belirtiminin kullanımına olanak sağlayan (\fBrsync\fR paketinin \fIsupport\fR dizinindeki) \fBlsh\fR (veya \fBlsh.sh\fR) destek betiği kullanılabilir.
.sp
Örneğin, aşağıdaki komut root aidiyetinde çalıştırılmakta fakat yerel dosyaları "veli" kullanıcısı yazmaktadır:
.sp
.RS 4
.RS 4
.nf
sudo rsync -aiv --copy-as=veli konak1:backups/veli/ /home/veli/
.fi
.sp
.RE
.RE
.IP
Bu, tüm dosyaların sahibini ve grubunu "veli" yapar ve veli kullanıcısının değişiklik yapma yetkisinin olmadığı bir dosyada değişiklik başlatmak için zamanlı saldırı yapmasını imkansız hale getirir.
.sp
Aşağıdaki root aidiyetinde çalıştırılan komutta "veli" kullanıcısı olarak \fIhedef/\fR dizinine yerel kopyalama yapılmaktadır (\fBsupport/lsh\fR betiğinin \fB$PATH\fR dizinlerinde bir yere kopyalanmış olduğu varsayılmaktadır):
.sp
.RS 4
.RS 4
.nf
sudo rsync -aive lsh -M--copy-as=veli kaynak/ lh:hedef/
.fi
.sp
.RE
.RE
.IP
.sp
.TP 4
\fB-T\fR, \fB--temp-dir\fR=\fIDİZİN\fR
Bu seçenek, aktarılan dosyaların alıcı tarafta geçici kopyaları oluşturulurken \fIDİZİN\fR’in çalışma dizini olarak kullanmasını sağlar. Öntanımlı davranış, her geçici dosyayı ilişkili hedef dosyanın bulunduğu dizinde oluşturmaktır. \fBrsync\fR 3.1.1 ve sonrasında, belirtilen \fIDİZİN\fR içindeki geçici dosya adlarının önüne fazladan bir nokta eklenmez (yine de bunlara rastgele bir sonek eklenir).
.sp
Bu seçenek çoğunlukla, alıcı disk bölümünde aktarımdaki en büyük dosyanın bir kopyasını tutacak kadar yer olmadığında kullanılır. Bu durumda (yani, göndericinin dizini farklı bir disk bölümünde olduğunda), \fBrsync\fR alınan her geçici dosyayı adını değiştirerek ilişkili hedef dosyanın üstüne yazamaz, geçici dosya yapmadan dosyayı yerine kopyalaması gerekir. Bu durumda, hedef dosya, kopyalama sırasında kırpılan verileri de içerir. Bu şekilde yapılmasaydı (hedef dosya önce silinse, veriler hedef dizindeki geçici bir dosyaya yerel olarak kopyalanıp sonra bu dosya silinenin yerine aktarılsaydı) eski dosya diskte yer kaplamaya devam eder (birisi zaten açmışsa) ve bu nedenle aynı anda diskte yeni sürümü sığdırmak için yeterli yer olmayabilirdi.
.sp
Bu seçenek disk alanı yetersizliği dışında bir nedenle kullanılıyorsa, \fB--delay-updates\fR seçeneğiyle birlikte kullanmak iyi olabilir; bu, kopyalanan tüm dosyaların hedef hiyerarşisindeki alt dizinlere yerleştirilmesini ve aktarımın bitmesinin beklenmesini sağlayacaktır. Hedef bölüme gelen tüm dosyaların kopyalarını yapmak için yeterli alanınız yoksa, \fBrsync\fR’e disk alanı hakkında fazlaca endişe duyulmadığını söylemenin başka bir yolu, göreli bir yol belirten \fB--partial-dir\fR seçeneğini kullanmaktır; Bu, \fBrsync\fR’e hedef hiyerarşideki bir alt dizinin, tek bir dosya kopyasını saklamak için uygun olduğunu söylediğinden, \fBrsync\fR, belirtilen dizini kopyalanan dosyayı getirmek için bir hazırlama alanı olarak kullanacak ve ardından onu yeniden adlandırarak yerine yazacaktır. (\fB--partial-dir\fR seçeneğine mutlak bir yol belirtmenin böyle bir yan etkisi yoktur.)
.sp
.TP 4
\fB-y\fR, \fB--fuzzy\fR
Bu seçenekle, hedefte bulunmayan her dosya için benzer bir dosya aranacağı belirtilir. Şimdiki algoritma, hedef dosya için aynı dizinde, aynı boyda ve aynı değişiklik zamanlı ya da aynı isimli bir dosya arar. Böyle bir dosya varsa, bu dosya bulanık bir hedef dosya olarak aktarımın hızlandırılması amacıyla kullanılır.
.sp
Seçenek tekrarlanırsa, bulanık tarama, \fB--compare-dest\fR, \fB--copy-dest\fR veya \fB--link-dest\fR seçenekleriyle belirtilenlerle eşleşen diğer hedef dizinlerde de yapılır.
.sp
.RS 4
.TP 4
\fBBilgi:\fR
\fB--delete\fR seçeneği bu amaçla kullanılabilecek bir dosyanın işlem öncesinde silinmesine yol açabileceğinden, dosyanın silinmemesi için, bu seçenek yerine ya \fB--delete-after\fR seçeneği kullanılmalı ya da uygun bir dışlama kuralı belirtilmelidir.
.sp
.RE
.IP
.sp
.TP 4
\fB--compare-dest\fR=\fIDİZİN\fR
Bu seçenekle, alıcı makinede hedef dizinde olmayan dosyalar için karşılaştırmanın \fIDİZİN\fRe göre yapılacağı belirtilir. Eğer \fIDİZİN\fR içinde göndericideki dosyanın aynısı varsa bu dosya aktarılmaz. Bu, sadece bir önceki yedeklemeden beri değişmiş dosyaların yedeklenmesi için kullanışlıdır. Bu seçenek genellikle dosyaları boş (veya yeni oluşturulan) bir dizine kopyalamak için kullanılır.
.sp
\fBrsync\fR 2.6.4 ve sonrasında, çok sayıda \fB--compare-dest\fR dizini belirtilebilmektedir. Sadece öznitelikleri uyuşmayan bir dosya bulunursa, yerel bir kopya yapılıp öznitelikleri güncellenir. Eğer bir eşleşme bulunamazsa, işlemi hızlandırmak için bu \fIDİZİN\fRlerin birinden temel bir dosya seçilir.
.sp
Eğer \fIDİZİN\fR göreli belirtilmişse hedef dizine göreli olduğu kabul edilir. Ayrıca bkz: \fB--link-dest\fR ve \fB--copy-dest\fR
.sp
.RS 4
.TP 4
\fBBilgi:\fR
3.1.0 ve üstü sürümlerde, belirtilen diğer \fB--compare-dest\fR \fIDİZİN\fRlerde tam bir eşleşme bulunması durumunda boş olmayan hedef dizinlerden (nihai sonucun yeni bir kopyayla daha iyi eşleşmesini sağlamak için) bir dosya silinir.
.sp
.RE
.IP
.sp
.TP 4
\fB--copy-dest\fR=\fIDİZİN\fR
Bu seçenek \fB--compare-dest\fR gibi davranır, ancak \fBrsync\fR ayrıca \fIDİZİN\fR’de bulunan değişmemiş dosyaları yerel bir kopya kullanarak hedef dizine kopyalar. Bu, mevcut dosyaları olduğu gibi bırakırken yeni bir hedefe aktarım yapmak ve ardından tüm dosyalar başarıyla aktarıldığında hızlıca bir geçiş yapmak için kullanışlıdır.
.sp
Çok sayıda \fB--copy-dest\fR \fIDİZİN\fRi belirtilebilir, bu da \fBrsync\fR’in değişmemiş bir dosyayı listede belirtilen sırada aramasına neden olur. Bir eşleşme bulunamazsa, aktarımı hızlandırmak için \fIDİZİN\fR’lerden birinden temel bir dosya seçilir.
.sp
\fIDİZİN\fR göreli bir yol belirtiyorsa hedef dizine görelidir. Ayrıca bkz \fB--compare-dest\fR ve \fB--link-dest\fR.
.sp
.TP 4
\fB--link-dest\fR=\fIDİZİN\fR
Bu seçenek, \fIDİZİN\fR içindeki değişmemiş dosyaların hedef dizine sabit bağlı yapılması dışında \fB--compare-dest\fR seçeneği gibi davranır. Sabit bağlı yapılacak dosyalar öznitelikleri (izinler, sahipler, v.s) bakımından kaynaktakilerle tamamen aynı olmalıdır. Örnek:
.sp
.RS 4
.RS 4
.nf
rsync -av --link-dest=$PWD/öndizin konak:kaynak/ yeni/
.fi
.sp
.RE
.RE
.IP
Dosyalar bağlanmıyorsa, özniteliklerine en az iki kez bakılmalıdır. Ayrıca bazı özniteliklerin rsync’in denetimi dışında zorlanıp zorlanmadığına da bakılmalıdır, örneğin kök dizini tek bir kullanıcıya zorlayan veya çıkarılabilir bir sürücü soysal sahiplikle bağlayan bir mount seçeneği (OS X’in "Bu birimde sahipliği yoksay" seçeneği gibi).
.sp
2.6.4 sürümünden başlayarak, çok sayıda \fB--link-dest\fR dizini belirtilebilmektedir. Bu da rsync’in tam eşleşme için listeyi belirtilen sırayla aramasına neden olur (bu türde 20 dizinlik sınır vardır). Yalnızca niteliklerde farklılık gösteren bir eşleşme bulunursa, yerel bir kopya yapılır ve nitelikler güncellenir. Bir eşleşme bulunamazsa, aktarımı hızlandırmak için \fIDİZİN\fR’lerin birinden temel bir dosya seçilecektir.
.sp
Bu seçenek en çok boş bir hedef hiyerarşisine kopyalama yaparken işe yarar, çünkü mevcut dosyaların öznitelikleri değiştirilebilir ve bu da diğer hedef dosyaları sabit bağlar yoluyla etkileyebilir. Ayrıca, değişikliklerin ayrıntılandırılması biraz karışık olabilir. 3.1.0 sürümünden önce, bir hedef dosya zaten mevcut olduğunda, başka bir dizinle tam bir eşleşmenin asla sağlanamayacağı (veya hedefe bağ oluşturulamayacağı) unutulmamalıdır.
.sp
.RS 4
.TP 4
\fBBilgi:\fR
Bu seçenek --ignore-times ile birlikte kullanılırsa, rsync hiçbir dosyayı birbirine bağlamayacaktır, çünkü dosyanın aktarılması için yedek olarak sadece eş dosyalar birbirine bağlanır, dosya güncellendikten sonra asla ek bir denetim yapılmaz.
.sp
.RE
.IP
\fIDİZİN\fR göreli bir yol belirtiyorsa hedef dizine görelidir. Ayrıca bkz: \fB--compare-dest\fR ve \fB--copy-dest\fR.
.sp
2.6.1 sürümünden önceki sürümlerde, \fB-o\fR seçeneği (\fB-a\fR seçeneği de bu seçeneği uygular) belirtilmişse, \fB--link-dest\fR seçeneği root olmayan bir kullanıcı için istendiği gibi çalışmayacaktır (yazılım hatası). Bu hatadan korunmak için böyle bir \fBrsync\fR ile gönderimde \fB-o\fR seçeneği kullanılmamalıdır.
.sp
.TP 4
\fB-z\fR, \fB--compress\fR
Bu seçenekle gönderilen dosyaların verileri, aktarım miktarını azaltmak için sıkıştırılır. Özellikle, yavaş bağlantılar için çok yararlıdır.
.sp
Rsync çok sayıda sıkıştırma yöntemini desteklemektedir, \fB--compress-choice\fR (\fB--zc\fR) seçeneği ile zorlanmadıkça birini otomatik olarak seçecektir.
.sp
Derleme sırasında seçilmiş sıkıştırma algoritmalarının listesi \fBrsync --version\fR komutu ile görüntülenebilir.
.sp
Aktarım sırasında her iki tarafta da 3.2.0 veya üstü bir sürüm kullanılıyorsa, istemcinin ve sunucunun algoritma listesinden ilk algoritmaları ayrı ayrı seçer. Ortak bir sıkıştırma algoritması bulunamazsa \fBrsync\fR hata vererek çıkar. Uzak \fBrsync\fR sağlama toplamı uzlaşımını desteklemek için çok eski ise listesinde "zlib" bulunduğu varsayılır.
.sp
Öntanımlı sıra, \fBRSYNC_COMPRESS_LIST\fR ortam değişkenine kabul edilebilir algoritma isimleri boşluk ayraçlı sıralanarak özelleştirilebilir. Algortima isimleri & içeriyorsa "istemci dizgesi & sunucu dizgesi" biçeminde oluşturulduğu varsayılır, aksi takdirde aynı dizge her iki tarafa da uygulanır. Dizge (veya bir kısmı) boşluk olmayan karakterler içermiyorsa öntanımlı sıkıştırma listesi kullanılır. Listedeki bilinmeyen algoritma isimleri iptal edilir, ancak liste tamamen geçersiz isimlerden oluşuyorsa uzlaşım başarısız olur.
.sp
Bazı eski \fBrsync\fR sürümleri öntanımlı zlib sıkıştırma yöntemi ile uyumsuz olduklarında \fB-zz\fR seçeneğinin kullanımı gerektirecek şekilde yapılandırıldıklarından \fB-z\fR seçeneğinin kullanımını reddeder. \fBrsync\fR sunucusu, açıkça \fB-zz\fR belirtilmesi gerektiği konusunda uyarmadıkça bu tuhaflık yok sayılabilir.
.sp
.TP 4
\fB-zc\fR, \fB--compress-choice\fR=\fIDİZGE\fR
Bu seçenek, \fB--compress\fR kullanıldığında yapılan otomatik sıkıştırma algoritması uzlaşımını geçersiz kılmak için kullanılabilir. Örtük olarak \fB--no-compress\fR uygulanmasını sağlayan "none" belirtilmedikçe bu seçenek örtük olarak \fB--compress\fR seçeneğinin uygulanmasını sağlar.
.sp
Kullanılabilen sıkıştırma seçenekleri:
.sp
.RS 4
.RS 4
.nf
zstd
lz4
zlibx
zlib
none
.fi
.sp
.RE
.RE
.IP
Derleme sırasında seçilmiş sıkıştırma algoritmalarının listesi \fBrsync --version\fR komutu ile görüntülenebilir (yukarıdaki listeden farklı olabilir).
.sp
\fB--old-compress\fR veya \fB--new-compress\fR seçeneği hakkında bir hata görürseniz, daha fazla \fBrsync\fR sürümünün tanıdığı \fB--compress-choice=zlib\fR veya \fB--compress-choice=zlibx\fR seçeneği geriye uyumluluk adına gönderilmeye çalışılıyor demektir. Bu hata, sunucudaki eski \fBrsync\fR sürümünün sıkıştırma türünü zorlamanıza izin vermeyeceğini gösterir.
.sp
"zlibx" sıkıştırma algoritmasının, (harici bir zlib gerçeklenimiyle uyumlu hale gelebilmesi için) eşleşen verilerin sıkıştırma akımına dahil edilmediği bir "zlib" algoritması oluşuna dikkat edilmelidir.
.sp
.TP 4
\fB-zl\fR, \fB--compress-level\fR=\fISAYI\fR
Öntanımlı sıkıştırma seviyesi yerine kullanılacak sıkıştırma seviyesini (bkz: \fB--compress\fR, \fB-z\fR) doğrudan tanımlamak için kullanılır. \fB--compress\fR seçeneği, geçerli olan sıkıştırma algoritması için "sıkıştırma yapılmayan" seviye seçilmediği sürece örtük olarak uygulanır (örneğin, zlib sıkıştırması, 0. seviyeyi "sıkıştırma yapılmayan" seviye olarak değerlendirir).
.sp
Seviye değerleri etkin olan sağlama toplamına bağlı olarak değişiklik gösterir. Çünkü \fBrsync\fR öntanımlı olarak bir sağlama toplamı seçiminde (uzak \fBrsync\fR yeterince yeni bir sürümse) uzlaşım arayacaktır. Geçerli seçimden emin olunamıyorsa, bu seçeneği bir \fB--compress-choice\fR (\fB--zc\fR) seçeneğiyle birlikte kullanmak iyi olabilir. Örnek:
.sp
.RS 4
.RS 4
.nf
rsync -aiv --zc=zstd --zl=22 konak:kaynak/ hedef/
.fi
.sp
.RE
.RE
.IP
\fBzlib\fR ve \fBzlibx\fR sıkıştırmaları için geçerli değerler 1’den 9’a kadar olup 6 öntanımlı değerdir. \fB--zl=0\fR belirtilirse sıkıştırma yapılmaz. \fB--zl=-1\fR ile öntanımlı olan 6. seviye sıkıştırma uygulanır.
.sp
\fBzstd\fR sıkıştırması için geçerli değerler -⁠131072’den 22’ye kadar olup 3 öntanımlı değerdir. \fISAYI\fR olarak 0 belitilirse öntanımlı öntanımlı olan 3. seviye sıkıştırma uygulanır.
.sp
\fBlz4\fR sıkıştırması için geçerli bir değer yoktur, dolayısıyla değer daima 0 olur.
.sp
Çok küçük ya da çok büyük bir değer belirtilirse sayı sessizce geçerli değerle sınırlanır. Bu, \fB--zl=999999999\fR gibi bir değer belirtilmeye ve hangi algoritma seçilirse seçilsin azami sıkıştırma seviyesine ulaşmaya olanak tanır.
.sp
Etkin olan sıkıştırma seviyesini sorgulamak ve "uzlaşılan dizge" sonuçlarını görüntülemek için \fB--debug=nstr\fR belirtilebilir. Bu, (etkin sağlama toplamı seçimi ile birlikte) "Client compress: zstd (level 3)" benzeri bir dizge çıktılar.
.sp
.TP 4
\fB--skip-compress\fR=\fILİSTE\fR
.RS 4
.TP 4
\fBBilgi:\fR
Her dosya için ayrı ayrı sıkıştırma değişikliği desteği olan herhangi bir yöntem yoksa bu seçeneğin de herhangi bir etkisi yoktur.
.sp
.RE
.IP
Çok az sıkıştırılabilecek dosya soneklerini içeren \fILİSTE\fRyi geçersiz kılar. \fBrsync\fR, her dosya için sıkıştırma düzeyini dosyanın sonekine göre ayarlar. Sıkıştırma algoritmasının "sıkıştırma yapılmayan" seviyesi varsa, bu dosyalar için sıkıştırma gerçekleşmez. Akım seviyesinde anında seviye değiştirmeyi destekleyen diğer algoritmalar, eşleşen her dosya için işlemci kullanımını mümkün olduğunca azaltmak için seviyeyi en aza indirecektir.
.sp
\fILİSTE\fR eğik çizgilerle (/) ayrılmış birden fazla dosya soneki içerebilir. Hiçbir dosyanın atlanmayacağını belirtmek için değer olarak boş dizge ("") verilebilir.
.sp
Basit karakter sınıfı eşleşmesi desteklenmektedir. Örneğin "[:alpha:]" sınıfından başka birşey belirtilmezse ’-⁠’ karakterinin özel bir anlamı olmaz.
.sp
Yıldız (*) ve soru iminin (?) özel anlamları vardır.
.sp
Aşağıdaki örnekte atlanacak 6 sonek belirtilmektedir (mp[34] iki sonekle eşleşir):
.sp
.RS 4
.RS 4
.nf
--skip-compress=gz/jpg/mp[34]/7z/bz2
.fi
.sp
.RE
.RE
.IP
\fBrsync\fR tarafından bu sürümde desteklenen sıkıştırılmayacak dosyaların öntanımlı sonek listesi:
.sp
3g2 3gp 7z aac ace apk avi bz2 deb dmg ear f4v flac flv gpg gz iso jar jpeg jpg lrz lz lz4 lzma lzo m1a m1v m2a m2ts m2v m4a m4b m4p m4r m4v mka mkv mov mp1 mp2 mp3 mp4 mpa mpeg mpg mpv mts odb odf odg odi odm odp ods odt oga ogg ogm ogv ogx opus otg oth otp ots ott oxt png qt rar rpm rz rzip spx squashfs sxc sxd sxg sxm sxw sz tbz tbz2 tgz tlz ts txz tzo vob war webm webp xz z zip zst
.sp
Bu listenin yerini, biri hariç tüm durumlarda \fILİSTE\fR alacaktır: \fBrsync\fR artalan sürecinden alınan bir kopya, \fILİSTE\fRye eklenir (artalan sürecinin listesi farklı bir öntanımlı liste ile yapılandırılabilir).
.sp
.TP 4
\fB--numeric-ids\fR
Bu seçenekle \fBrsync\fR, her iki uçta kullanıcı ve grup isimlerini değil, kullanıcı ve grup kimliklerini eşleştirmeye çalışacaktır.
.sp
Öntanımlı olarak \fBrsync\fR, dosyaların sahibini belirlemekte kullanıcı ve grup isimlerini kullanır. Özel kullanıcı ve grup kimliği olan 0 kimliği, bu seçenek belirtilmemiş olsa bile, kullanıcı ve grup isimleriyle asla eşleştirilmez.
.sp
Eğer kullanıcı ve grup yerelde herhangi bir isimle eşleşmiyorsa veya hedefte bir eşleşme yoksa, bunların yerine kaynak sistemdeki kullanıcı ve grup kimlikleri kullanılır. \fBchroot\fR ayarlarının \fBrsync\fR’in kullanıcı ve grup isimlerini arama yeteneklerini nasıl etkilediğini ve bunların nasıl değiştirebileceği hakkında bilgi için bkz: \fBrsyncd.conf\fR(5) kılavuz sayfasındaki \fBuse chroot\fR modül seçeneğinin açıklaması.
.sp
.TP 4
\fB--usermap\fR=\fIDİZGE\fR, \fB--groupmap\fR=\fIDİZGE\fR
Bu seçenekler, alıcı tarafın diğer değerlere eşlenmesi gereken kullanıcıları ve grupları belirlemesine olanak tanır. \fIDİZGE\fR, virgülle ayrılmış bir veya daha fazla \fIGÖNDEREN:ALAN\fR değer çiftidir. Göndericiden gelen herhangi bir eşleşen \fIGÖNDEREN\fR değeri, alıcıdan gelen bir \fIALAN\fR değeri ile değiştirilir. \fIGÖNDEREN\fR ve \fIALAN\fR değerleri için kullanıcı adları veya kullanıcı kimlikleri belirtebilirsiniz ve \fIGÖNDEREN\fR değeri, gönderenin adlarıyla eşleştirilecek bir joker karakter dizisi de olabilir (joker karakterler kimlik numaralarıyla eşleşmez, ancak ’*’ iminin neden her şeyle eşleştiğini görmek için aşağıya bakın). Bunun yerine, bir kimlik numarası aralığı belirtebilirsiniz: \fIDÜŞÜK-YÜKSEK\fR. Örnek:
.sp
.RS 4
.RS 4
.nf
--usermap=0-99:nobody,wayne:admin,*:normal --groupmap=usr:1,1:usr
.fi
.sp
.RE
.RE
.IP
Listedeki ilk eşleşme kullanılan eşleşmedir. Tüm kullanıcı eşlemeleri tek bir \fB--usermap\fR seçeneği kullanılarak ve/veya tüm grup eşlemeleri tek bir \fB--groupmap\fR seçeneği kullanılarak belirtilmelidir.
.sp
0 kullanıcısı ve grubu için gönderici adının alıcıya iletilmediğine dikkat edilmelidir, bu nedenle ya 0 kullanarak bu değerleri eşleştirmelisiniz ya da alıcı tarafta geçerli olan adları kullanmalısınız (genelde "root"). Diğer tüm \fIGÖNDEREN\fR adları, gönderen tarafta kullanılanlarla, tüm \fIALAN\fR adları, alıcı tarafta kullanılanlarla eşleşir.
.sp
Gönderen tarafta adı olmayan tüm kimlikler, eşleştirme amacıyla boş ad olarak değerlendirilir. Bu, bir "*" ile veya boş ad kullanılarak eşleştirilmelerine olanak tanır. Örneğin:
.sp
.RS 4
.RS 4
.nf
--usermap=:nobody --groupmap=*:nobody
.fi
.sp
.RE
.RE
.IP
\fB---numeric-ids\fR seçeneği kullanıldığında, gönderici hiçbir ad göndermez, bu durumda tüm kimliklerin boş ada sahip olduğu varsayılır. Adsız kimlikler farklı değerlerle eşleştirilmek istenirse \fIGÖNDEREN\fR olarak bu sayısal kimlikleri belirtmek gerekir.
.sp
\fB--usermap\fR seçeneğinin çalışması için alıcının ayrıcalıklı kullanıcı aidiyetinde çalıştırılması gerekir (bkz: \fB--super\fR ve \fB--fake-super\fR). \fB--groupmap\fR seçeneğinin çalışması için, alıcının grubu atayacak izinlere sahip olması gerekir.
.sp
\fBrsync\fR 3.2.4 ve sonrasında, \fB--usermap\fR seçeneği örtük olarak \fB--owner\fR (\fB-o\fR) seçeneğini uygularken \fB--groupmap\fR seçeneği örtük olarak \fB--group\fR (\fB-g\fR) seçeneğini uygular (rsync eşleşme seçeneklerinin çalışması için bu seçeneklerin etkin olmasını gerektirdiğinden).
.sp
Eski bir \fBrsync\fR’in joker karakterlerden şikayetini önlemek için \fB--protect-args\fR (\fB-s\fR) kullanımı gerekirken günümüz \fBrsync\fR’leri bunu otomatik olarak halleder.
.sp
.TP 4
\fB--chown\fR=\fIKULLANICI:GRUP\fR
Bu seçenek, tüm dosyaları \fIGRUP\fR grubundaki \fIKULLANICI\fR’ya ait olmaya zorlar. Bu, doğrudan --usermap ve --GroupMap kullanmaktan daha basit bir arayüzdür, ancak karıştırılamayacakları için bu seçenekler kullanılarak gerçeklenmiştir. \fIKULLANICI\fR veya \fIGRUP\fR boşsa, atlanan kullanıcı/grup için eşleme olmaz. \fIGRUP\fR boşsa, iki nokta imi atlanabilir, ancak \fIKULLANICI\fR boşsa, iki nokta imi bulunmalıdır.
.sp
"\fB--chown=foo:bar\fR", belirtilirse "\fB--usermap=*:foo --groupmap=*:bar\fR" belirtmekten farkı yoktur, sadece daha kolaydır (ve örtük olarak \fB--owner\fR ve/veya \fB--group\fR seçenekleri ile aynıdır).
.sp
Eski bir \fBrsync\fR’in joker karakterlerden şikayetini önlemek için \fB--protect-args\fR (\fB-s\fR) kullanımı gerekirken günümüz \fBrsync\fR’leri bunu otomatik olarak halleder.
.sp
.TP 4
\fB--timeout\fR=\fISÜRE\fR
Bu seçenekle G/Ç zamanaşımını saniye cinsinden belirtebilirsiniz. Belirtilen süre içinde bir aktarım gerçekleşmezse, \fBrsync\fR işlemi sonlandırır. Öntanımlı değer, bir zamanaşımı olmadığını belirten 0 değeridir.
.sp
.TP 4
\fB--contimeout\fR=\fISÜRE\fR
Bu seçenek, \fBrsync\fR’in \fBrsync\fR artalan süreciyle bağlantısının başarılı olması için kaç saniye bekleyeceğini belirtmek için kullanılır. Belirtilen süre içinde bir bağlantı gerçekleşmezse, \fBrsync\fR işlemi bir hatayla sonlandırır.
.sp
.TP 4
\fB--address\fR=\fIADRES\fR
Öntanımlı olarak \fBrsync\fR, bir \fBrsync\fR artalan sürecine bağlanırken joker adres kullanır. \fB--address\fR seçeneği, bağlanılacak belirli bir IP adresi (veya konak adı) belirtmeye olanak tanır.
.sp
Ayrıca bkz: Artalan süreci için \fB--address\fR seçeneği.
.sp
.TP 4
\fB--port\fR=\fIPORT\fR
Öntanımlı 873. port yerine kullanılacak portu belirtmek için kullanılır. URL sözdizimi port belirtmek için zaten bir yöntem içerdiğinden, bu sadece bir \fBrsync\fR sunucusuna "::" kullanarak bağlanıyorsanız gerekir.
.sp
Ayrıca bkz: Artalan süreci için \fB--port\fR seçeneği.
.sp
.TP 4
\fB--sockopts\fR=\fISEÇENEKLER\fR
Bu seçenek, sistemlerini en üst düzeyde ayarlamayı seven insanlar için sonsuz eğlence sağlayabilir. Aktarımları daha hızlı (veya daha yavaş!) yapabilecek her türlü soket seçeneğini ayarlayabilirsiniz. Ayarlayabileceğiniz bazı seçenekler hakkında ayrıntılar için \fBsetsockopt\fR(2) sistem çağrısının kılavuz sayfasına bakılabilir. Öntanımlı olarak hiçbir özel soket seçeneği ayarlanmamıştır. Bu sadece uzak bir \fBrsync\fR artalan sürecine doğrudan soket bağlantılarını etkiler.
.sp
Ayrıca bkz: Artalan süreci için \fB--sockopts\fR seçeneği.
.sp
.TP 4
\fB--blocking-io\fR
Uzak kabuk aktarımı başlatılırken engellenebilen G/Ç kullanılmasını belirtir. Uzak kabuk \fBrsh\fR veya \fBremsh\fR ise, \fBrsync\fR öntanımlı olarak engellenebilen G/Ç, aksi takdirde engellenemeyen G/Ç kullanır (\fBssh\fR ile engellenemeyen G/Ç tercih edilir).
.sp
.TP 4
\fB--outbuf\fR=\fIKİP\fR
Çıktı tamponlama kipini belirler. \fIKİP\fR None (tamponsuz), Line (satır tamponlu) veya Block (Tam tamponlu) olabilir. Büyük veya küçük tek harfli kip de belirtilebilir.
.sp
Seçeneğin başlıca kullanım amacı, rsync çıktısı bir dosyaya veya boruya yönlendirilirken tam tamponlamadan satır tampolamaya geçmektir.
.sp
.TP 4
\fB-i\fR, \fB--itemize-changes\fR
Her dosyanın öznitelik değişikliklerini de içererek yapılmış değişikliklerin dosyalara göre ayrıntılı bir listesini almak için kullanılır. Bu, \fB--out-format=’%i %n%L’\fR belirtmekle aynıdır. Seçenek tekrarı, 2.6.7 ve üstü sürümlerde değişmeyen dosyaların da ayrıca çıktılanmasını sağlar. 2.6.7 öncesi sürümlerde ise diğer ayrıntı iletilerinin de çıktılanmasını sağlayan \fB-vv\fR kullanılabilir.
.sp
"\fB%i\fR" belirtimi 11 karakter uzunlukta şifresel bir çıktıya sahiptir. Genel biçimi \fIYXcstpoguax\fR dizgesine benzer. Burada \fBY\fR karakteri yapılan güncellemenin çeşidini, \fBX\fR karakteri dosya türünü, diğer karakterler ise güncellenmişlerse öznitelikleri belirten bir karakterle değiştirilir.
.sp
\fBY\fR karakterinin yerini alan güncelleme türleri şunlardır:
.sp
.RS 4
.RS 4
.nf
\fB<\fR uzak konağa aktarılan (gönderilen) dosya
\fB>\fR yerel konağa aktarılan (alınan) dosya
\fBc\fR yerel konakta değiştirilen/oluşturulan dosya (bir dizin ya da sembolik bağın oluşturulması gibi).
\fBh\fR başka bir öğeye sabit bağ olan öğe (\fB--hard-links\fR gerektirir).
\fB.\fR (nokta) güncellenmiş (öznitelikleri değişmiş) dosya
\fB*\fR ayrıntılı çıktı alanının geri kalanı bir ileti içeriyor ("siliniyor" gibi).
.fi
.sp
.RE
.RE
.IP
\fBX\fR karakterinin yerini alan dosya türleri şunlardır:
.sp
.RS 4
.RS 4
.nf
\fBf\fR dosya
\fBd\fR dizin
\fBL\fR sembolik bağ
\fBD\fR aygıt
\fBS\fR özel dosya (isimli soketler ve isimli borular gibi)
.fi
.sp
.RE
.RE
.IP
Dizgenin diğer harfleri dosyanın bazı özniteliklerinin değiştiğini belirtir:
.sp
.RS 4
.RS 4
.nf
"\fB.\fR" Öznitelik değişmedi.
"\fB+\fR" Dosya yeni oluşturuldu.
" " Hiçbir öznitelik değişmedi (tüm noktalar boşluklara dönüşür).
"\fB?\fR" Neyin değiştiği bilinmiyor (uzak rsync eski olduğunda).
harf Bir özniteliğin güncellendiğini belirtir.
.fi
.sp
.RE
.RE
.IP
Harflerin belirttiği öznitelikler şunlardır:
.sp
.RS
.TP 4
\fBc\fR
Sağlama toplamı farklı normal dosya (\fB--checksum\fR gerektirir) veya değeri değişmiş bir sembolik bağ, aygıt veya özel dosya olduğunu belirtir.
.sp
.RS 4
.TP 4
\fBBilgi:\fR
Dosyaların gönderildiği rsync sürümü 3.0.1’den eskiyse sadece sağlama toplamları farklı normal dosyaları belirtir.
.sp
.RE
.IP
.sp
.TP 4
\fBs\fR
Normal dosyanın boyutlarının farklı olduğunu ve dosyanın aktarımla güncelleneceğini belirtir.
.sp
.TP 4
\fBt\fR
Değişiklik zamanının farklı olduğunu ve göndericinin değeri ile güncelleneceğini belirtir (\fB--times\fR gerektirir). Bazan bu karakterin yerine \fBT\fR kullanılır ve zamanın aktarım zamanına ayarlanacağını belirtir. \fBT\fR harfi, bir dosya, sembolik bağ veya aygıt \fB--times\fR seçeneği belirtilmeksizin güncellenirken ya da bir sembolik bağ değiştiğinde alıcı zamanını tanımlamıyorsa çıktılanır.
.sp
.RS 4
.TP 4
\fBBilgi:\fR
rsync sürümü 3.0.0’dan eskiyse, bu zaman belirleme hatası için tek bir t bayrağı yerine t bayrağı T ile birlikte belirtilmiş olabilir.
.sp
.RE
.IP
.sp
.TP 4
\fBp\fR
İzinlerin farklı olduğunu ve göndericinin değeri ile güncelleneceğini belirtir (\fB--perms\fR gerektirir).
.sp
.TP 4
\fBo\fR
Sahiplerin farklı olduğunu ve göndericinin değeri ile güncelleneceğini belirtir (\fB--owner\fR ve ayrıcalıklı kullanıcı yetkileri gerektirir).
.sp
.TP 4
\fBg\fR
Grupların farklı olduğunu ve göndericinin değeri ile güncelleneceğini belirtir (\fB--group\fR ve grup atama yetkileri gerektirir).
.sp
.TP 4
\fBu\fR
Erişim zamanının göndericidekinden farklı bir değere güncellendiğini belirtir (\fB--atimes\fR gerektirir).
.sp
.TP 4
\fBn\fR
Oluşturulma zamanının göndericidekinden farklı bir değere güncellendiğini belirtir (\fB--crtimes\fR gerektirir).
.sp
.TP 4
\fBb\fR
Erişim ve oluşturma zamanlarının ikisinin de güncellendiğini belirtir.
.sp
.TP 4
\fBa\fR
ACL bilgisinin değiştiğini gösterir
.sp
.TP 4
\fBx\fR
Ek öznitelik bilgisinin değiştirğini gösterir.
.sp
.PP
.RE
.IP
Olası diğer bir çıktı daha vardır: Dosyalar silinirken silinen her öğe için "\fB%i\fR" belirteci "*deleting" dizgesini çıktılar (yeterince son sürüm bir \fBrsync\fR ile konuşulduğu ve silme işlemlerini bir ayrıntı olarak çıktılamayıp günlük kaydı tuttuğu varsayımıyla).
.sp
.TP 4
\fB--out-format\fR=\fIBİÇEM\fR
Bu, \fBrsync\fR istemcisinin kullanıcıya her güncellemede tam olarak ne çıktılayacağının tam olarak belirlenmesini sağlar. \fIBİÇEM\fR, yüzde (%) imi ile başlayan tek karakterlik öncelemler içeren bir metin dizgesidir. \fB--info=name\fR veya \fB-v\fR belirtilirse "\fB%n%L\fR" biçemi öntanımlıdır (yalnızca dosyanın adını ve öğenin bir bağ olup olmadığını çıktılar). Olası biçemleme karakterlerinin tam listesi için, \fBrsyncd.conf\fR(5) kılavuz sayfasındaki \fBlog format\fR bağımsız değişkeninin açıklamasına bakılabilir.
.sp
Bu seçeneğinin belirtilmesi, önemli bir şekilde güncellenen (aktarılan bir dosya, yeniden oluşturulmuş bir sembolik bağ/aygıt veya dokunulan bir dizin) her dosya veya dizinden vb. bahsedecek olan \fB--info=name\fR seçeneğinin örtük olarak uygulanmasını sağlar. Ek olarak, değişiklikleri ayrıntılı gösterme öncelemi (\fB%i\fR) dizgeye dahil edilirse (\fB--itemize-changes\fR seçeneği kullanılmış gibi), herhangi bir şekilde değiştirilen öğe adları da günlüğe eklenir (alıcı tarafın sürümü en az 2.6.4 olduğu takdirde). \fB%i\fR çıktısının açıklaması için bkz: \fB--itemize-changes\fR
.sp
Günlüklemenin aktarımın sonunda yapılmasını sağlayan aktarım istatistiği belirtimlerinden biri belirtilmedikçe \fBrsync\fR, günlük biçemi dizgesini dosyanın aktarımından önce çıktılayacaktır. Bu geç günlükleme etkin olduğunda ve ayrıca \fB--progress\fR seçeneği de belirtilmişse \fBrsync\fR aktarılan dosyanın ismini işlem bilgisinden önce (şüphesiz, \fB--log-format\fR çıktısından sonra) çıktılayacaktır.
.sp
.TP 4
\fB--log-file\fR=\fIDOSYA\fR
Bu seçenek, \fBrsync\fR’in yaptıklarını bir dosyaya günlüklemesini sağlar. Bu, artalan sürecinin yaptığı günlük kaydına benzer, ancak artalan süreciyle yapılmayan bir aktarımın istemci ve/veya sunucu tarafı için istenebilir. İstemci seçeneği olarak belirtilirse, aktarım günlüğü "\fB%i %n%L\fR" öntanımlı biçemiyle etkinleştirilir. Bu geçersiz kılınmak istenirse bkz: \fB--log-file-format\fR
.sp
Neler yapıldığını günlüklemesi için uzak tarafa istekte bulunma örneği:
.sp
rsync -av --remote-option=--log-file=/tmp/rlog kaynak/ hedef/
.sp
Bağlantının istem dışı kapanma sebebini incelemek için yaralıdır.
.sp
Ayrıca bkz: Artalan sürecinin \fB--log-file\fR seçeneği.
.sp
.TP 4
\fB--log-file-format\fR=\fIBİÇEM\fR
\fB--log-file\fR seçeneğiyle belirtilen dosyaya güncelleme başına günlük kaydı olarak neler konulacağının belirtilebilmesini sağlar. Bu seçeneğin etkili olabilmesi için \fB--log-file\fR seçeneğinin de ayrıca belirtilmesi gerekir. Boş bir dizge belirtirseniz, günlük dosyasında güncellenen dosyalarla ilgili kayıtlar olmaz. Olası biçemleme karakterlerinin tam listesi için, \fBrsyncd.conf\fR(5) kılavuz sayfasındaki \fBlog format\fR bağımsız değişkeninin açıklamasına bakılabilir.
.sp
\fB--log-file\fR belirtildiği durumda bu seçenekle \fIBİÇEM\fR olarak "\fB%i %n%L\fR" belirtilmedikçe öntanımlı biçem kullanılır.
.sp
Ayrıca bkz: Artalan sürecinin \fB--log-file-format\fR seçeneği.
.sp
.TP 4
\fB--stats\fR
Dosya aktarımıyla ilgili ayrıntılı istatistileri çıktılanmasını ve \fBrsync\fR’in delta-aktarım algoritmasının verileriniz için ne kadar etkili olduğunun anlaşılmasını sağlar. Bu seçenek, \fB-v\fR seçeneği ile birlikte veya değil, \fB--info=stats2\fR’ye; 2 veya daha fazla \fB-v\fR seçeneğiyle birlikte \fB--info=stats3\fR’e eşdeğerdir.
.sp
Geçerli istatistikler:
.sp
.PD 1
.RS 5
.IP \(bu 3
\fBDosya sayısı\fR dizinler, sembolik bağlar, vb. dahil (genel anlamda) "dosya"ların toplam sayısıdır. Toplamı, dosya türleri ve bunların sayıları (sıfır olmadıkça) izler. Örnek: "(reg: 5, dir: 3, link: 2, dev: 1, special: 1)" normal dosyalar, dizinler, sembolik bağlar, aygıt dosyaları, özel dosyalar ve bunların toplamlarını gösterir. Sayısı 0 olanlar listeye dahil edilmez.
.IP \(bu 3
\fBOluşturulan dosya sayısı\fR, yeni oluşturulan (genel anlamda) "dosya"ların (güncellenenler değil) toplam sayısıdır. Toplamı, dosya türleri ve bunların sayıları (sıfır olmadıkça) izler.
.IP \(bu 3
\fBSilinen dosya sayısı\fR, silinen (genel anlamda) "dosya"ların toplam sayısıdır. Toplamı, dosya türleri ve bunların sayıları (sıfır olmadıkça) izler. Bu satır sadece silmeler etkili ise ve yalnızca 31. protokol (\fBrsync\fR 3.1.x için öntanımlıdır) kullanımdaysa çıktılanır.
.IP \(bu 3
\fBAktarılan normal dosyaların sayısı\fR, \fBrsync\fR’in delta aktarım algoritması üzerinden güncellenen normal dosyaların sayısıdır. Dizinler, sembolik bağlar, vb. dahil değildir. Başlığa "regular" sözcüğü \fBrsync\fR 3.1.0’da eklenmiştir.
.IP \(bu 3
\fBAktarımdaki tüm dosyaların toplam boyutu\fR. Toplama dizinler ve özel bağlar dahil edilmez fakat sembolik bağların boyutları dahildir.
.IP \(bu 3
\fBAktarılmış toplam dosya sayısı\fR.
.IP \(bu 3
\fBDeğişmez veriler\fR, güncellenen dosyaların yeniden oluşturması için alıcıya gönderilmiş eşleşmeyen dosya güncelleme verisi miktarıdır.
.IP \(bu 3
\fBEşleşen veriler\fR, güncellenen dosyaları yeniden oluştururken alıcının yerel olarak sahip olduğu veri miktarıdır.
.IP \(bu 3
\fBDosya listesi boyutu\fR, göndericinin alıcıya gönderdiği dosya listesi verilerinin miktarıdır. \fBrsync\fR’in listeyi gönderirken yinelenen verileri bir miktar sıkıştırması nedeniyle dosya listesinin bellekteki boyutundan daha küçüktür.
.IP \(bu 3
\fBDosya listesi üretim süresi\fR, gönderenin dosya listesini oluşturmak için harcadığı saniye sayısıdır. Bu, gönderen tarafta günümüz \fBrsync\fR’lerinden birini gerektirir.
.IP \(bu 3
\fBDosya listesi aktarım süresi\fR, gönderenin dosya listesini alıcıya göndermek için harcadığı saniye sayısıdır.
.IP \(bu 3
\fBGönderilen toplam bayt sayısı\fR, \fBrsync\fR’in istemci tarafının sunucu tarafına gönderildiği tüm baytların sayısıdır.
.IP \(bu 3
\fBAlınan toplam bayt sayısı\fR, \fBrsync\fR’in istemci tarafının sunucu tarafından aldığı iletiler hariç toplam bayt sayısıdır. "iletiler hariç" bayt sayısı, sunucunun bize gönderdiği ayrıntılı iletilerin baytlarını saymadığımız anlamına gelir, bu da istatistiklerin daha tutarlı olmasını sağlar.
.sp
.RE
.IP
.PD 0
.sp
.TP 4
\fB-8\fR, \fB--8-bit-output\fR
Bu, \fBrsync\fR’e, geçerli yerelde geçerli olup olmadıklarını görmek ve geçersiz olanları öncelemek için sınamaya çalışmak yerine, tüm yüksek bitli karakterlerin çıktıda öncelenmeden bırakılmasını sağlar. Bu seçeneğe bakılmaksızın, tüm denetim karakterleri (ancak sekmeler hariç) öncelenir.
.sp
2.6.7 sürümünden itibaren yüksek bitli karakterler ters eğik çizgi (\\) ve diyez (#) iminden sonra 3 sekizlik rakam ile ifade edilmektedir. Örneğin satır sonu karakteri "\\#012" ile ifade edilir. Dosya ismindeki ters eğik çizgi imlerinin ardından bir diyez imi ve 3 sekizlik rakam gelmedikçe ters eğik çizgiler öncelenmez.
.sp
.TP 4
\fB-h\fR, \fB--human-readable\fR
Sayıları insan tarafından okunabilir biçemde çıktılar. Olası 3 düzey vardır:
.sp
.PD 1
.RS 5
.IP 1. 3
Büyük sayılar 3 rakamlık kümeler halinde aralarına (yerele göre) nokta veya virgül konarak ayrıştırılır.
.IP 2. 3
1000’lik birimlerle çıktılama yapılır (sonek olarak tek karakterlik birimlerle -- aşağıya bkz).
.IP 3. 3
1024’lük birimlerle çıktılama yapılır.
.sp
.RE
.IP
.PD 0
Öntanımlı düzey 1’dir. Her \fB-h\fR seçeneği düzeyi 1 arttırır. 0. seviyeyi belirmek için seçeneği \fB--no-human-readable\fR (\fB--no-h\fR) biçiminde kullanmak gerekir (Sayılar sadece rakamlardan oluşur).
.sp
2. ve 3. seviyede eklenen birim harfleri: \fBK\fR (kilo), \fBM\fR (mega), \fBG\fR (giga), \fBT\fR (tera), \fBP\fR (peta). Örneğin, 1234567 baytlık dosya 2. seviyede 1,23M olarak çıktılanırdı (yerelde ondalık kısmın virgül ile ayrıldığı varsayımıyla).
.sp
.RS 4
.TP 4
\fBGeriye uyumluluk bilgisi\fR
3.1.0’dan önceki \fBrsync\fR sürümleri, 1. düzeyi desteklemez ve öntanımlı olarak düzey 0’dır. Bu nedenle, bir veya iki \fB-h\fR seçeneğinin belirtilmesi, öncesinde \fB--no-h\fR seçeneği belirtilmedikçe \fBrsync\fR sürümüne bağlı olarak farklı çıktılar üretilmesine sebep olacaktır. Tek fark için bkz: \fB--list-only\fR
.sp
.RE
.IP
.sp
.TP 4
\fB--partial\fR
Aktarım kesintiye uğramışsa, öntanımlı olarak \fBrsync\fR, aktarımı yarım kalmış dosyayı silecektir. Bazı durumlarda kısmen aktarılmış dosyaları silinmemesi istenebilir. Aktarımın bir sonraki bağlantıda tamamlanmasını hızlandırmak üzere kısmen aktarılmış dosyaların silinmemesi için bu seçeneği kullanabilirsiniz.
.sp
.TP 4
\fB--partial-dir\fR=\fIDİZİN\fR
Bu seçenek, \fB--partial\fR seçeneğinin davranışını değiştirirken aynı zamanda örtük olarak etkinleştirir. Bu gelişmiş kısmi dosya yöntemi, kısmi dosyayı hedef dosyaya yazmak yerine, belirtilen \fIDİZİN\fR’e yerleştirir. Bir sonraki aktarımda, \fBrsync\fR, aktarımın yeniden başlamasını hızlandırmak için bu dizinde bulunan dosyayı veri olarak kullanacak ve amacına hizmet ettikten sonra onu silecektir.
.sp
\fB--whole-file\fR açıkça (veya örtük olarak) belirtilirse, dosya \fBrsync\fR’in delta-aktarım algoritması kullanılmadan gönderildiğinden, \fIDİZİN\fR içindeki güncellenmekte olan dosya ile ilgili kısmi dosyalarının basitçe kaldırılacağı unutulmamalıdır.
.sp
\fBrsync\fR, henüz yoksa, \fIDİZİN\fR’i oluşturacaktır, ancak sadece son dizini oluşturur, yolun tamamını değil. Bu, \fBrsync\fR’in gerektiğinde hedef dosyanın dizininde kısmi dizini oluşturmasını ve kısmi dosya silindikten sonra kaldırmasını sağlamak için göreli bir yol ("\fB--partial-dir=.rsync-partial\fR" gibi) kullanmayı kolaylaştırır. Mutlak bir yolun kısmi dizinin çalışması için ayrılmış özel bir dizini göstermesi beklendiğinden, bu dizin kaldırma işleminin yalnızca göreli yol için yapıldığı unutulmamalıdır.
.sp
\fIDİZİN\fR değeri mutlak bir yol değilse, \fBrsync\fR mevcut tüm dışlama kurallarının sonuna bir kural daha ekler. Bu, gönderen tarafta mevcut olabilecek herhangi bir kısmi dizin dosyasının gönderilmesini ve ayrıca alıcı taraftaki kısmi dizin öğelerinin zamansız silinmesini önleyecektir. Bir örnek: yukarıdaki \fB--partial-dir\fR seçeneği, diğer dışlama kurallarının sonuna bu "bozulabilir" dışlama kuralının eşdeğerini ekler: \fB-f ’-p .rsync-partial/’\fR
.sp
özel dışlama kuralları kullanılıyorsa, kısmi dizin için özel bir dışlama/gizleme/koruma kuralı eklemek gerekebilir. Çünkü,
.sp
.PD 1
.RS 5
.IP 1. 3
diğer özel kuralların sonuna otomatik eklenen bir kural etkisiz kalabilir veya
.IP 2. 3
\fBrsync\fR’in dışlama kuralını geçersiz kılmak gerekebilir.
.sp
.RE
.IP
.PD 0
Örneğin, \fBrsync\fR’in orada burada kalmış kısmi dizinleri temizlemesi istenirse, \fB--delete-after\fR belirtilmeli ve bir "risk" süzme kuralı eklenmelidir, örnek: \fB-f ’R .rsync-kısmi/’\fR. Geçerli çalıştırma sırasında kalan kısmi dizin verilerinden herhangi birini \fBrsync\fR’in kullanması gerekmedikçe \fB--delete-before\fR veya \fB--delete-during\fR seçeneklerini kullanmaktan kaçınılmalıdır.
.sp
.RS 4
.TP 4
\fBÖnemli:\fR
\fB--partial-dir\fR dizinine diğer kullanıcılar yazamamalıdır, aksi güvenlik riskidir. Örneğin "\fI/temp\fR" dizini ASLA belirtilmemelidir!
.sp
.RE
.IP
Ayrıca \fIDİZİN\fR değerini \fBRSYNC_PARTIAL_DIR\fR ortam değişkeninde belirtebilirsiniz. Bu değişkene bir değerin atanmış olması \fB--partial\fR seçeneğinin etkin olmasını sağlamaz ama komut satırında \fB--partial\fR seçeneğini belirtmekle \fB--partial-dir\fR seçeneğine dizin belirtilmiş gibi işlem yapılması sağlanır. Örneğin, \fB--partial-dir=.rsync-tmp\fR ile \fB--progress\fR seçeneğini birlikte kullanmak yerine, kabukta \fBRSYNC_PARTIAL_DIR\fR=.rsync-tmp şeklinde bir atama yapıldığını ve \fI.rsync-tmp\fR dizininin eksik kalan aktarımı tamamlamak için komut satırında sadece \fB-P\fR seçeneği belirtilerek kullanıldığını varsayalım. \fB--partial\fR seçeneğinin bu ortam değişkenine bakmadığı durumlar,
.sp
.PD 1
.RS 5
.IP 1. 3
\fB--inplace\fR seçeneğinin belirtilmiş olması (\fB--inplace\fR seçeneği \fB--partial-dir\fR ile çeliştiğinden),
.IP 2. 3
\fB--delay-updates\fR seçeneğinin belirtilmiş olmasıdır (aşağıya bkz).
.sp
.RE
.IP
.PD 0
Günümüz \fBrsync\fR’i, kısmi dizindeki bir dosyanın aktarımını sürdürdüğünde, bu kısmi dosya başka bir geçici dosya oluşturmak yerine, yerinde güncellenir (böylece hedef + kısmi + tmp yerine hedef + tmp’de azami çıktılama yapılır). Bunun için, aktarımın her iki ucunda da en az 3.2.0 sürümü \fBrsync\fR olması gerekir.
.sp
Sunucu yapılandırmasının \fBrefuse options\fR ayarı, amacı gereği \fB--partial-dir\fR seçeneğinin \fB--partial\fR seçeneğini örtük olarak uygulamamasına sebep olur. Bu, yani, \fB--partial\fR seçeneğinin reddedilmesi, \fB--partial-dir\fR tarafından sağlanan daha güvenilir üsluba hala izin veriyor olmakla, aktarımı yarım kalmış hedef dosyaların tekrar yazılmasına izin vermemek amacıyla kullanılabilir.
.sp
.TP 4
\fB--delay-updates\fR
Bu seçenek, güncellenen her dosyayı aktarımın sonunda isimleri değiştirilmek suretiyle hızlıca yerine taşınmak üzere bir dizin içinde geçici bir dosyaya koyar. Bu dosyaların güncellenmesini daha atomik yapmayı amaçlar. Öntanımlı olarak bu dosyalar her dosyanın hedef dizini içindeki "\fI.~tmp~\fR" isimli bir dizine konur, fakat bu davranış \fB--partial-dir\fR seçeneği belirtilerek değiştirilebilir. Bu \fI.~tmp~\fR dizininin aktarımdan nasıl hariç tutulacağı ve rsync’in ortalıkta kalan eski \fI.~tmp~\fR dizinlerini nasıl temizleyeceği ile ilgili açıklamalar için bkz: \fB--partial-dir\fR. Bu seçenek \fB---inplace\fR ve \fB--append\fR seçeneği ile birlikte kullanılamaz.
.sp
Bu seçenek \fB--no-inc-recursive\fR anlamına gelir çünkü üzerinde sonuna kadar yineleme yapabilmek için bellekte tam dosya listesine ihtiyaç duyar.
.sp
Bu seçenek alıcı tarafta daha fazla bellek kullanır (aktarılan dosya başına bir bit) ve ayrıca alıcı tarafta tüm güncellenmiş dosyaların ek bir kopyasını tutmak için yeterli boş disk alanı gerektirir. Ayrıca, aşağıdaki durumlar dışında \fB--partial-dir\fR için mutlak yol kullanılması gerekir:
.sp
.PD 1
.RS 5
.IP 1. 3
Mutlak yol kullanıldığında güncellenen tüm dosyalar aynı dizine konulduğundan aktarılan dosyalar arasında aynı isimde dosya olmaz ve
.IP 2. 3
dosyaların bulunduğu yerde adları değiştirilemezse gecikmiş güncellemeler başarısız olacağından dizin hiyerarşisi içinde dosya sistemi bağlama dizinleri bulunamaz.
.sp
.RE
.IP
.PD 0
Ayrıca, çok daha atomik bir güncelleme algortiması içeren, \fBrsync\fR paketinin "\fIsupport\fR" alt dizinindeki "\fBatomic-rsync\fR" python betiğine de bakılabilir (\fB--link-dest\fR seçeneğini ve dosyalar için paralel bir hiyerarşi kullanır).
.sp
.TP 4
\fB-m\fR, \fB--prune-empty-dirs\fR
Dizinler dışında çocukları olmayan iç içe dizinler dahil tüm boş dizinlerin silinmesini sağlar. Gönderen \fBrsync\fR içerme/dışlama/süzme kurallarını kullanarak dosya hiyerarşisini ardışık olarak tararken bir sürü gereksiz dizin oluşmasını önlemek için yararlıdır.
.sp
\fB--min-size\fR seçeneği gibi aktarım kurallarının kullanımının dosya listesine girenleri etkilemediği ve bu nedenle bir dizindeki dosyalardan hiçbiri aktarım kuralıyla eşleşmese bile dizinleri boş bırakmadığı unutulmamalıdır.
.sp
Dosya listesi gerçekte budandığından, bu seçenek ayrıca bir silme etkin olduğunda hangi dizinlerin silineceğini de etkiler. Ancak, hariç tutulan dosya ve dizinlerin, hem kaynak dosyaları gizleme hem de hedef dosyaları koruma kurallarıyla hariç tutulan bazı öğelerin silinmesini engelleyebileceği unutulmamalıdır. Bunun nasıl önleneceğini öğrenmek için bozulabilir süzme kuralına bakılabilir.
.sp
Genel bir koruma (\fBprotect\fR) süzgeci kullanarak dosya listesinden belirli boş dizinlerin budanmasını önleyebilirsiniz. Örneğin, bu seçenek "\fIemptydir\fR" dizininin dosya listesinde tutulmasını sağlar:
.sp
.RS 4
.RS 4
.nf
--filter ’protect emptydir/’
.fi
.sp
.RE
.RE
.IP
Burada, bir hiyerarşideki tüm \fI.pdf\fR dosyalarını kopyalayan, yalnızca \fI.pdf\fR dosyalarını tutmak için gereken hedef dizinleri oluşturan ve hedefteki gereksiz dosyaların ve dizinlerin kaldırılmasını sağlayan bir örnek verilmiştir (dışlama kuralı yerine kullanılan ’hide,! */’ dizin olmayanları gizleme süzgecine dikkat):
.sp
.RS 4
.RS 4
.nf
rsync -avm --del --include=’*.pdf’ -f ’hide,! */’ kaynak/ hedef
.fi
.sp
.RE
.RE
.IP
Gereksiz hedef dosyaların silinmesi istenmiyorsa, gizleme (\fBhide\fR) süzgecinin yerine zamanı daha iyi kullanan \fB--include=’*/’\fR \fB--exclude=’*’\fR seçenekleri kullanılabilirdi.
.sp
.TP 4
\fB--progress\fR
Aktarımın ilerleyişini gösteren bilgilerin basılmasını sağlar. Bu, sıkılmış bir kullanıcıya izlenecek bir şeyler verir. Günümüz \fBrsync\fR’inde, \fB--info=flist2,name,progress\fR seçeneği örtük olarak öntanımlıdır, ancak kullanıcı tarafından sağlanan \fB--info\fR seçenekleri önceliklidir (örneğin \fB--info=flist0 --progress\fR).
.sp
\fBrsync\fR’in normal bir dosyayı aktarırken göstediği ilerleme satır şuna benzer:
.sp
.RS 4
.RS 4
.nf
782448  63%  110.64kB/s    0:00:04
.fi
.sp
.RE
.RE
.IP
Bu örnekte, gönderici dosyasının %63’ü olan 782448 baytın saniyede 110.64kB hızla indirilerek alıcıda oluşturulduğu, aktarım hızı aynı kaldığı takdirde aktarımın 4 saniye sonra biteceği ifade edilmektedir.
.sp
Bu istatistikler, \fBrsync\fR’in delta-aktarım algoritması kullanımdaysa yanıltıcı olabilir. Örneğin, gönderenin dosyası temel dosyanın ardından ek verilerden oluşuyorsa, alıcıya değişmez veriler ulaştığında rapor edilen hız muhtemelen önemli ölçüde düşecek ve dosyanın eşleşen kısmını bitirmek için aktarımın tamamlanması muhtemelen alıcının tahmin ettiğinden çok daha uzun sürecektir.
.sp
Dosya aktarımı bittiğinde \fBrsync\fR ilerleme satırına şöyle bir satır yerleştirir:
.sp
.RS 4
.RS 4
.nf
1,238,099 100%  146.38kB/s    0:00:08  (xfr#5, to-chk=169/396)
.fi
.sp
.RE
.RE
.IP
Bu örnekte, dosya toplamda 1.238.099 bayt uzunluğundaydı, tüm dosya için ortalama aktarım hızı saniyede 146,38 kilobayttı ve aktarım 8 saniyede tamamlandı. Bu, mevcut \fBrsync\fR oturumunda normal bir dosyanın 5. aktarımıydı. Dosya listesindeki toplam 396 dosyadan alıcıda güncel olup olmadıklarına bakılacak 169 dosya daha var.
.sp
Artırımlı bir özyineleme taramasında, \fBrsync\fR, taramanın sonuna ulaşana kadar dosya listesindeki toplam dosya sayısını bilmeyecek, ancak tarama sırasında dosyaları aktarmaya başladığından, (artırımlı özyineleme denetimi anlamında) "ir-chk" metnini içeren bir satır görüntüleyecektir. Listenin tam boyutununun saptandığı noktaya gelindiğinde "ir-chk" yerini "to-chk" metnine bırakacaktır. Yani, "ir-chk" ifadesini gördüğünüz sürece, dosya listesindeki denetlenecek dosya sayısı giderek artacaktır (aktarılan her dosya ayrıca bu listeye eklenecektir).
.sp
.TP 4
\fB-P\fR
\fB--partial\fR \fB--progress\fR seçenekleri için kısayoldur. Amacı, kesintiye uğraması muhtemel uzun bir aktarım için bu iki seçeneğin birlikte belirtilmesini kolaylaştırmaktır.
.sp
Ayrıca, istatistikleri tek tek dosyalar yerine tüm aktarıma dayalı olarak veren bir \fB--info=progress2\fR seçeneği de vardır. Çok sayıda adın ekranı kaydırmadan aktarımın ilerleyiş izlenmek isteniyorsa, bu seçeneğin bir dosya adı çıktısı verdirmeden kullanılması gerekir (örneğin \fB-v\fR seçeneğinden kaçınılabilir veya \fB--info=name0\fR belirtilebilir). \fB--info=progress2\fR’yi kullanmak için \fB--progress\fR seçeneğinin belirtilmesi gerekmez.
.sp
Son olarak, \fBrsync\fR’e \fBSIGINFO\fR veya \fBSIGVTALRM\fR sinyali göndererek anında ilerleme raporu alınabilir. BSD sistemlerinde, Ctrl+T tuşları \fBSIGINFO\fR sinyali oluşturulur (Linux şu anda bir \fBSIGINFO\fR sinyalini desteklememektedir). İstemci süreci bu sinyallerden birini aldığında, mevcut dosya aktarımının bittiğini bildirecek ilerleme raporu çıktısını üreten bayrağı tanımlar (sinyal geldiğinde büyük bir dosya aktarılıyorsa bu işlem biraz zaman alabilir). Bir dosya adının (gerekirse) ardından ilerleme bilgisinin \fB--info=progress2\fR biçimi gelir. 3 \fBrsync\fR sürecinden hangisinin istemci süreci olduğu bilinmeksizin, hepsinin sinyallenmesinde sakınca yoktur (çünkü istemci olmayan süreçler sinyali yok sayar).
.sp
.RS 4
.TP 4
\fBDikkat:\fR
SIGVTALRM sinyali 3.2.0 öncesi \fBrsync\fR’in (kahrından) ölmesine sebep olur.
.sp
.RE
.IP
.sp
.TP 4
\fB--password-file\fR=\fIDOSYA\fR
Uzak \fBrsync\fR sunucusuna erişim için parola içeren bir dosya belirtebilmeyi sağlar. \fIDOSYA\fR olarak - belirtilirse standart girdi okunur. Dosya içinde parolayı içerek tek bir satır bulunmalıdır (kalan satırlar yok sayılır). \fIDOSYA\fR herkesçe okunabilen bir dosya ise ya da root sahibi olmadığı bir parola dosyası belirterek \fBrsync\fR’i çalıştırıyorsa \fBrsync\fR hata vererek çıkar.
.sp
Bu seçenek \fBssh\fR gibi bir uzak kabuk aktarımına parola sağlamaz. Bu işlemin uzak kabukra nasıl yapılacağını öğrenmek için kullanılacak kabuğun belgelerine bakılabilir. Aktarım için uzak kabuk kullanıldığı durumda bu dosya uzak kabuk oturumunun kimlik kanıtlama işlemi bittikten sonra etkili olur (yani, artalan sürecinin yapılandırma dosyasında belirtilmiş bir parola varsa kimlik kanıtlaması için bu dosya okunur).
.sp
.TP 4
\fB--early-input\fR=\fIDOSYA\fR
Bu seçenek, \fBrsync\fR’in standart girdideki "aktarım öncesi" betiğine 5K’ya kadar veri gönderebilmeyi sağlar. Bu verilerin olası kullanımlarından biri, komut dosyasına (bir "aktarım sonrası" betiğiyle sistemden ayrılması gerekecek) şifrelenmiş bir dosya sistemini bağlamak için kullanılabilecek bir anahtar vermektir.
.sp
Artalan sürecinin sürümü en az 3.2.1 olmalıdır.
.sp
.TP 4
\fB--list-only\fR
Bu seçenek dosyaların aktarılmasına değil, kaynak dosyaların listelenmesine sebep olur. Bu seçenek, eğer bir hedef belirtilmezse çalışır, dolayısıyla kullanım alanları şunlardır:
.sp
.PD 1
.RS 5
.IP 1. 3
Hedef içeren bir kopyalama komutunu dosya listeleme komutuna dönüştürmek için
.IP 2. 3
Birden fazla kaynak belirtebilmek için. Dikkat: Hedefin de eklenmesi gerekir.
.sp
.RE
.IP
.PD 0
.RS 4
.TP 4
\fBDikkat:\fR
Joker karakterli bir kaynak bağımsız değişkeninin kabuk tarafından birden çok bağımsız değişkene genişletildiği unutulmamalıdır, bu nedenle bu seçeneği kullanmadan böyle bir bağımsız değişkenle listeleme asla güvenli değildir. Örnek:
.sp
.RS 4
.RS 4
.nf
rsync -av --list-only foo* hedef/
.fi
.sp
.RE
.RE
.IP
.sp
.RE
.IP
\fBrsync\fR 3.1.0 ve sonrasında, \fB--list-only\fR ile çıktılanan boyutlar \fB--human-readable\fR seçeneğinden etkilenmektedir. Öntanımlı olarak rakam gruplaması uygulanacak olsa da daha yüksek seviyeden okunabilirlik birim sonekli değerler sağlayacaktır. Tüm okunabilirlik düzeylerinde boyut sütunlarının genişliğinin 11 karakterden 14’e yükseleceği unutulmamalıdır. Boyutların sadece rakamlardan oluşmasını sağlamak ve eski 11 karakterlik sütun genişliğine dönmek için \fB--no-h\fR seçeneği belirtilebilir.
.sp
.RS 4
.TP 4
\fBUyumluluk Bilgisi:\fR
2.6.3 öncesi bir \fBrsync\fR’den dosyaların uzaktan listelenmesini isterken, özyinelemeli olmayan bir listeleme istenirse bir hata oluşabilir. Bunun nedeni, dosya listeleme işleminde örtük olarak \fB--recursive\fR olmaksızın \fB--dirs\fR seçeneğinin uygulanması ve eski rsync’lerin bu seçeneğe sahip olmamasıdır. Bu sorunu önlemek için \fB--no-dirs\fR seçeneği belirtilebilir (dizinin içeriğini genişletmek gerekmiyorsa) veya özyineleme etkinleştirilip alt dizinlerin içeriği dışlanabilir: \fB-r --exclude=’/*/*’\fR.
.sp
.RE
.IP
.sp
.TP 4
\fB--bwlimit\fR=\fIHIZ\fR
Soket üzerinden azami veri aktarım hızının KiB/s cinsinden belirtilebilmesini sağlar. \fIHIZ\fR belirtilirken ondalık değer belirtilebilir ve değerin sonuna birim eklenebilir (\fB--bwlimit=1.5m\fR gibi). Hiçbir sonek belirtilmezse 1024 baytlık birimler ("K" veya "KiB") öntanımlıdır. 0 değeri hız kısıtlaması olmadığını belirtir. Kullanılabilir soneklerin listesi için bkz: \fB--max-size\fR
.sp
Geriye uyumluluk için hız sınırı en yakın KiB birime yuvarlanabilir. Yani, 1024 b/s’den küçük hız belirtilemez.
.sp
\fBrsync\fR veriyi soketlere bloklar halinde yazar ve bu seçenek hem blokların yazılması hem de ortalama aktarım hızını istenen hızda tutmaya çalışmak amacıyla kullanılır. \fBrsync\fR’in veri bloğunu yazarken uyuduğu durumlarda ortalama hızı tutturmaya çalışırken bazı hız aşımları görülebilir.
.sp
Verilerin dahili arabelleğe alınması nedeniyle, \fB--progress\fR seçeneği, verilerin gönderim hızını doğru şekilde yansıtmayabilir. Bunun nedeni, bazı dosyaların verileri hızlıca arabelleğe alındığında hızlıca gönderiliyor gibi görünmesi ya da çıktı arabelleğinin boşaltılması sırasında gönderimin yavaşlamış gibi görünmesidir. Bu durum, gelecekteki bir sürümde düzeltilebilir.
.sp
Ayrıca bkz: Artalan sürecininin \fB--bwlimit\fR seçeneği.
.sp
.TP 4
\fB--stop-after\fR=\fISÜRE\fR, \fB--time-limit\fR=\fISÜRE\fR
\fB--time-limit\fR seçeneğinin kullanımı artık önerilmemektedir.
.sp
Belirtilen \fISÜRE\fR geçtiğinde \fBrsync\fR’in kopyalamayı durdurmasını sağlar.
.sp
Azami esneklik için, bir tarafın çıkması bağlantıyı sonlandırdığından bu seçenek uzak tarafa gönderilmez. Bağlantının yalnızca bir tarafı bu seçeneği desteklese bile seçeneğin kullanımına izin verilir. Gerektiğinde, \fB--remote-option\fR (\fB-M\fR) seçeneği kullanılarak uzak tarafın bağlantıyı sonlandırması istenebilir.
.sp
.TP 4
\fB--stop-at\fR=\fIyıl-ay-günTsaat:dakika\fR
Belirtilen zamana ulaşıldığında \fBrsync\fR’in kopyalamayı durdurmasını sağlar. Tarih ve zamanın tamamı yerel zaman diliminde \fIyıl-ay-günTsaat:dakika\fR biçeminde (2000-12-31T23:59 gibi) belirtilebilir. Tarih belirtirken tire yerine eğik çizgi kullanılabilir.
.sp
Değer çeşitli şekillerde kısaltılabilir, örneğin 2 rakamlı yıl belirtilebildiği gibi bazı değerler hiç belirtilmeyebilir. Her durumda, sağlanan zaman bilgisiyle eşleşen zamanda kopyalama durdurulur. Geçerli zamanın veya geçmişin belirtilmesi durumunda \fBrsync\fR hata vererek çıkar.
.sp
Örneğin, "1-30" 30 Ocak yerel zamanla gece yarısını, "14:00" bir sonraki ös 2’yi, "1" gelecek ayın 1. gününün geceyarısını, "31" gelecek 31 çeken ayın 31. gününün geceyarısını, "59" ise geçerli saatin 59. dakikasını ifade eder.
.sp
Azami esneklik için, bir tarafın çıkması bağlantıyı sonlandırdığından bu seçenek uzak tarafa gönderilmez. Bağlantının yalnızca bir tarafı bu seçeneği desteklese bile seçeneğin kullanımına izin verilir. Gerektiğinde, \fB--remote-option\fR (\fB-M\fR) seçeneği kullanılarak uzak tarafın bağlantıyı sonlandırması istenebilir. Uzak konağın öntanımlı zaman diliminin yerel zaman diliminden farklı olabileceği hesaba katılmalıdır.
.sp
.TP 4
\fB--fsync\fR
Alıcı tarafın aktarımı biten her dosyaya fsync yapmasına sebep olur. Bu aktarımı yavaşlatsa da önemli dosyaları güncellerken huzuru sağlamaya yardımcı olabilir.
.sp
.TP 4
\fB--write-batch\fR=\fIDOSYA\fR
Aynı hedefe yapılacak eşdeğer bir çağrı için \fB--read-batch\fR seçeneği ile kullanılmak üzere bir dosya oluşturur. Ayrıntılar için bkz: \fBTOPLU İŞLEM DOSYASI KİPİ\fR bölümü ve \fB--only-write-batch\fR seçeneği.
.sp
Bu seçenek uzlaşılmış sağlama toplamını ve sıkıştırma listelerini geçersiz kılar ve her zaman eski tarz md5/md4/zlib seçimlerine dayalı bir seçim üzerinde uzlaşım sağlar. Daha güncel bir seçim istenirse, \fB--checksum-choice\fR (\fB--cc\fR) ve/veya \fB--compress-choice\fR (\fB--zc\fR) seçenekleri kullanılabilir.
.sp
.TP 4
\fB--only-write-batch\fR=\fIDOSYA\fR
Toplu işlem dosyası oluşturulurken hedef sistemde hiçbir güncelleme yapılmaması dışında \fB--write-batch\fR gibi çalışır. Bu, değişikliklerin başka yollarla hedef sisteme taşınmasına ve ardından değişikliklerin \fB--read-batch\fR yoluyla uygulanmasına olanak tanır.
.sp
Toplu işlem dosyası doğrudan taşınabilir ortamlara yazılabilir: Bu ortam, aktarım bitmeden önce kapasitesini doldurursa, bu kısmi aktarım hedefe uygulanabilir ve geri kalanını almak için tüm süreç tekrarlanabilir (çoklu güncelleme döngüsü devam ederken hedef sistemin kısmen güncellenmiş olması umursanmadığı takdirde).
.sp
Ayrıca, değişiklikleri uzak bir sisteme gönderirken bant genişliğinin önemli olmadığı unutulmamalıdır. Çünkü toplu işlem dosyası, verilerin kablo üzerinden akmasına gerek kalmadan göndericiden alıcıya yönlendirilmesine olanak tanır (çekerken, gönderen uzakta olduğundan toplu işlem dosyası oluşturamazsınız).
.sp
.TP 4
\fB--read-batch\fR=\fIDOSYA\fR
Evvelce \fB--write-batch\fR ile oluşturulan \fIDOSYA\fR içindekileri uygular. Eğer \fIDOSYA\fR olarak "-" belirtilirse dosya verisi standart girdiden okunur. Ayrıntılar için \fBTOPLU İŞLEM DOSYASI KİPİ\fR bölümüne bakınız.
.sp
.TP 4
\fB--protocol\fR=\fISAYI\fR
Daha eski bir protokol sürümünü kullanmaya zorlar. Bu, daha eski bir \fBrsync\fR sürümüyle uyumlu bir toplu iş dosyası oluşturmak için kullanışlıdır. Örneğin, \fB--write-batch\fR seçeneğiyle \fBrsync\fR 2.6.4 kullanılıyorsa, ancak \fB--read-batch\fR seçeneğini çalıştırmak için \fBrsync\fR 2.6.3 kullanılacaksa, eski protokol sürümünü zorlamak için toplu iş dosyası oluşturulurken "\fB-⁠-⁠protocol=28\fR’ kullanılmalıdır (okuyan sistemde \fBrsync\fR’in yükseltilmeyeceği varsayımıyla).
.sp
.TP 4
\fB--iconv\fR=\fIDÖNÜŞÜM\fR
\fBrsync\fR, bu seçeneği kullanarak dosya adlarını karakter kümeleri arasında dönüştürebilir. \fIDÖNÜŞÜM\fR olarak "." değeri belirtilerek, \fBrsync\fR’e öntanımlı karakter kümesinin yerel tanımına göre aranması sağlanabilir. Ayrıca, yerelin ve hedefin karakter kümesi \fB--iconv=\fR\fIYEREL,HEDEF\fR biçeminde virgülle ayrılarak da (\fB--iconv=iso88599,utf8\fR gibi) belirtilebilir. Bu sıra, dosyaları gönderirken veya alırken seçeneğin aynı kalmasını sağlar. Son olarak, herhangi bir dönüştürmeyi engellemek için \fB--no-iconv\fR veya \fIDÖNÜŞÜM\fR olarak "-⁠" belirtebilirsiniz. Bu seçeneğin öntanımlı değeri konağa özeldir ve ayrıca \fBRSYNC_ICONV\fR ortam değişkeni ile de dönüşüm belirlenebilir.
.sp
Yerel \fBiconv\fR(1) kitaplığının desteklediği karakter kümesi adlarının listesi için "\fBiconv --list\fR" komutu çalıştırılabilir.
.sp
\fB--protect-args\fR (\fB-s\fR) seçeneğini belirtilirse, \fBrsync\fR komut satırında belirtilen dosya adlarını gönderen taraf dönüştürecektir. Ayrıca bkz: \fB--files-from\fR
.sp
\fBrsync\fR’in süzme dosyalarında (içerilen/dışlanan dosyalar dahil) herhangi bir ad dönüşümü yapmadığını unutulmamalıdır. Aktarımın her iki tarafıyla da eşleşecek kuralların belirtildiğinden emin olunmalıdır. Örneğin, iki tarafta da hesaba katılması gereken dosya adı farklılıkları varsa, fazladan içerme/dışlama kuralları belirtilebilir.
.sp
Bir \fB--iconv\fR seçeneği buna izin veren bir \fBrsync\fR artalan sürecine iletildiğinde, artalan süreci, gerçekte ilettiğiniz uzak karakter kümesinden bağımsız olarak "\fBcharset\fR" yapılandırma seçeneğinde belirtilen karakter kümesini kullanır. Bu nedenle, bir artalan süreci aktarımı için yalnızca yerel karakter kümesini belirtmek yeterlidir (\fB--iconv=utf8\fR gibi).
.sp
.TP 4
\fB-4\fR, \fB--ipv4\fR, \fB--6\fR, \fB--ipv6\fR
\fBrsync\fR’e soketleri oluştururken veya \fBssh\fR çalıştırırken IPv4/IPv6 tercih etmesini söyler. Bu sadece \fBrsync\fR’in doğrudan kendi denetimi altındaki soketleri ve uzak kabuk olarak kullanılan \fBssh\fR ile anlaşabilmek için \fB-4\fR veya \fB-6\fR seçeneğinin \fBssh\fR’ye iletilmesini etkiler. Diğer uzak kabuklar için IPv4 durumunda doğrudan "\fB--rsh SHELL -4\fR" veya IPv6 durumunda "\fB--rsh SHELL -6\fR" seçeneğini belirtmek gerekebilir.
.sp
Ayrıca bkz: Artalan süreci \fB--ipv4\fR seçeneği.
.sp
\fBrsync\fR, IPv6 desteği olmadan derlendiyse, \fB--ipv6\fR seçeneğinin hiçbir etkisi olmaz. Bu durumda \fBrsync --version\fR çıktısı "IPv6 yok" dizgesini içerir.
.sp
.TP 4
\fB--checksum-seed\fR=\fISAYI\fR
MD4 sağlama toplamı tohumunun \fISAYI\fR olarak belirtilebilmesini sağlar. Bu 4 baytlık tohum her blok ve dosyanın MD4 sağlama toplamı hesaplamasında kullanılır (günümüz MD5 sağlama toplamları tohum kullanmaz). Öntanımlı tohum o an için \fBtime\fR(3) kullanılarak sunucu tarafından üretilir. Bu seçenek, yinelenebilir blok sağlama toplamları isteyen uygulamalar için ya da kullanıcının daha rastgele bir tohum kullanmak istediği yerlerde kullanışlıdır. \fISAYI\fR olarak sıfır değeri verilirse öntanımlı tohum kullanılır.
.sp
.PP
.sp
.SH "ARTALAN SÜRECİ SEÇENEKLERİ"
\fBrsync\fR artalan süreci başlatılırken kullanılan seçenekler:
.sp
.TP 4
\fB--daemon\fR
Bu seçenek \fBrsync\fR’in artalanda çalışacağını belirtir. Başlattığınız sunucuya bir \fBrsync\fR istemcisi \fIkonak::modül\fR veya \fIrsync://konak/modül/\fR sözdizimini kullanarak erişebilir.
.sp
Eğer standart girdi bir soket ise, \fBrsync\fR, \fBinetd\fR üzerinden çalıştığını varsayacaktır, aksi takdirde, uçbirimini bırakıp bir artalan süreci haline gelecektir. \fBrsync\fR istemcileri tarafından yapılan her bağlantı isteğinde süreç, yapılandırma dosyasını (\fIrsyncd.conf\fR) okuduktan sonra isteğe yanıt verecektir.
.sp
Daha fazla bilgi için bkz: \fBrsyncd.conf\fR(5)
.sp
.TP 4
\fB--address\fR=\fIADRES\fR
Öntanımlı olarak \fBrsync\fR, \fB--daemon\fR seçeneği ile başlatıldığında ya da bir \fBrsync\fR sunucuya bağlanırken bir joker adres kullanır. Bu seçenekle kullanılacak adres olarak belli bir IP adresi (veya konakismi) belirtebilirsiniz. Bu \fB--config\fR seçeneği ile birlikte kullanılarak sanal konak kullanımını mümkün kılar.
.sp
Ayrıca, \fBrsyncd.conf\fR(5) kılavuz sayfasındaki \fBaddress\fR seçeneğinin açıklamasına da bakılabilir.
.sp
.TP 4
\fB--bwlimit\fR=\fIHIZ\fR
Sunucu sürecinin gönderdiği veri için azami aktarım hızını KiB/s cinsinden belirtmek için kullanılır. İstemci bu durumda bile bir \fB--bwlimit\fR değeri belirtebilir, ancak \fIHIZ\fR’dan büyük değerlere izin verilmez.
.sp
Ayrıca bkz: İstemci \fB--bwlimit\fR seçeneği.
.sp
.TP 4
\fB--config\fR=\fIDOSYA\fR
Öntanımlı yapılandırma dosyasında farklı bir yapılandırma dosyası belirtmek için kullanılır. Artalan süreci root dışında bir uzak kullanıcı tarafından bir uzak kabuk uygulaması üzerinden çalıştırılıyorsa öntanımlı yapılandırma dosyası çalışma dizinindeki (genellikle \fI$HOME\fR) \fIrsyncd.conf\fR dosyası, aksi takdirde \fI/etc/rsyncd.conf\fR’dur.
.sp
.TP 4
\fB-M\fR, \fB--dparam\fR=\fIDEĞİŞTİRGELER\fR
Bu seçenek, rsync artalan süreci kipinde başlatılırken bir artalan süreci yapılandırma bağımsız değişkeni tanımlamak için kullanılabilir. İlk modülün tanımından önce bağımsız değişkenin global ayarların sonuna eklenmesine eşdeğerdir. İstenirse bağımsız değişken adları boşluksuz olarak belirtilebilir. Örnek:
.sp
.RS 4
.RS 4
.nf
rsync --daemon -M pidfile=/yol/rsync.pid
.fi
.sp
.RE
.RE
.IP
.sp
.TP 4
\fB--no-detach\fR
Artalan süreci olarak çalışmada \fBrsync\fR’in uçbirimini bırakıp bir artalan süreci haline gelmesini engeller. Bu seçenek, \fBrsync\fR, Cygwin üzerinde bir hizmet olarak çalıştırılırken gereklidir. Ayrıca, daemontools ya da AIX’in Sistem Özkaynak Denetçisi gibi bir uygulama tarafından yönetildiğinde yararlı olabilir. Seçeneğin ayrıca, \fBrsync\fR bir hata ayıklayıcı altında çalıştırılırken de kullanılması tavsiye edilir. Bu seçenek, \fBrsync\fR, \fBinetd\fR veya \fBsshd\fR üzerinden çalışıyorsa etkisizdir.
.sp
.TP 4
\fB--port\fR=\fIPORT\fR
Artalan süreci tarafından öntanımlı olarak kullanılan 873. port yerine başka bir port belirtmek için kullanılır.
.sp
Ayrıca istemci \fB--port\fR seçeneğinin ve \fBrsyncd.conf\fR(5) kılavuz sayfasındaki \fBport\fR seçeneğinin açıklamasına da bakılabilir.
.sp
.TP 4
\fB--log-file\fR=\fIDOSYA\fR
Yapılandırma dosyasındaki "\fBlog file\fR" seçeneğinde belirtilen dosyanın yerine kullanılacak günlük \fIDOSYA\fRsını belirtmek için kullanılır.
.sp
Ayrıca bkz: İstemci \fB--log-file\fR seçeneği.
.sp
.TP 4
\fB--log-file-format\fR=\fIBİÇEM\fR
Yapılandırma dosyasındaki "\fBlog format\fR" seçeneğinde belirtilen dizge yerine kullanılacak olan \fIBİÇEM\fR dizgesini belirtmek için kullanılır. Ayrıca, değeri boş dizge değilse "\fBtransfer logging\fR" seçeneğini etkinleştirir, aksi takdirde aktarım günlüklemesi kapatılır.
.sp
Ayrıca bkz: İstemci \fB--log-file-format\fR seçeneği.
.sp
.TP 4
\fB--sockopts\fR
\fBrsyncd.conf\fR(5) dosyasındaki \fBsocket options\fR seçeneği ile aynı sözdizimine sahip olup onu geçersiz kılar.
.sp
Ayrıca bkz: İstemci \fB--sockopts\fR seçeneği.
.sp
.TP 4
\fB-v\fR, \fB--verbose\fR
Artalan sürecinin başlatılması sırasında günlük bilgilerinin miktarını arttırmak için kullanılır. Artalan sürecinin, istemci bağlandıktan sonraki ayrıntı seviyesi istemci tarafından kullanılan seçeneklerle ve modülün yapılandırma bölümündeki \fBmax verbosity\fR değeriyle denetlenir.
.sp
Ayrıca bkz: İstemci \fB--verbose\fR seçeneği.
.sp
.TP 4
\fB-4\fR, \fB--ipv4\fR, \fB--6\fR, \fB--ipv6\fR
\fBrsync\fR artalan sürecinin bağlantıları dinleyeceği soketleri oluştururken IPv4/IPv6 tercih etmesini sağlarlar. Çekirdekteki bir IPv6 hatası nedeniyle Linux’un eski sürümlerinde bu seçeneklerden biri gerekli olabilir (port kullanılacağı zaman "adres zaten kullanımda" hatası alınıyorsa, \fBrsync\fR artalan sürecini başlatırken \fB--ipv6\fR veya \fB--ipv4\fR belirtmek gerekebilir).
.sp
Ayrıca bkz: İstemci \fB--ipv4\fR seçeneği.
.sp
\fBrsync\fR, IPv6 desteği olmadan derlendiyse, \fB--ipv6\fR seçeneğinin hiçbir etkisi olmaz. Bu durumda \fBrsync --version\fR çıktısı "IPv6 yok" dizgesini içerir.
.sp
.TP 4
\fB-h\fR, \fB--help\fR
\fB--daemon\fR seçeneğinden sonra belirtilirse, \fBrsync\fR artalan süreci başlatılırken kullanılabilecek seçenekleri kısaca açıklayan bir yardım sayfası basar.
.sp
.PP
.sp
.SH "SÜZME KURALLARI"
Süzme kuralları hangi dosyaların aktarılacağını (içerileceğini - include), hangi dosyaların atlanacağını (dışlanacağını - exclude) seçmek için esnek bir yöntem sağlar. Kurallar ya doğrudan \fBinclude\fR/\fBexclude\fR seçenekleri ile ya da daha hassas içerme/dışlama kalıpları ile (bir dosyadan okuyarak) belirtilebilir.
.sp
\fBrsync\fR, aktarılacak dosya/dizinlerin listesindeki her isim için ayrı ayrı içerme/dışlama kurallarını tarar ve ilk eşleşen kalıbı uygular: bir dışlama kalıbıyla eşleşen dosya atlanır; bir içerme kalıbı ile eşleşen dosya atlanmaz; eşleşen bir kalıp yoksa dosya atlanmaz.
.sp
\fBrsync\fR, komut satırında belirtilen \fBinclude\fR/\fBexclude\fR seçeneklerinden sıralı bir süzme kuralları listesi oluşturur. Süzme kurallarının sözdizimi şöyledir:
.sp
.RS 4
.nf
\fIkural\fR [\fIkalıp_veya_dosyaismi\fR]
\fIkural\fR,\fIbelirteç\fR [\fIkalıp_veya_dosyaismi\fR]
.fi
.sp
.RE
\fIkural\fR ismi olarak, aşağıda açıklanan kısa ya da uzun kural isimlerinden birini kullanabilirsiniz. Eğer kısa isimli kural kullanırsanız, \fIkural\fRı \fIbelirteç\fR’ten ayıran ’,’ isteğe bağlıdır. Ardından gelen (varsa) \fIkalıp\fR veya \fIdosyaismi\fR bir boşluk veya alt çizgiden sonra yazılmalıdır. Kullanılabilecek kural önekleri:
.sp
.RS 4
.nf
   uzun     kısa  açıklama
  --------------------------
1. exclude    -   dışlama kalıbı belirtir
2. include    +   içerme kalıbı belirtir.
3. merge      .   ek kuralları okumak için birleştirilecek dosyayı belirtir.
4. dir-merge  :   bir dizin içi birleştirme dosyası belirtir.
5. hide       H   aktarımdan gizlenen dosyalar için kalıp belirtir.
6. show       S   aktarımdan gizlenmeyen dosyalar için kalıp belirtir.
7. protect    P   silinmekten korunan dosyalar için kalıp belirtir.
8. risk       R   silinmekten korunmayan dosyalar için kalıp belirtir.
9. clear      !   geçerli içerme/dışlama listesini temizler (bağımsız değişken almaz)
.fi
.sp
.RE
Kurallar bir dosyadan okunduğunda, "#" ile başlayan açıklama satırları ile boş satırlar yoksayılır.
.sp
\fB--include\fR ve \fB--exclude\fR komut satırı seçenekleri yukarıdaki kural sözdizimini değil, sadece kalıplarla ek olarak listeyi temizleyen ünlem (\fB!\fR) imini (ve kalıplar bir dosyadan okunuyorsa boş ve açıklama satırlarını) kabul eder. Bir kalıp "\fB- \fR" (tire ve boşluk) veya "\fB+ \fR" (artı ve boşluk) ile başlamıyorsa, kural (içerme seçeneği için) "\fB+ \fR" veya (dışlama seçeneği için) "\fB- \fR" önekli bir dizge olarak yorumlanır. Diğer yandan, bir \fB--filter\fR seçeneği, kuralın başlangıcında daima kısa veya uzun bir kalıp adı içermelidir.
.sp
Ayrıca, her bir \fB--filter\fR, \fB--include\fR ve \fB--exclude\fR seçeneği tek bir kalıp/kural alır. Çok sayıda kalıp/kural eklemek için komut satırında bu seçenekler yinelenebilir veya \fB--filter\fR, \fB--include-from\fR ve \fB--exclude-from\fR seçeneklerinin birleştirme dosyası sözdizimi kullanılabilir.
.sp
.SS "İçerme/Dışlama Kalıpları"
Yukarıda \fBSÜZME KURALLARI\fR bölümünde bahsedildiği gibi dosyalar "\fB+\fR", "\fB-\fR" vb. süzme kuralları kullanılan kalıplar belirtilerek içerilebilir ya da dışlanabilir. İçerme ve dışlama kurallarının her birinde aktarılacak dosyaların isimleriyle eşleşen kalıplar belirtilir. Bu kalıplar çeşitli biçimler alabilir:
.sp
.PD 1
.RS 1
.IP \(ci 3
Eğer kalıp bir \fB/\fR ile başlıyorsa, dosya hiyerarşisi içinde belli bir noktaya demirlenir, aksi takdirde dosya yolunun sonuna eşlenir. Bu düzenli ifadelerde kalıbı \fB^\fR ile başlatmaya benzer. Örneğin, "\fB/foo\fR" kalıbı ya (genel bir kural için) "aktarımın kökü"ndeki ya da (\fBdir-merge\fR kuralı için) birleştirme dosyasının dizinindeki "\fIfoo\fR" isimli dosya ile eşleşirdi. Nitelenmemiş bir "\fBfoo\fR" ise, ağacın herhangi bir yerindeki "\fIfoo\fR" isimli bir dosya veya dizin ismi ile eşleşirdi, çünkü algoritma kökten alt dizinlere doğru ardışık olarak uygulanır; yani, her yol elemanı sonunda bir dosya ismi olacak şekilde ele alınır. Demirlenmemiş "\fBsub/foo\fR" ise, hiyerarşinin herhangi bir noktasındaki "\fIsub\fR" isimli bir dizin içindeki bir "\fIfoo\fR" ile eşleşirdi. Aktarımın kökü ile eşleşen bir kalıbın nasıl belirtileceği \fBİçerme/Dışlama Kalıplarının Kök Dizinle İlişklendirilmesi\fR bölümünde ayrıntılı olarak açıklanmıştır.
.IP \(ci 3
Eğer kalıp bir \fB/\fR ile bitiyorsa, sadece bir dizinle eşleşir, bir dosya, sembolik bağ ya da aygıtla değil.
.IP \(ci 3
Eğer kalıp \fB*?[\fR dosyaismi kalıp karakterlerinden birini içeriyorsa, ifade sınarak ya kabuğun dosyaismi eşleştirme kuralları ya da basit bir dizge eşleştirmesi kullanılır.
.IP \(ci 3
Tek yıldız ("\fB*\fR") herşeyle eşleşecek ama eğik çizgilerde (/) duracaktır.
.IP \(ci 3
Çift yıldız ("\fB**\fR") eğik çizgiler dahil herşeyle eşleşir.
.IP \(ci 3
Soru imi ("\fB?\fR") eğik çizgi (/) hariç her karakterle eşleşir.
.IP \(ci 3
Köşeli ayraç ("\fB[\fR") [a-z] veya [[:alpha:]] gibi bir karakter sınıfı başlatır.
.IP \(ci 3
Bir joker kalıbında ters eğik çizgi bir joker karakteri öncelemekte kullanılabilir, ancak öncelediği bir joker karakter değilse öncelediği karakterin eşleşmesini sağlar. Bir kalıp, hiçbir şey içermeyen bir kalıba kıyasla joker karakter içerdiğinde, fazladan bir ters eğik çizgi kaldırma düzeyi var demektir. Örneğin, “foo\\bar” dizgesinde "\\b"nin tek başına "b" haline gelmemesi gerekiyorsa dizgeye ters eğik çizgiyle eşleşen bir önceleme eklemek gerekiyor demektir, bu durumda dizge “foo\\\\bar*" olarak belirtilmelidir.
.IP \(ci 3
Eğer bir kalıp bir \fB/\fR (sonda değil) ya da bir "\fB**\fR" içeriyorsa baştan sona tüm dizinleri dahil tam dosya yolu ile eşleştirilir. Eğer kalıp bir \fB/\fR ya da "\fB**\fR" içermiyorsa, sadece tam yolun son bileşeni ile eşleştirilir (algoritmanın altdizinlere inilerek uygulandığını hatırlayın, yani "tam yol" başlangıç dizininden başlayarak son dizine kadar yolun herhangi bir parçası ile eşleşebilir).
.IP \(ci 3
Sondaki “\fBbir_dizin/***\fR” kalıbı [3 yıldıza dikkat!] hem dizinle (“\fBbir_dizin/\fR" belirtilmiş gibi) hem de dizindeki her şeyle ("\fBbir_dizin/**\fR" belirtilmiş gibi) eşleşir. Bu davranış 2.6.7 sürümünde eklenmiştir.
.sp
.RE
.PD 0
.TP 4
\fBBilgi:\fR
\fB--recursive\fR (\fB-r\fR) seçeneğini (örtük olarak \fB-a\fR ile uygular) kullandığınızda, soldan sağa her yolun her alt bileşeni ziyaret edilir, yani içerme/dışlama kalıpları alt dizinlere de inilerek her alt bileşenin tam ismine uygulanır. \fBrsync\fR göndereceği dosyaları ararken, dışlama kalıpları aslında dizin basamaklama aşamasını kısa devre eder.
.sp
Örneğin, "\fI/foo/bar/baz\fR" içerilirken "\fI/foo\fR" ve "\fI/foo/bar\fR" dışlanmaz). Eğer bir kalıp belli bir üst dizini dışlıyorsa, bir düzey daha derin içerme kalıbını sonuçsuz bırakabilir, çünkü \fBrsync\fR, hiyerarşinin dışlanan bir bölümünden daha derine inmez.
.sp
Bir üst dizinin dışlanması "\fB*\fR" ile biten bir kural kullanılırken önem kazanır. Örneğin, bu çalışmayacaktır:
.sp
.RS 4
.RS 4
.nf
+ /bir/yol/bu-dosya-bulunmaz
+ /bu-dosya-bulunur
- *
.fi
.sp
.RE
.RE
.IP
Bu kural listesi, "bir" üst dizini ’\fB- *\fR’ kuralından dolayı dışlayacağından başarısız olur, yani \fBrsync\fR, "\fIbir\fR" ve "\fIbir/yol\fR" dizinleri içindeki hiçbir dosyayı ziyaret etmez. Hiyerarşideki tüm dizinleri ziyaret ettirecek bir çözüm "\fB+ */\fR" kuralının listeye dahil edilmesi ("\fB- *\fR" kuralından önce herhangi bir yere yerleştirilebilir) ve belki \fB--prune-empty-dirs\fR seçeneğinin de kullanılmasıdır. Diğer bir çözüm ise ziyaret edilmesi gereken üst dizinlerin hepsi için belirli bir içerme kuralı eklemektir. Örneğin, bu kural kümesi doğru çalışır:
.sp
.RS 4
.RS 4
.nf
+ /bir/
+ /bir/yol/
+ /bir/yol/bu-dosya-bulunur
+ /bu-dosya-da-bulunur
- *
.fi
.sp
.RE
.RE
.IP
.sp
.PP
Dışlama/içerme eşleştirme örnekleri:
.sp
.PD 1
.RS 1
.IP \(bu 3
"\fB- *.o\fR" kalıbı \fI*.o\fR ile eşleşen tüm dosya isimlerini dışlar.
.IP \(bu 3
"\fB- /foo\fR" kalıbı aktarımın kök dizinindeki "\fIfoo\fR" isimli dosyayı/dizini dışlar.
.IP \(bu 3
"\fB- foo/\fR" kalıbı "\fIfoo\fR" isimli her dizini dışlar.
.IP \(bu 3
"\fB- /foo/*/bar\fR" kalıbı aktarımın kök dizinindeki "\fIfoo\fR" dizininden iki seviye aşağıdaki "\fIbar\fR" isimli her dosyayı dışlar.
.IP \(bu 3
"\fB- /foo/**/bar\fR" kalıbı aktarımın kök dizinindeki "\fIfoo\fR" dizininden iki veya daha alt seviyedeki "\fIbar\fR" isimli her dosyayı dışlar.
.IP \(bu 3
"\fB+ */\fR", "\fB+ *.c\fR" ve "\fB- *\fR" kalıplarının birleşimi, tüm dizinler ve C kaynak dosyaları dışında herşeyi dışlar.
.IP \(bu 3
"\fB+ foo/\fR", "\fB+ foo/bar.c\fR" ve "\fB- *\fR" kalıplarının birleşimi ise sadece "\fIfoo\fR" dizinini ve "\fIfoo/bar.c\fR" dosyasını içerecektir ("\fIfoo\fR" dizini açıkça içerilmelidir yoksa "\fB*\fR" tarafından dışlanırdı).
.sp
.RE
.PD 0
"\fB+\fR" veya "\fB-\fR" iminin ardından kabul edilen değiştiriciler;
.sp
.PD 1
.RS 1
.IP \(bu 3
\fB/\fR değiştircisi, içerme/dışlama kuralının geçerli öğenin mutlak yol adıyla eşleşmesi gerektiğini belirtir. Örneğin, "\fB-/ /etc/passwd\fR" kalıbında, "\fI/etc\fR" dizininden dosya gönderilirken passwd dosyası aktarıma dahil edilmez; "\fB-⁠/ dizin/foo\fR" kalıbında ise, "\fIdizin\fR" alt dizini aktarımın kökü bile olsa içindeki "\fIfoo\fR" dosyası aktarıma dahil edilmez.
.IP \(bu 3
\fB!\fR değiştircisi, içerme/dışlama kuralının kalıp eşleşmediği takdirde etkili olmasını sağlar. Örneğin, "\fB-! */\fR" dışlama kuralı dizin olmayan herşeyi dışlar.
.IP \(bu 3
\fBC\fR değiştircisi, tüm küresel CVS-dışlama kurallarının "\fB-C\fR" yerine dışlananlar olarak eklenmesi gerektiğini belirtmek için kullanılır. Hiçbir bağımsız değişken kabul etmez.
.IP \(bu 3
\fBs\fR değiştircisi, kuralın gönderen taraf için geçerli olduğunu belirtmek için kullanılır. Gönderen tarafı etkileyen bir kural dosyaların aktarılmasını engeller. Öntanımlı kuralların gönderen taraf kuralları haline gelmesini sağlayan \fB--delete-excluded\fR belirtilmediği sürece öntanımlı kurallar her iki tarafı da etkiler. Gönderen taraf içerme/dışlama kurallarını belirtmenin başka bir yolu \fBhide\fR (\fBH\fR) ve \fBshow\fR (\fBS\fR) kurallarını kullanmaktır.
.IP \(bu 3
\fBr\fR değiştircisi, kuralın alıcı tarafa uygulanacağını belirtmekte kullanılır. Alıcı tarafı etkileyen bir kural, dosyaların silinmesini engeller. Daha fazla bilgi için üstteki \fBs\fR değiştiricisinin açıklamasına bakılabilir. Alıcı taraf içerme/dışlama kurallarını belirtmenin başka bir yolu (\fBprotect\fR (\fBP\fR) ve (\fBrisk(\fR (\fBR\fR) kurallarını kullanmaktır.
.IP \(bu 3
\fBp\fR değiştircisi, bir kuralın bozulabilir olduğunu, yani silinmekte olan dizinlerde yok sayılacağını belirtir. Örneğin, \fB--cvs-exclude\fR (\fB-C\fR) seçeneğinin "\fICVS\fR" ve "\fI*.o\fR" gibi şeyleri dışlayan öntanımlı kuralları bozulabilir olarak imlenir ve kaynaktan kaldırılan bir dizinin hedeften silinmesini engellemez.
.IP \(bu 3
\fBx\fR değiştircisi, xattr kopyalama/silme işlemlerinde xattr adlarını etkileyen kuralı belirtir (ve bu nedenle dosya/dizin adları eşleştirilirken yoksayılır). Hiçbir xattr eşleştirme kuralı belirtilmezse, öntanımlı xattr süzme kuralı kullanılır (bkz: \fB--xattrs\fR seçeneği).
.sp
.RE
.PD 0
.sp
.SS "Birleştirme Dosyası Süzme Kuralları"
Yukarıda \fBSÜZME KURALLARI\fR bölümünde bahsedildiği gibi \fBmerge\fR (\fB.\fR) ya da \fBdir-merge\fR (\fB:\fR) süzme kuralı belirtilerek tüm dosyalar süzme kurallarıyla birleştirilebilir.
.sp
İki çeşit birleştirme dosyası vardır: tek dosyalık (’\fB.\fR’) ve dizin içi dosyalar (’\fB:\fR’). Tek dosyalık bir birleştirme dosyası bir defa okunur ve "." kuralındaki süzme listesi ile birlikte işleme sokulur. Dizin içi birleştirme dosyası türünde ise, \fBrsync\fR adım adım bütün alt dizinleri tarayarak ismi belirtilen dosyayı buldukça dosya içeriğini o anki kural listesine ekler. Bu dizin içi kural dosyaları aktarımın alt dizinlerinde aranması gerektinden gönderen tarafta oluşturulmalıdır. Ayrıca, bu kural dosyalarının silinmeyecek dosyaları etkilemesi isteniyorsa, alıcı tarafa da aktarılmaları gerekecektir (aşağıda, \fBDiziniçi Birleştirme Kuralları ve Silme\fR bölümüne bakınız).
.sp
Bazı örnekler:
.sp
.RS 4
.nf
merge /etc/rsync/default.rules
\&. /etc/rsync/default.rules
dir-merge .per-dir-filter
dir-merge,n- .non-inherited-per-dir-excludes
:n- .non-inherited-per-dir-excludes
.fi
.sp
.RE
Bir \fBmerge\fR veya \fBdir-merge\fR kuralı şu belirteçleri kabul eder:
.sp
.PD 1
.RS 1
.IP \(ci 3
\fB-\fR belirteci, dosya içi açıklamalar hariç başka bir kural çözümlemesi olmaksızın, dosyanın sadece dışlama kalıplarından oluşması gerektiğini belirtir.
.IP \(ci 3
\fB+\fR belirteci, dosya içi açıklamalar hariç başka bir kural çözümlemesi olmaksızın, dosyanın sadece içerme kalıplarından oluşması gerektiğini belirtir.
.IP \(ci 3
\fBC\fR belirteci, bir dosyanın CVS uyumluluğu anlamında okunması gerektiğini belirtir. Bu ’\fBn\fR’, ’\fBw\fR’, ve ’\fB-\fR’ belirteçlerini etkin kılar, fakat ayrıca, belirtilecek liste temizleme imine de (\fB!\fR) izin verir. Bir dosya ismi belirtilmemişse dosya isminin "\fI.cvsignore\fR" olduğu varsayılır.
.IP \(ci 3
\fBe\fR belirteci, birleştirme dosyasını aktarımdan dışlayacaktır; örneğin, "\fBdir-merge,e .rules\fR" kuralı "\fBdir-merge .rules\fR" ve "\fB- .rules\fR" kuralları gibidir.
.IP \(ci 3
\fBn\fR belirteci, kuralların alt dizinlerde miras alınmayacağını belirtir.
.IP \(ci 3
\fBw\fR belirteci, kurallar için satırlara bölme değil boşluklara göre sözcük ayırma uygulanacağını belirtir. Bu ayrıca açıklamalara da izin vermeyecektir.
.sp
.RS 4
.TP 4
\fBBilgi:\fR
Kuraldan öneki ayıran boşluklar özel olarak ele alınır, yani "\fB- foo + bar\fR" dizgesi iki kurala ayrılacaktır (önek çözümlemesinin iptal edilmediği varsayımıyla).
.sp
.RE
.IP
.IP \(ci 3
Dosya öntanımlısından okunan kuralları zorlarken "\fB+\fR" veya "\fB-\fR" kuralları için yukarıdaki değiştiricilerden herhangi biri belirtilebilir (kullanışsız olacağından ! değiştiricisi hariç). Örneğin, "\fBdir-merge,s .filt\fR" ve "\fB:sC\fR" kurallarının herbiri sadece gönderen tarafta uygulanacak dizin içi birleştirme kurallarını oluştururken, "\fBmerge,-/ .excl\fR" kuralıyla \fI.excl\fR dosyasının içeriği mutlak yol dışlamaları olarak ele alınır. Birleştirme kuralı etkilenecek tarafları belirtiyorsa (\fBs\fR veya \fBr\fR değiştiricisi veya her ikisi aracılığıyla), dosyadaki kurallar tarafları belirtmemelidir (bir değiştirici veya \fBhide\fR gibi bir kural öneki aracılığıyla).
.sp
.RE
.PD 0
\fBdir-merge\fR kuralları \fBn\fR belirteci kullanılmadıkça birleştirme dosyasının bulunduğu her alt dizinde miras alınır. Her alt dizinin kuralları, miras alınan kurallara göre daha yüksek öncelik almak üzere üst dizindeki \fBdir-merge\fR kurallarının başına eklenir. Birleşik kural kümesi birleştirme dosyasının bulunduğu noktalara göre gruplanır, böylece genel kurallar listesinde evvelce belirtilmiş bir kuralın \fBdir-merge\fR kuralları ile değiştirilmesi mümkün olur. Bir diziniçi birleştirme dosyasında bir liste temizleme kuralına ("!") rastlandığında, sadece o birleştirme dosyasının bulunduğu noktaya kadar miras alınan kurallar temizlenir.
.sp
Tek dosyalık kuralın \fBdir-merge\fR dosyasından miras alınmasını engellemenin diğer bir yolu, dosyanın başına bir \fB/\fR getirmektir. Bir diziniçi birleştirme dosyasındaki bu tür kurallar birleştirme dosyasının bulunduğu dizine göre ele alınır, böylece bir "\fB/foo\fR" kalıbı \fBdir-merge\fR süzme kuralı dosyasının bulunduğu dizindeki "\fIfoo\fR" dosyasıyla eşleşir.
.sp
\fB--filter=". dosya"\fR üzerinden belirtilebilecek örnek süzme dosyası:
.sp
.RS 4
.nf
merge /home/user/.global-filter
- *.gz
dir-merge .rules
+ *.[ch]
- *.o
- foo*
.fi
.sp
.RE
Bu, \fI/home/user/.global-filter\fR dosyasının içeriğini listenin başına ekler ve ayrıca "\fI.rules\fR" dosyasını dizin içi süzme dosyasına dönüştürür. Dizin taraması başlatılmadan önce okunan tüm kurallar, (aktarımın köküyle eşleşen eğik çizgi gibi) genel sabitleme kurallarının sonuna eklenir.
.sp
Eğer bir dizin içi birleştirme dosyası, ilk aktarım dizininin üst dizini olan bir dosya yolu ile belirtilmişse, \fBrsync\fR belirtilen dosya için, aktarım dizininin başlangıcından itibaren tüm üst dizinleri tarayacaktır. Örneğin, böyle bir süzgeç (bkz: \fB-F\fR seçeneği),
.sp
.RS 4
.nf
--filter=’: /.rsync-filter’
.fi
.sp
.RE
\fBrsync\fR’e \fI.rsync-filter\fR dosyasını, aktarımın bir parçası olarak gönderilen dizinlerde normal dosya taramasına başlamadan önce aktarımın üst dizini aracılığıyla kökten aşağı doğru tüm dizinlerde aramasını söyler (Bilgi: bir \fBrsync\fR artalan süreci için kök dizin daima modülün “\fBpath\fR” değeridir).
.sp
Dizin içi birleştirme dosyaları için bu tarz ön tarama örnekleri:
.sp
.RS 4
.nf
rsync -avF /kaynak/yol/ /hedef/dizin
rsync -av --filter=’: ../../.rsync-filter’ /kaynak/yol/ /hedef/dizin
rsync -av --filter=’: .rsync-filter’ /kaynak/yol/ /hedef/dizin
.fi
.sp
.RE
İlk iki komut "\fI.rsync-filter\fR" dosyasını "\fI/kaynak/yol\fR" içinde aramaya başlamadan önce "\fI/\fR" ve "\fI/kaynak\fR" dizinlerinde arama yapar. Son komut ise, üst dizin taramasından kaçınır ve "\fI.rsync-filter\fR" dosyasını sadece aktarımın parçası olan dizinlerde arar.
.sp
"\fI.cvsignore\fR" dosyasının içeriği kalıplara dahil etmek istenirse, "\fB:C\fR" kuralı kullanılmalıdır. Bu kural, \fI.cvsignore\fR dosyalarını dizin içi birleştirme dosyaları haline getirir, fakat dosya CVS uyumluluğu bağlamında ayrıştırılır. \fB--cvs-exclude\fR (\fB-C\fR) seçeneğinin bulunduğu yerde etkili olması isteniyorsa kuralların arasına bu noktada "\fB:C\fR" kuralı yerleştirilebilir. Bu olmaksızın, \fBrsync\fR \fI.cvsignore\fR dosyası için \fBdir-merge\fR kuralını diğer kurallarının sonuna ekleyecektir (komut satırı seçeneklerinden daha düşük bir öncelik vererek). Örnek:
.sp
.RS 4
.nf
cat <<EOT | rsync -avC --filter=’. -’ a/ b
+ foo.o
:C
- *.old
EOT
rsync -avC --include=foo.o -f :C --exclude=’*.old’ a/ b
.fi
.sp
.RE
Yukarıdaki \fBrsync\fR komutlarının ikisi de aynı işi yapar. Her ikisi de diziniçi \fI.cvsignore\fR kurallarını listenin sonuna değil, ortasına ekleyecektir. Bu, onların dizine özel kurallarının sizin kurallarınızın tümünden daha düşük önemde olması yerine \fB:C\fR’ye kadar olan kuralların yerine geçmesini mümkün kılar. Diğer CVS dışlama kurallarını etkilemek için (örn, öntanımlı dışlananlar listesi, \fI$HOME/.cvsignore\fR dosyasının içeriği ve $CVSIGNORE değişkeninin değeri), \fB-C\fR komut satırı seçeneğini belirtmek yerine, kurallarınıza bir "\fB-C\fR" kuralı eklemelisiniz; örn, "\fB--filter=-C\fR".
.sp
.SS "Liste Temizleyen Süzme Kuralı"
Yukarıda \fBSÜZME KURALLARI\fR bölümünde bahsedildiği gibi mevcut içerme/dışlama listesini "\fB!\fR" süzme kuralını kullanarak temizleyebilirsiniz. "Geçerli" liste ya genel kural listesi (kural, süzme seçenekleri çözümlenirken saptanmışsa) ya da dizin içi birleştirme dosyası kurallarından (bunlar kendi alt listelerinde miras alınırlar, dolayısıyla üst dizinin kurallarını bu kuralla temizleyebilirsiniz) oluşur.
.sp
.SS "İçerme/Dışlama Kalıplarının Kök Dizinle İlişklendirilmesi"
Evvelce de bahsedildiği gibi, genel içerme/dışlama kalıpları aktarımın kök dizini ile ilişkilendirilebilir (birleştirme dosyasının dizini ile ilişklendirilen dizin içi kalıplarının tersine). Aktarımı, göndericiden alıcıya bir isim alt ağacının gönderilmesi olarak düşünürseniz, aktarımın kök dizini hedef dizinde yinelenecek olan ağaç başlangıcıdır. Bu kök, bir \fI/\fR ile başlayan kalıplarla ilişkilendirilir.
.sp
Eşleşme aktarımın köküne göre yapıldığından, kaynak yolun sonundaki bölü çizgisini değiştirmek ya da \fB--relative\fR seçeneğinin kullanımında değişiklik yapmak eşleştirmede kullanılan yolu etkiler. Aşağıda bu davranış örneklenmiştir.
.sp
Biri "\fI/home/ben/foo/bar\fR", diğeri "\fI/home/sen/bar/baz\fR" olan iki dosya olsun. Aşağıda bu iki dosyanın çeşitli komut kullanımlarındaki farklı aktarımları gösterilmiştir.
.sp
.RS 4
.nf
Örnek komut: \fBrsync -a /home/ben /home/sen /hedef\fR
+/- kalıbı: /ben/foo/bar
+/- kalıbı: /sen/bar/baz
Hedef dosya: /hedef/ben/foo/bar
Hedef dosya: /hedef/sen/bar/baz
\&
Örnek komut: \fBrsync -a /home/ben/ /home/sen/ /hedef\fR
+/- kalıbı: /foo/bar               (dikkat: "ben" yok)
+/- kalıbı: /bar/baz               (dikkat: "sen" yok)
Hedef dosya: /hedef/foo/bar
Hedef dosya: /hedef/bar/baz
\&
Örnek komut: \fBrsync -a --relative /home/ben/ /home/sen /hedef\fR
+/- kalıbı: /home/ben/foo/bar       (dikkat: tam dosyayolu)
+/- kalıbı: /home/sen/bar/baz       (keza bu da)
Hedef dosya: /hedef/home/ben/foo/bar
Hedef dosya: /hedef/home/sen/bar/baz
\&
Örnek komut: \fBcd /home; rsync -a --relative ben/foo sen/ /hedef\fR
+/- kalıbı: /ben/foo/bar      (belirtilen yolla başlar)
+/- kalıbı: /sen/bar/baz      (keza bu da)
Hedef dosya: /hedef/ben/foo/bar
Hedef dosya: /hedef/sen/bar/baz
.fi
.sp
.RE
Hangi ismi süzdüğünüzü görmenin en kolay yolu, ismin önüne bir \fI/\fR koymak ve \fB--verbose\fR kullanarak çıktıya bakmaktır (dosyalar kopyalanmadan önce komutu kuru kuruya çalıştırıp neler olacağını görmek için, \fB--dry-run\fR seçeneği kullanılabilir).
.sp
.SS "Diziniçi Birleştirme Kuralları ve Silme"
Bir silme seçeneği olmaksızın, diziniçi birleştirme kuralları sadece gönderen tarafı ilgilendirir, dolayısıyla aktarımı etkilemeksizin birleştirme dosyaları rahatça dışlanabilir. Bunu kolayca yapmanın yolu, örnekte görüldüğü gibi bu dışlamayı sağlayacak ’\fBe\fR’ belirtecini eklemektir. Bu iki komut eşdeğerdir:
.sp
.RS 4
.nf
rsync -av --filter=’: .hrc’ --exclude=.hrc konak:kaynak/dizin /hedef
rsync -av --filter=’:e .hrc’ konak:kaynak/dizin /hedef
.fi
.sp
.RE
Buna rağmen, alıcı tarafta bir silme yapmak VE bazı dosyaların da silinerek dışlanmasını isterseniz, alıcı tarafın dışlanacak dosyaları bilmesini sağlamanız gerekecektir. En kolayı, aktarıma diziniçi birleştirme dosyalarını dahil etmek ve \fB--delete-after\fR kullanmaktır. Bu yolla, birşeyleri silmeden önce alıcı tarafta gönderen taraftaki dışlama kuralları alınmış olacaktır:
.sp
.RS 4
.nf
rsync -avF --delete-after konak:kaynak/dizin /hedef
.fi
.sp
.RE
Yine de, birleştirme dosyaları aktarımın bir parçası değilse, ya bazı genel dışlama kuralları belirtilmeli (komut satırında belirtilebilir) ya da alıcı tarafta diziniçi birleştirme dosyalarının bulunması sağlanmalıdır. İlkine bir örnek (uzak \fI.kural\fR dosyalarının kendilerini dışladıkları varsayılıyor):
.sp
.RS 4
.nf
rsync -av --filter=’: .kural’ --filter=’. /benim/ek.kuralım’ \\
   --delete konak:kaynak/dizin /hedef
.fi
.sp
.RE
Bu örnekte \fIek.kuralım\fR dosyası aktarımın her iki tarafını da etkileyebilir, fakat gönderen taraftaki kurallar, diziniçi birleştirme kuralından sonra belirtildiğinden, \fI.kural\fR dosyasındaki kurallardan daha düşük öncelikli olurlar
.sp
Aşağıdaki örnekte, uzak taraf \fI.rsync-filter\fR dosyalarını aktarımdan dışlamaktadır, ancak alıcı tarafta neyin silineceğini denetim altına almak için kendi \fI.rsync-filter\fR dosyalarımızı kullanmak istiyoruz. Bunu yapmak için diziniçi birleştirme dosyalarını özellikle dışlamalı (böylece silinmezler) ve neyin silinip silinmeyeceğini denetim altına almak için kuralları yerel dosyalara koymalıyız:
.sp
.RS 4
.nf
rsync -av --filter=’:e /.rsync-filter’ --delete \\
    konak:kaynak/dizin /hedef
rsync -avFF --delete konak:kaynak/dizin /hedef
.fi
.sp
.RE
.sp
.sp
.SH "TOPLU İŞLEM DOSYASI KİPİ"
Toplu işlem dosyası kipi bir çok sistem için aynı olan güncellemeleri uygularken kullanılabilir. Bir dizin ağacının çok sayıda konak üzerinde kopyalarının bulunduğunu varsayalım. Şimdi, kaynak ağacında bazı değişiklikler olduğunu ve bunların diğer konaklara da aktarılması gerektiğini varsayalım. Bu işlemi toplu işlem dosyası kipini kullanarak yapmak için, \fBrsync\fR, kaynak ağacındaki değişiklikleri hedef ağaçlardan birinde uygulayan \fB--write-batch\fR seçeneği ile çalıştırılır. \fB--write-batch\fR seçeneği, yapılan işlemlerin aynı dizin ağacını içeren hedeflerde uygulanmak üzere bir "toplu işlem dosyası" içinde saklanmasını sağlar.
.sp
Toplu iş dosyasını bir kez oluşturmak, birden çok hedef ağacı güncellerken dosya durumu, sağlama toplamı ve veri bloğu oluşturma işlemlerini her defasında yeniden gerçekleştirme zorunluluğundan kurtarır. Aynı verileri her konağa ayrı ayrı göndermek yerine, toplu güncelleme dosyalarını birçok konağa aynı anda aktarmak için çok noktaya yayın aktarım protokolleri kullanılabilir.
.sp
Kaydedilen değişiklikleri diğer hedef ağaçlara uygulamak için \fBrsync\fR, bu dosyanın ismi \fB--read-batch\fR seçeneğinde belirtilerek çalıştırılır. \fBrsync\fR, toplu işlem dosyasında saklanmış bilgileri kullanarak hedef ağacı günceller.
.sp
Rahat olsun diye, \fB--write-batch\fR seçeneği kullanılırken ek bir dosya daha oluşturulur. Bu dosyanın ismi, toplu işlem dosyasının isminin sonuna "\fI.sh\fR" eklenerek oluşturulur. Bu \fI.sh\fR dosyası toplu işlem dosyasını kullanarak hedefi güncelleyecek komut satırını içerir. Bir Bourne (ya da benzeri) kabuk kullanılarak çalıştırılabilir. İsteğe bağlı olarak özgün yol yerine hedef ağacın dosya yolu aktarılabilir. Bu, hedef ağacın dosya oluşturulurken kullanılandan farklı olduğu durumlarda yararlıdır.
.sp
Örnekler:
.sp
.RS 4
.nf
$ rsync --write-batch=foo -a konak:/kaynak/dzn/ /hedef1/dzn/
$ scp foo* uzak:
$ ssh uzak ./foo.sh /hedef2/dzn/
\&
$ rsync --write-batch=foo -a /kaynak/dzn/ /hedef1/dzn/
$ ssh uzak rsync --read-batch=- -a /hedef2/dzn/ <foo
.fi
.sp
.RE
Bu örneklerde, \fBrsync\fR \fI/kaynak/dzn/\fR’den \fI/hedef1/dzn/\fR’i güncellemekte kullanılmış ve bu işlemi yinelemek için işlemler "\fIfoo\fR" ve "\fIfoo.sh\fR" dosyalarına kaydedilmiştir. "\fIuzak\fR" konağı toplu veri \fI/hedef2/dzn/\fR dizinine gönderilerek güncellenir. Bu iki örnek arasındaki farklar toplu işlem dosyalarının hangi esneklikte kullanılabileceğini göstermek içindir:
.sp
.PD 1
.RS 1
.IP \(ci 3
İlk örnek ilk kopyanın yerel olmayacağını gösterir -- her iki yönde de aktarım için uzak kabuk sözdizimi veya \fBrsync\fR artalan süreci sözdizimi kullanılabilir.
.IP \(ci 3
İlk örnek uzak konak üzerinde \fB--read-batch\fR seçenekli komutu çalıştırırken doğru \fBrsync\fR seçeneklerini oluşturulan "\fIfoo.sh\fR" dosyasından alır.
.IP \(ci 3
İkinci örnek toplu işlem verisini standart girdiden okur, böylece toplu işlem dosyasının önce uzak konağa kopyalanması gerekmez. Bu örnek, değiştirilmiş bir \fB--read-batch\fR seçeneğinin kullanılmasını gerektirdiğinden "\fIfoo.sh\fR" betiği kullanılmamıştır, fakat betiği kullanmak için dosya düzenlenebilir (ancak, başka bir seçeneğin (\fB--exclude-from=-\fR gibi) standart girdiyi kullanmadığından emin olunmalıdır).
.sp
.RE
.PD 0
.SS "Yetersizlikler"
\fB--read-batch\fR seçeneği, hedef ağacın, betiğin oluşturulduğu hedefteki ağaçla aynı olacağı varsayımına dayanır. Hedef ağaçta bir fark saptandığında işlem ya bir uyarı ile iptal edilir (dosya güncel görünüyorsa) ya da dosya güncellemesi yapılmaya çalışılır ve bundan sonra eğer dosyanın doğrulanması başarısız olursa işlem bir hata üretilerek iptal edilir. Bu, eğer işlem kesintiye uğratılırsa toplu okuma işleminin yeniden başlatılmasının güvenli olması gerektiği anlamına gelir. Eğer toplu güncellemenin dosyanın boyutuna ve tarihine bakılmaksızın daima yapılabilmesi istenirse, \fB-I\fR seçeneği kullanılabilir (toplu işlem dosyası okunurken). Eğer bir hata oluşursa, hedef ağaç bir ihtimal, kısmen güncellenmiş durumda olacaktır. Bu durumda, \fBrsync\fR toplu güncelleme ile değil, normal işlemle kullanılarak hedef ağaç düzeltilebilir.
.sp
Tüm hedeflerde kullanılan \fBrsync\fR sürümü, toplu işlem dosyasını üretmekte kullanılan kadar yeni olmalıdır. Eğer, toplu işlem dosyasının protokol sürümü onu okuyan \fBrsync\fR’in sürümünden daha yeni ise \fBrsync\fR bir hata vererek sonlanacaktır. Ayrıca, eski bir \fBrsync\fR sürümünün anlayabileceği \fBrsync\fR üretimi bir toplu işlem dosyasının oluşturulma yöntemi için \fB--protocol\fR seçeneğine bakılabilir. (2.6.3 sürümünde toplu işlem dosyalarının biçemi değiştiğinden, bu sürümden eski ve yeni sürümlerin toplu işlem dosyaları bir diğerinde çalışmayacaktır.)
.sp
Bir toplu işlem dosyası okunurken, siz belirtmemiş olsanız bile, işlem dosyası üretilirken kullanılan ve veriler için gerekli olan bazı seçenekler zorunlu olarak kullanılacaktır. Diğer seçenekler değiştirilebilir, hatta değiştirilmelidir de. Örneğin, \fB--write-batch\fR seçeneği \fB--read-batch\fR seçeneği olarak değişmeli, \fB--files-from\fR seçeneği kullanılmamalıdır, bunun yanında \fB--filter\fR/\fB--include\fR/\fB--exclude\fR seçenekleri ise \fB--delete\fR seçeneklerinden biri belirtilmedikçe gerekli olmaz.
.sp
\fIbetik\fR\fI.sh\fR dosyasını oluşturan kod, kabuk betiğinin sonuna tek bir listeye dönüştürerek \fB--filter\fR/\fB--include\fR/\fB--exclude\fR seçeneklerini bir belge niteliğinde ekler. Tecrübeli bir kullanıcı bu bilgiyi \fB--delete\fR tarafından silinmesi istenenlerde bir değişiklik varsa, dışlama listesini değiştirmekte kullanabilir. Normal bir kullanıcı ise, bu ayrıntıları yoksayabilir ve betikli veriyi uygun \fB--read-batch\fR komutuyla çalıştıran kabuk betiğini kullanabilir.
.sp
\fBrsync\fR’deki özgün toplu işlem kipi "\fIrsync+\fR" üzerine inşa edilmiş olsa da en son sürümde yeni bir gerçeklenim kullanılmaktadır.
.sp
.sp
.SH "SEMBOLİK BAĞLAR"
\fBrsync\fR kaynak dizini içinde bir sembolik bağ saptadığında üç temel davranış sözkonusudur:
.sp
.PD 1
.RS 1
.IP \(bu 3
Öntanımlı olarak, sembolik bağlar oldukları gibi aktarılmazlar. Bir sembolik bağ varsa, "skipping non-regular file" (normal dosya olmadığından atlanıyor) iletisini alırsınız ve dosya atlanır.
.IP \(bu 3
Eğer \fB--links\fR seçeneği belirtilmişse, sembolik bağlar alıcı tarafta aynı hedefle yeniden oluşturulur. BİLGİ: \fB--archive\fR seçeneği örtük olarak \fB--links\fR seçeneğini uygular.
.IP \(bu 3
Eğer \fB--copy-links\fR seçeneği belirtilmişse, alıcı tarafa sembolik bağın ismiyle hedefindeki dosya aktarılır.
.sp
.RE
.PD 0
\fBrsync\fR ayrıca, "güvenli" ve güvensiz" sembolik bağları ayrımsayabilir. Bunun kullanıldığı yere bir örnek olarak, bir sanalyöre yansılaması yapılırken, yörenin genel bölümüne \fI/etc/passwd\fR sembolik bağının aktarımda içerilmediğinden emin olunmak istenmesi gösterilebilir. \fB--copy-unsafe-links\fR seçeneğinin kullanımı sembolik bağların hedefindeki dosyaların kopyalanmasına sebep olacaktır. \fB--safe-links\fR seçeneğinin kullanımı ise güvensiz bağların atlanmasına sebep olacaktır.
.sp
.TP 4
\fBUyarı:\fR
\fB--safe-links\fR seçeneğinin etkili olabilmesi için \fB--links\fR seçeneğinin de belirtilmesi gerekir.
.sp
.PP
Mutlak yol içeren (\fI/\fR ile başlayan) sembolik bağlarla, boş ve bulunulan dizinden daha yukarıdaki dizinleri gösteren "\fI..\fR" bileşenlerini içeren sembolik bağlar güvensiz olarak kabul edilir.
.sp
Sembolik bağ seçeneklerinin yorumlanışı aşağıda özetlenmiştir. Liste öncelik sırasına göredir, bu nedenle kullanılan seçeneklerin tamamını içeren bir şık yoksa en yakın kısmi eşleşmeyi içeren ilk şık kullanılmalıdır:
.sp
.PD 1
.RS 1
.IP 1. 3
\fB--copy-links\fR Tüm sembolik bağlar dizin veya dosyaya dönüştürülür (diğer seçeneklerden etkilenebilecek hiçbir sembolik bağ bırakmamacasına).
.IP 2. 3
\fB--copy-dirlinks\fR Dizin sembolik bağları gerçek dizinlere dönüştürülür, diğer tüm sembolik bağlar aşağıdaki gibi ele alınır.
.IP 3. 3
\fB--links\fR \fB--copy-unsafe-links\fR Güvenli olmayan sembolik bağlar dosyalara dönüştürülür, güvenli olanların tamamı oluşturulur.
.IP 4. 3
\fB--copy-unsafe-links\fR Güvenli olmayan sembolik bağlar dosyalara dönüştürülür, güvenli olanlar uyarı verilerek atlanır.
.IP 5. 3
\fB--links\fR \fB--safe-links\fR Alıcı, aktarımda bulunan güvenli olmayan sembolik bağları oluşturmayı atlar ve güvenli olanları oluşturur.
.IP 6. 3
\fB--links\fR - Tüm sembolik bağlar oluşturulur.
.sp
.RE
.PD 0
\fB--munge-links\fR seçeneğinin etkili olduğu durumlar için seçeneğin açıklamasına bakılmalıdır.
.sp
\fB--keep-dirlinks\fR seçeneği aktarımdaki sembolik bağları değil alıcı taraftaki dizin sembolik bağlarının ele alınışını etkiler. Seçeneğin açıklamasında bu konuda bir uyarı bulunmaktadır.
.sp
.SH "TANI KOYMA"
\fBrsync\fR ara sıra biraz şifreli gibi görünen hata iletileri üretir. Bunlardan biri, en kafa karıştıcı olanı, "protocol version mismatch -- is your shell clean?" (protokol sürümü uyuşmazlığı -- kabuğunuz temiz mi?) iletisidir.
.sp
Bu ileti genellikle, \fBrsync\fR’in aktarım için kullandığı akım üzerinde istenmeyen veriler üreten uzak kabuk oluşumları ya da başlatma betiklerinizden kaynaklanır. Bu soruna tanı koymanın yolu, uzak kabuğu şöyle çalıştırmaktır:
.sp
.RS 4
.nf
ssh uzakkonak /bin/true > out.dat
.fi
.sp
.RE
Bundan sonra oluşturulan \fIout.dat\fR dosyasına bakılmalıdır. Herşey yolunda gitmişse dosya sıfır uzunlukta olacaktır. Eğer yukarıdaki hata alınıyorsa, dosya bazı veriler içerecektir. Dosyanın içeriğine bakarak bunları nelerin üretebileceği bulunmaya çalışılmalıdır. Çok yapılan bir hata, etkileşimsiz oturum açmak için komutlar içeren yanlış yapılandırılmış kabuk betikleridir (\fI.cshrc\fR veya \fI.profile\fR gibi).
.sp
Süzme kalıplarında hata ayıklamak için, \fB-vv\fR seçeneği belirtilebilir. \fBrsync\fR, bu ayrıntı seviyesinde dosyaların tek tek neden içerildiğini veya dışlandığını gösterecektir.
.sp
.SH "ÇIKIŞ DEĞERLERİ"
\fB0\fR - Başarılı
.br
\fB1\fR - Sözdizimi ya da kullanım hatası
.br
\fB2\fR - Protokol uyumsuzluğu
.br
\fB3\fR - girdi/çıktı dosyalarını, dizinlerini seçerken oluşan hatalar
.br
\fB4\fR - İstenen eylem desteklenmiyor, iki olasılık var:
.sp
.PD 1
.RS 1
.IP \(bu 3
64 bitlik dosyaları desteklemeyen bir platformda bu tür dosyalarla çalışılmak isteniyordur.
.IP \(bu 3
İstemci tarafından desteklendiği halde sunucu tarafından desteklenmeyen bir seçenek kullanılmıştır.
.sp
.RE
.PD 0
\fB5\fR - Sunucu/istemci protokolü başlatılırken hata.
.br
\fB6\fR - Artalan süreci günlüğe kayıt ekleyemiyor
.br
\fB10\fR - Soket G/Ç hatası
.br
\fB11\fR - Dosya G/Ç hatası
.br
\fB12\fR - \fBrsync\fR protokolü veri akımında hata
.br
\fB13\fR - Uygulama tanılarında hata
.br
\fB14\fR - Süreçlerarası iletişim (IPC) kodunda hata
.br
\fB20\fR - Bir SIGUSR1 veya SIGINT alındı
.br
\fB21\fR - waitpid() bazı hatalar döndürdü
.br
\fB22\fR - nüve bellek tamponları ayrılırken hata
.br
\fB23\fR - Hatadan dolayı kısmî aktarım
.br
\fB24\fR - Gözden kaçan kaynak dosyalarından dolayı kısmî aktarım
.br
\fB25\fR - --max-delete sebebiyle silme işlemi durdu
.br
\fB30\fR - Veri aktarımında zamanaşımı
.br
\fB35\fR - Artalan süreci bağlantısı için sürenin dolması bekleniyor
.sp
.SH "ORTAM DEĞİŞKENLERİ"
.TP 4
\fBCVSIGNORE\fR
\fI.cvsignore\fR dosyalarındaki gibi yoksayılacak kalıpları belirtmek için kullanılır. Daha fazla bilgi için bkz: \fB--cvs-exclude\fR
.sp
.TP 4
\fBRSYNC_ICONV\fR
\fB--iconv\fR seçeneğinin öntanımlısını belirtmek için kullanılır. 3.0.0 sürümünden itibaren desteklenmektedir.
.sp
.TP 4
\fBRSYNC_OLD_ARGS\fR
\fB--old-args\fR seçeneğinin öntanımlı olarak etkin olması için "1", tekrarlanan seçenek durumunun etkin olması için bir veya daha fazla sayıda "2" veya öntanımlı olarak etkin ise iptal etmek için "0" atanabilir. Bu ortam değişkenine sıfırdan farklı bir değer atandığında, \fBRSYNC_PROTECT_ARGS\fR değişkeninin yerini alır.
.sp
\fB--old-args\fR, \fB--no-old-args\fR veya \fB--protect-args\fR seçeneği kullanıldığında bu değişken yok sayılır.
.sp
3.2.4 sürümünden itibaren desteklenmektedir.
.sp
.TP 4
\fBRSYNC_PROTECT_ARGS\fR
\fB--protect-args\fR seçeneğinin öntanımlı olarak etkin olması için sıfırdan farklı bir değer atanmalıdır. Öntanımlı olarak etkin ise iptal etmek için "0" atanmalıdır.
.sp
\fB--old-args\fR, \fB--no-old-args\fR veya \fB--protect-args\fR seçeneği kullanıldığında bu değişken yok sayılır.
.sp
3.1.0 sürümünden itibaren desteklenmektedir. 3.2.4 ve sonrasında \fBRSYNC_OLD_ARGS\fR değişkenine sıfırdan farklı bir değer atanmışsa bu değişken yok sayılır.
.sp
.TP 4
\fBRSYNC_RSH\fR
\fBrsync\fR tarafından kullanılan öntanımlı kabuğun yerine kullanılacak kabuğu belirtmek için kullanılır. Komut isminden sonra komut satırı seçeneklerine \fB--rsh\fR (\fB-e\fR) seçeneğindeki gibi izin verilir.
.sp
.TP 4
\fBRSYNC_PROXY\fR
\fBrsync\fR sunucusuna bağlanırken \fBrsync\fR istemcisi tarafından kullanılacak vekil sunucuyu belirtmek için kullanılır. Değeri bir konak:port çifti olarak belirtilmelidir.
.sp
.TP 4
\fBRSYNC_PASSWORD\fR
Kimlik kanıtlaması gerektiren bir \fBrsync\fR sunucusuna bağlanırken komut satırında parola belirtmek zorunda kalmamak için parola bu değişkene atanabilir. Aktarım \fBssh\fR gibi bir kabuk üzerinden gerçekleştiriliyorsa bu değişkene bakılmayacaktır.
.sp
.TP 4
\fBUSER\fR veya \fBLOGNAME\fR
\fBUSER\fR veya \fBLOGNAME\fR değişkenleri bir \fBrsync\fR sunucusuna gönderilecek kullanıcı ismini belirlemek için kullanılır. Böyle bir tanım yapılmamışsa, öntanımlı kullanıcı ismi olarak "nobody" kullanılır. İkisine de tanımlama yapılmışsa \fBUSER\fR önceliklidir.
.sp
.TP 4
\fBRSYNC_PARTIAL_DIR\fR
Bu ortam değişkeni, kısmi aktarım etkinleştirmesi yapılmaksızın kısmi aktarım için kullanılacak dizini belirtir. Tüm ayrıntılar için \fB--partial-dir\fR seçeneğine bakılabilir.
.sp
.TP 4
\fBRSYNC_COMPRESS_LIST\fR
Bu ortam değişkeni, ardışık bir sıra veya azaltılmış bir ad listesi belirterek sıkıştırma algoritması uzlaşımının özelleştirilmesine olanak tanır. Kullanılabilir sıkıştırıcıların adlarını görmek için \fBrsync --version\fR komutu kullanılabilir. Tüm ayrıntılar için \fB--compress\fR seçeneğine bakılabilir.
.sp
.TP 4
\fBRSYNC_CHECKSUM_LIST\fR
Bu ortam değişkeni, ardışık bir sıra veya azaltılmış bir ad listesi belirterek sağlama toplamı algoritması uzlaşımının özelleştirilmesine olanak tanır. Kullanılabilir sağlama toplamlarının adlarını görmek için \fBrsync --version\fR komutu kullanılabilir. Tüm ayrıntılar için \fB--checksum-choice\fR seçeneğine bakılabilir.
.sp
.TP 4
\fBRSYNC_MAX_ALLOC\fR
Bu ortam değişkeni, \fB--max-alloc\fR seçeneğinin yaptığı gibi ayrılabilecek azami bellek miktarını belirtmekte kullanılır.
.sp
.TP 4
\fBRSYNC_PORT\fR
Bu ortam değişkeni \fBrsync\fR tarafından okunmaz, bunun yerine \fBrsync\fR’in sunucu bağlantısıyla çalıştığı uzak kabuğun ortamında atanır. Bu, \fBrsync-ssl\fR(1) gibi bir betiğin, kullanıcının komut satırında belirttiği port numarasını bilmesini sağlar.
.sp
.TP 4
\fBHOME\fR
Kullanıcının öntanımlı \fI.cvsignore\fR dosyasını bulmakta kullanılır.
.sp
.TP 4
\fBRSYNC_CONNECT_PROG\fR
Bu ortam değişkeni, sunucu bağlantısı yaparken kullanılacak uygulamayı belirtmek için çoğunlukla hata ayıklama kurulumlarında kullanılır. Tüm ayrıntılar için bkz: \fBRSYNC ARTALAN SÜRECİNE BAĞLANMAK\fR
.sp
.TP 4
\fBRSYNC_SHELL\fR
Bu ortam değişkeni, çoğunlukla \fBRSYNC_CONNECT_PROG\fR tarafından belirtilen uygulamanın çalıştırılacağı kabuğu belirtmek için hata ayıklama kurulumlarında kullanılır. Tüm ayrıntılar için bkz: \fBRSYNC ARTALAN SÜRECİNE BAĞLANMAK\fR
.sp
.PP
.sp
.SH "İLGİLİ DOSYALAR"
\fI/etc/rsyncd.conf\fR veya \fIrsyncd.conf\fR
.sp
.SH "İLGİLİ BELGELER"
\fBrsync-ssl\fR(1), \fBrsyncd.conf\fR(5), \fBrrsync\fR(1).
.sp
.SH "HATALAR"
.PD 1
.RS 1
.IP \(bu 3
Zamanlar unix time_t türünden değerler olarak aktarılır.
.IP \(bu 3
Dosyalar FAT dosya sistemine aktarılırken, \fBrsync\fR dosyalarda değişiklik yapmayabilir. Bkz: \fB--modify-window\fR.
.IP \(bu 3
Dosya izinleri, aygıtlar, vs. temel sayısal değerleriyle aktarılır.
.IP \(bu 3
Ayrıca, bkz: \fB--delete\fR.
.IP \(bu 3
Lütfen hataları raporlayınız! Hataları raporlamak için bkz: https://rsync.samba.org/.
.sp
.RE
.PD 0
.sp
.SH "DAHİLİ SEÇENEKLER"
\fB--server\fR ve \fB--sender\fR seçenekleri \fBrsync\fR tarafından dahili olarak kullanılır ve normal şartlar altında asla bir kullanıcı tarafından kullanılmamalıdır. Yalnızca bir \fBrsync\fR komutunu çalıştırabilen bir oturum açmak gibi belirli senaryolarda bu seçenekler hakkında biraz bilgi sahibi olmak gerekebilir. Örneğin, \fBrsync\fR paketinin \fIsupport\fR dizininde, kısıtlı bir \fBssh\fR oturumu açmak için kullanılabilen \fBrrsync\fR (restricted -kısıtlı- rsync) adında örnek bir betik bulanmaktadır.
.sp
.SH "RSYNC HAKKINDA"
\fBrsync\fR GNU kamu lisansı altında dağıtılmaktadır. Ayrıntılar için \fICOPYING\fR dosyasına bakılabilir.
.sp
Sanalyöremiz: https://rsync.samba.org/
.sp
Bu kılavuz sayfasında yanıtlarını bulamadığınız sorular için sanalyöremizde bir SSS bölümü bulunmaktadır.
.sp
\fBrsync\fR’in GitHub projesi: https://github.com/WayneD/rsync.
.sp
Bu uygulamayı beğeniyorsanız, sizden bunu duymak bizi mennun edecektir.
.sp
Bu uygulamada, Jean-loup Gailly ve Mark Adler tarafından yazılmış zlib sıkıştırma kütüphanesi kullanılmaktadır.
.sp
.SH "TEŞEKKÜR"
Gidenlere teşekkürler: John Van Essen, Matt McCutchen, Wesley W. Terpstra, David Dykstra, Jos Backus, Sebastian Krahmer, Martin Pool ve aramızdan ayrılan ama unutulmayan yoldaşımız J.W. Schultz’a.
.sp
Ayrıca, Richard Brent, Brendan Mackay, Bill Waite, Stephen Rothwell ve David Bell’e de teşekkür ederiz. Unuttuklarım varsa özür dilerim.
.sp
.SH "YAZAN"
\fBrsync\fR ilk olarak Andrew Tridgell ve Paul Mackerras tarafından yazıldı. Daha sonra bir çok kişi tarafından geliştirildi. Şu an Wayne Davison tarafından sürdürülmektedir.
.sp
Destek ve geliştirme eposta listelerimiz için bkz: https://lists.samba.org
.sp
.SH "ÇEVİREN"
© 2005, 2022 Nilgün Belma Bugüner
.br
Bu çeviri özgür yazılımdır: Yasaların izin verdiği ölçüde HİÇBİR GARANTİ YOKTUR.
.br
Lütfen, çeviri ile ilgili bildirimde bulunmak veya çeviri yapmak için https://github.com/TLBP/manpages-tr/issues adresinde "New Issue" düğmesine tıklayıp yeni bir konu açınız ve isteğinizi belirtiniz.
.sp
