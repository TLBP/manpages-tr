<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: create_type.7.xml,v 1.8 2002/12/20 22:46:09 nilgun Exp $
     ******************************************************************** -->

<refentry id="tr-man7-create_type">
 <refmeta>
  <refentrytitle>CREATE TYPE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo class="header">SQL - Dil Deyimleri</refmiscinfo>
  <refmiscinfo class="domain">PostgreSQL</refmiscinfo>
</refmeta>

 <refnamediv>
  <refname>CREATE TYPE</refname>
  <refpurpose>yeni bir veri türü tanımlar</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis><command>CREATE TYPE</command> <emphasis>isim</emphasis> <command>AS</command>
    ( <emphasis>öznitelik_ismi</emphasis> <emphasis>veri_türü</emphasis> [, ... ] )

<command>CREATE TYPE</command> <emphasis>isim</emphasis> (
    <command>INPUT =</command> <emphasis>girdi_işlevi</emphasis>,
    <command>OUTPUT =</command> <emphasis>çıktı_işlevi</emphasis>
    [ , <command>RECEIVE =</command> <emphasis>alış_işlevi</emphasis> ]
    [ , <command>SEND =</command> <emphasis>gönderim_işlevi</emphasis> ]
    [ , <command>ANALYZE =</command> <emphasis>analiz_işlevi</emphasis> ]
    [ , <command>INTERNALLENGTH =</command> { <emphasis>dahili_uzunluk</emphasis> | <command>VARIABLE</command> } ]
    [ , <command>PASSEDBYVALUE</command> ]
    [ , <command>ALIGNMENT =</command> <emphasis>hizalama</emphasis> ]
    [ , <command>STORAGE =</command> <emphasis>strateji</emphasis> ]
    [ , <command>DEFAULT =</command> <emphasis>öntanımlı</emphasis> ]
    [ , <command>ELEMENT =</command> <emphasis>öğe_türü</emphasis> ]
    [ , <command>DELIMITER =</command> <emphasis>ayraç</emphasis> ]
)
</synopsis>
 </refsynopsisdiv>
 <refsect1><title>Açıklama</title><para>
<command>CREATE TYPE</command> o anki veritabanında kullanmak için yeni bir veri türü tanımlar. Türü tanımlayan kullanıcı türün sahibi haline gelir.
  </para><para>
Eğer bir şema ismi belirtilmişse, tür bu şemada oluşturulur. Aksi takdirde, tür o anki şemada oluşturulur. Tür ismi aynı şema içinde mevcut veri türü ve veri alanı isimlerinden farklı olmalıdır. (Tablolar ilişkili veri türlerine sahip olduğundan, tür ismi ayrıca, aynı şemada mevcut tablo isimlerinden de farklı olmalıdır.)
  </para><refsect2><title>Bileşik Türler</title><para>
<command>CREATE TYPE</command>'ın ilk biçimi bir bileşik veri türü oluşturur. Bileşik tür, öznitelik isimleri ile veri türlerinin bir listesi olarak belirtilir. Bu aslında bir tablonun satır türü ile aynıdır, fakat bir tür tanımlanmak istendiğinde <command>CREATE TYPE</command> kullanarak gerçek bir tablo oluşturma ihtiyacı önlenir. Tek başına bir bileşik tür bir işlevin argümanı veya dönüş türü olarak yararlıdır.
  </para></refsect2><refsect2><title>Temel Türler</title><para>
<command>CREATE TYPE</command>'ın ikinci biçimi yeni bir temel tür oluşturur. Parametrelerin yukarıdaki sırayla belirtilmeleri şart değildir, herhangi bir sırayla belirtilebilirler, ayrıca çoğu isteğe bağlıdır. Bir türü tanımlamadan önce <command>CREATE FUNCTION</command> kullanarak iki veya daha fazla işlev tanımlanmış olmalıdır. Destek işlevleri olan <replaceable>girdi_işlevi</replaceable> ve <replaceable>çıktı_işlevi</replaceable> zorunludur. <replaceable>alış_işlevi</replaceable>, <replaceable>gönderim_işlevi</replaceable> ve <replaceable>analiz_işlevi</replaceable> ise isteğe bağlıdır. Genelde bu işlevler C gibi düşük seviyeli bir dille yazılırlar.
  </para><para>
<replaceable>girdi_işlevi</replaceable> türün harici metin gösterimini, bu türü kullanmak için tanımlanmış işleç ve işlevler tarafından kullanılan dahili gösterime çevirir. <replaceable>çıktı_işlevi</replaceable> ise bunun tersini yapar. Girdi işlevi ya <type>cstring</type> türünde tek bir argüman alacak şekilde ya da <type>cstring</type>, <type>oid</type> ve <type>integer</type> türünde üç argüman alacak şekilde bildirilebilir. İlk argüman, bir C dizgesi olarak girdi metnidir. İkinci argüman, tür bir dizi ise dizi elemanlarının nesne kimliği, bir bileşik tür ise türün kendi nesne kimliğidir. Üçüncüsü ise, biliniyorsa, hedef sütunun <literal>typmod</literal>'u, bilinmiyorsa -1'dir. Girdi işlevi yeni veri türünde bir değer ile dönmelidir. Çıktı işlevi ya yeni veri türünde tek bir argüman alacak şekilde ya da ikincisi <type>oid</type> türünde iki argüman alacak şekilde bildirilebilir. İkinci argüman yine, tür bir dizi ise dizi elemanlarının nesne kimliği, bir bileşik tür ise türün kendi nesne kimliğidir. Çıktı işlevi <type>cstring</type> türünde bir değer ile dönmelidir.
  </para><para>
İsteğe bağlı olan <replaceable>alış_işlevi</replaceable> türün harici ikilik gösterimini dahili gösterime çevirir. Eğer bu işlev yoksa, tür ikilik çıktıda rol alamaz. İkilik gösterim oldukça taşınabilir olmanın yanı sıra dahil gösterime dönüşümde ucuz olmalıdır. (Örneğin, standart tamsayı veri türlerinin harici ikilik gösterimleri ağ bayt sıralamasındayken, dahili gösterimleri makinenin doğal bayt sıralamasındadır.) Alış işlevi değerin geçerliliğinden emin olmayı sağlayacak kadar sınama yapmalıdır. Alış işlevi ya <type>internal</type> türünde tek bir argüman alacak şekilde ya da <type>internal</type> ve <type>oid</type> türünde iki argüman alacak şekilde bildirilebilir. İşlev yeni veri türünde bir değer ile dönmelidir. İlk argüman alınan bayt dizgesini tutacak bir <type>StringInfo</type> tamponuna bir göstericidir. İkinci argüman, tür bir dizi ise dizi elemanlarının nesne kimliği, bir bileşik tür ise türün kendi nesne kimliğidir. Benzer şekilde, isteğe bağlı olan <replaceable>gönderim_işlevi</replaceable> türün dahili gösterimini harici ikilik gösterime çevirir. Gönderim işlevi ya yeni veri türünde tek bir argüman alacak şekilde ya da ikincisi <type>oid</type> türünde iki argüman alacak şekilde bildirilebilir. İkinci argüman yine, tür bir dizi ise dizi elemanlarının nesne kimliği, bir bileşik tür ise türün kendi nesne kimliğidir. Gönderim işlevi <type>bytea</type> türünde bir değer ile dönmelidir.
  </para><para>
Girdi ve çıktı işlevlerinin yeni tür oluşturulmadan önce yeni türde argümanlar ve veri türleri ile bildirimlerinin nasıl yapılacağı noktasında dikkatli olmalısınız. Bunun yanıtı, önce girdi işlevinin sonra da çıktı işlevinin (ve isteniyorsa, ikilik G/Ç işlevlerinin) oluşturulması, son olarak veri türünün tanımlanması olacaktır. PostgreSQL yeni veri türünün ismini ilk defa girdi işlevinin dönüş türü olarak görecek, sistem kataloğunda basitçe yer tutucu girdi olarak bir kabuk türü ayıracak ve girdi işlevinin tanımını kabuk türüne ilintileyecektir. Benzer şekilde diğer işlevleri de (artık mevcut olan) kabuk türüne ilintileyecektir. Son olarak, <command>CREATE TYPE</command>, kabuk girdisi ile tam tür tanımını yer değiştirir ve yeni tür kullanılabilir olur.
  </para><para>
İsteğe bağlı olan <replaceable>analiz_işlevi</replaceable>, veri türündeki sütunlar için türe özgü istatistikleri hesaplar. Öntanımlı olarak, <command>ANALYZE</command> eğer tür için öntanımlı bir b-tree işleç sınıfı varsa, türün eşittir ve küçüktür işleçlerini kullanarak istatistikleri toplamaya çalışacaktır. Bileşik türlerde bu davranış elverişsiz olabilir, bu sorun özel bir analiz işlevi belirterek aşılabilir. Analiz işlevi <type>internal</type> türünde tek bir argüman alacak şekilde bildirilmeli ve <type>boolean</type> türünde bir sonuçla dönmelidir. Analiz işlevlerinin ayrıntılı uygulama arayüzü <filename>src/include/commands/vacuum.h</filename> dosyasında görülebilir.
  </para><para>
Yeni türün dahili gösteriminin ayrıntıları sadece G/Ç işlevleri ve bu türle çalışmak üzere sizin tanımladığınız işlevlerce bilinir; dahili gösteriminin  bazı özelliklerinin PostgreSQL'e ayrıca bildirilmesi gerekir. Bunların en önemlisi <replaceable>dahili_uzunluk</replaceable>'tur. Temel veri türleri, <replaceable>dahili_uzunluk</replaceable> bir pozitif tamsayı olarak verildiğinde sabit uzunlukta olabileceği gibi, <replaceable>dahili_uzunluk</replaceable> olarak <command>VARIABLE</command> belirtildiğinde değişken uzuklukta da olabilir (bu dahili olarak <literal>typlen</literal>'e -1 atanarak yapılır). Değişken uzunluklu tüm veri türleri, türün değerinin toplam uzunluğunu gösteren 4 baytlık bir tamsayı ile başlamalıdır.
  </para><para>
İsteğe bağlı olan <command>PASSEDBYVALUE</command> seçeneği bu veri türünün gösterilerek  değil değeri ile aktarılacağını belirtir. Dahili gösterimleri <type>Datum</type> türünün genişliğinden (çoğu makinede 4, birkaçında 8 bayttır) daha büyük veri türlerini değeri ile aktaramazsınız.
  </para><para>
<replaceable>hizalama</replaceable> parametresi ile belleğin ne uzunlukta adımlanarak veri türünün yerletirileceği belirtilir. İzin verilen adım uzunlukları 1, 2, 4 veya 8 bayttır. Değişken uzunluklu veri türleri için, ilk eleman bir <type>int4</type> olduğundan en az 4 baytlık adım uzunluğu belirtilmelidir.
  </para><para>
<replaceable>strateji</replaceable> parametresi ile değişken uzunluklu veri türlerinin saklama stratejilerinin seçimi mümkün olur. (Sabit uzunluklu türlerde sadece <literal>plain</literal> mümkündür.) <literal>plain</literal> ile değerin daima olduğu gibi sıkıştırılmadan saklanacağı; <literal>extended</literal> ile, değer çok uzunsa önce sıkıştırılmaya çalışılacağı, yine de uzunsa, ana tablo dışına taşınacağı; <literal>external</literal> ile, değerin ana tablo dışına taşınacağı, fakat sistemin değeri sıkıştırmaya çalışmayacağı; <literal>main</literal> ile, sıkıştırma yapılacağı ama değerin ana tablo dışına taşınmasının engelleneceği belirtilir. <literal>main</literal> saklama stratejisinde, değeri tablo satırı içinde saklamanın bir yolu yoksa, değer yine de ana tablo dışına taşınabilir, fakat değerin ana tabloda tutulması bakımından böyle bir öğe <literal>extended</literal> ve <literal>external</literal> öğelere göre daha ayrıcalıklıdır.
  </para><para>
Kullanıcının sütunlarda NULL değer istememesi durumunda <command>DEFAULT</command> seçeneği ile bir öntanımlı değer belirtilebilir. (Böyle bir öntanımlı değer bir sütuna açıkça iliştirilen bir <command>DEFAULT</command> ile o sütun için değiştirilebilir.)
  </para><para>
Türün bir dizi olduğu, dizi elemanları <command>ELEMENT</command> seçeneği kullanılarak belirtilebilir. Örneğin, 4 baytlık tamsayılardan (<type>int4</type>) oluşan bir dizi tanımlamak için, seçenek <command>ELEMENT = int4</command> şeklinde belirtilir. Dizi türler aşağıda ayrıntılı olarak açıklanmıştır.
  </para><para>
Bu türün dizisinin harici gösteriminde kullanmak üzere <replaceable>ayraç</replaceable> olarak belli bir karakter belirtilebilir. Öntanımlı ayraç virgüldür. Yalnız, burada belirtilen ayraç dizi türle değil, dizi elemanının türüyle ilgilidir.
  </para></refsect2><refsect2><title>Dizi Türler</title><para>
Bir kullanıcı tanımlı temel veri türünün her oluşturuluşunda, PostgreSQL bu veri türünün dizi türünü kendiliğinden oluşturur ve bu veri türününün ismini temel veri türü isminin başına bir alt çizgi ekleyerek oluşturur. Çözümleyici bu uzlaşımı bilir ve <literal>foo[]</literal> gibi bir türdeki sütun isteklerini <literal>_foo</literal> türündeki isteklere dönüştürür. Dolaylı oluşturulan dizi türü değişken uzunlukludur ve yerleşik girdi ve çıktı işlevleri olan <literal>array_in</literal> ve <literal>array_out</literal> işlevlerini kullanır.
   </para><para>
Madem sistem doğru dizi türünü kendiliğinden oluşturuyor, <command>ELEMENT</command> diye bir seçenek niçin var diyebilirsiniz. <command>ELEMENT</command> kullanmanın yararlı olduğu tek durum, dahili olarak aynı türde şeylerin bir dizisi olmak üzere bir sabit uzunluklu tür tanımlayıp, hem bu türün tamamı üzerinde hem de bu şeylere indisleriyle doğrudan erişerek bazı işlemler yapabilmek istenmesi durumudur. Örneğin, <type>name</type> türünün <type>char</type> elemanlarına bu yöntemle erişmek mümkündür. Bir iki boyutlu tür olan <type>point</type> türünün iki elemanına <literal>point[0]</literal> ve <literal>point[1]</literal> şeklinde erişmek mümkündür. Dahili biçim, eş sabit uzunluklu alanlardan oluştuğundan, bu oluşum sadece sabit uzunluklu türler için geçerlidir. İndislenebilir bir değişken uzunluklu tür, <literal>array_in</literal> ve <literal>array_out</literal> tarafından kullanılan  genelleştirilmiş dahili gösterime sahip olmalıdır. Tarihi sebeplerle (bu aslında doğru değil, asıl sebep bunu değiştirmek için geç kalınmış olmasıdır), sabit uzunluklu dizilerin indislemesi sıfırdan başlarken, değişken uzunluklu dizilerde birden başlar.
   </para></refsect2></refsect1><refsect1><title>Parametreler</title>
  <variablelist><varlistentry>
    <term><replaceable>isim</replaceable></term>
    <listitem><para>Oluşturulacak türün ismi (şema nitelemeli olabilir).
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>öznitelik_ismi</replaceable></term>
    <listitem><para>Bileşik tür için bir öznitelik (sütun) ismi.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>veri_türü</replaceable></term>
    <listitem><para>Bileşik türü oluşturmak üzere bir sütun veri türü olarak mevcut bir türün ismi.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>girdi_işlevi</replaceable></term>
    <listitem><para>Türün harici metin gösterimini dahili gösterime çeviren işlevin ismi.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>çıktı_işlevi</replaceable></term>
    <listitem><para>Türün dahili gösterimini harici metin gösterimine çeviren işlevin ismi.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>alış_işlevi</replaceable></term>
    <listitem><para>Türün harici ikilik gösterimini dahili gösterime çeviren işlevin ismi.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>gönderim_işlevi</replaceable></term>
    <listitem><para>Türün dahili gösterimini harici ikilik gösterime çeviren işlevin ismi.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>analiz_işlevi</replaceable></term>
    <listitem><para>Veri türü için istatistiksel analizler yapan işlevin ismi.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>dahili_uzunluk</replaceable></term>
    <listitem><para>Yeni türün dahili gösteriminin bayt cinsinden uzunluğunu belirten sayısal sabit. Öntanımlı değer türün değişken uzunluklu olacağı kabulüne dayanır.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>hizalama</replaceable></term>
    <listitem><para>Belleğin ne uzunlukta adımlanarak veri türünün yerletirileceği belirtilir. Belirtilmesi gerekliyse, <literal>char</literal>, <literal>int2</literal>, <literal>int4</literal>, ya da <literal>double</literal> olabilir. <literal>int4</literal> öntanımlıdır.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>strateji</replaceable></term>
    <listitem><para>Değişken uzunluklu veri türlerinin saklama stratejisi. Belirtilmesi gerekliyse, <literal>plain</literal>, <literal>external</literal>, <literal>extended</literal> veya <literal>main</literal> olabilir. <literal>plain</literal> öntanımlıdır.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>öntanımlı</replaceable></term>
    <listitem><para>Veri türü için öntanımlı değer. Belirtilmezse NULL öntanımlıdır.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>öğe_türü</replaceable></term>
    <listitem><para>Belirtilirse türü bir dizi yapar; bu, dizi elemanının veri türü olmalıdır.
    </para></listitem></varlistentry><varlistentry>
    <term><replaceable>ayraç</replaceable></term>
    <listitem><para>Bu türün harici dizi gösteriminde kullanılacak ayraç karakteri.
    </para></listitem></varlistentry></variablelist>
 </refsect1><refsect1 id="tr-man7-CREATETYPE-notes"><title>Ek Bilgi</title><para>
Kullanıcı tanımlı türlerin isimleri altçizgi (<literal>_</literal>) karakteri ile başlayamaz ve ençok 62 karakter uzunlukta (veya daha genel olarak, <symbol>NAMEDATALEN</symbol> - 2; tür ismi dışında bütün isimler için <symbol>NAMEDATALEN</symbol> - 1) olabilir. Altçizgi ile başlayan tür isimleri dahili olarak oluşturulan dizi tür isimleri için ayrılmıştır.
  </para><para>
7.3 öncesi <productname>PostgreSQL</productname> sürümlerinde, işlevlerin <type>opaque</type> türde yer tutuculu tür isimlerine ileri başvuruları ile yer değiştirmek üzere bir kabuk türü oluşturmaktan kaçınmak alışılmış bir durumdu. Ayrıca, 7.3 öncesinde, <type>cstring</type> argüman ve dönüş türlerinin <type>opaque</type> olarak bildirilmeleri zorunluydu. Eski döküm dosyalarını desteklemek için, <command>CREATE TYPE</command> <type>opaque</type> kullanılarak bildirilmiş işlevleri kabul edecek, fakat işlevin bildiriminin doğru tür kullanılacak şekilde değiştirilmesi hususunda bir uyarı çıktılayacaktır.
  </para></refsect1><refsect1><title>Örnekler</title><para>
Bir bileşik türün oluşturulması ve bir işlev tanımında kullanılması:
  </para><para>
<programlisting indent="4">CREATE TYPE compfoo AS (f1 int, f2 text);

CREATE FUNCTION getfoo() RETURNS SETOF compfoo AS $$
    SELECT fooid, fooname FROM foo
$$ LANGUAGE SQL;
</programlisting>
  </para><para>
<type>box</type> isminde bir temel veri türünün oluşturulması ve bir tablo tanımında kullanılması:
  </para><para>
<programlisting indent="4">CREATE TYPE box (
    INTERNALLENGTH = 16,
    INPUT = my_box_in_function,
    OUTPUT = my_box_out_function
);

CREATE TABLE myboxes (
    id integer,
    description box
);
</programlisting>
  </para><para>
<type>box</type> türünün dahili yapısı <type>float4</type> türünde 4 elemanlı bir dizi ise:
  </para><para>
<programlisting indent="4">CREATE TYPE box (
    INTERNALLENGTH = 16,
    INPUT = my_box_in_function,
    OUTPUT = my_box_out_function,
    ELEMENT = float4
);
</programlisting>
  </para><para>
Bu şekilde, <type>box</type> türündeki değerin elemanlarına indisleri ile erişilebileceği gibi, tür yukarıdaki gibi de davranır.
  </para><para>
Büyük bir nesne türü oluşturulması ve bir tablo tanımında kullanılması:
  </para><para>
<programlisting indent="4">
CREATE TYPE bigobj (
    INPUT = lo_filein, OUTPUT = lo_fileout,
    INTERNALLENGTH = VARIABLE
);
CREATE TABLE big_objs (
    id integer,
    obj bigobj
);
</programlisting>
  </para><para>
 Girdi ve çıktı işlevleri dahil daha fazla örneği,<sbr/><ulink url="http://www.postgresql.org/docs/8.0/static/xtypes.html"/> adresinde bulabilirsiniz.
  </para></refsect1><refsect1><title>Uyumluluk</title><para>
Bu <command>CREATE TYPE</command> bir <productname>PostgreSQL</productname> oluşumudur. SQL:1999 ve sonraki standartlarda da bir <command>CREATE TYPE</command> vardır ama ayrıntıda daha farklıdır.
  </para></refsect1><refsect1><title>İlgili Belgeler</title><para>
<link linkend="tr-man7-create_function" xreflabel="CREATE FUNCTION"/>,
<link linkend="tr-man7-drop_type" xreflabel="DROP TYPE"/>,
<link linkend="tr-man7-alter_type" xreflabel="ALTER TYPE"/>.
 </para></refsect1><refsect1><title>Çeviren</title><para>
Nilgün Belma Bugüner <email>nilgun@belgeler·gen·tr</email>, Nisan 2005
</para></refsect1>
</refentry>



