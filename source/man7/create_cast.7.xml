<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: create_cast.7.xml,v 1.8 2002/12/20 22:46:09 nilgun Exp $
     ******************************************************************** -->

<refentry id="tr-man7-create_cast">
 <refmeta>
  <refentrytitle>CREATE CAST</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo class="header">SQL - Dil Deyimleri</refmiscinfo>
  <refmiscinfo class="domain">PostgreSQL</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE CAST</refname>
  <refpurpose>iki veri türü arasında yeni bir dönüşüm tanımlar</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis><command>CREATE CAST</command> (<emphasis>kaynak_tür</emphasis> <command>AS</command> <emphasis>hedef_tür</emphasis>)
    <command>WITH FUNCTION</command> <emphasis>işlev_ismi</emphasis> (<emphasis>arg_türü</emphasis>)
    [ <command>AS ASSIGNMENT</command> | <command>AS IMPLICIT</command> ]

<command>CREATE CAST</command> (<emphasis>kaynak_tür</emphasis> <command>AS</command> <emphasis>hedef_tür</emphasis>)
    <command>WITHOUT FUNCTION</command>
    [ <command>AS ASSIGNMENT</command> | <command>AS IMPLICIT</command> ]
</synopsis>
 </refsynopsisdiv>
 <refsect1><title>Açıklama</title><para>
<command>CREATE CAST</command> iki veri türü arasında yeni bir dönüşüm tanımlar. Örnek:
  </para><para>
<programlisting>    SELECT CAST(42 AS text);
</programlisting>
  </para><para>
Burada 42 tamsayı sabiti evvelce tanımlanmış bir işlev (<literal>text(int4)</literal> işlevi) çağrılarak <type>text</type> türüne dönüştürülmektedir. (Eğer böyle bir tür dönüşümü tanımlanmamışsa, dönüşüm başarısız olur.)
  </para><para>
İki tür <emphasis>ikilik olarak uyumlu</emphasis> olabilir, yani herhangi bir işlev çağrılmadan serbestçe bir türden diğer türe dönüştürülebilir.  Bu ilgili değerlerin aynı dahili gösterime sahip olmalarını gerektirir. Örneğin, <type>text</type> ve <type>varchar</type> türleri ikilik olarak uyumlu türlerdir (ya da dahili gösterimleri aynı olan türlerdir).
  </para><para>
Öntanımlı olarak, bir tür dönüşümü sadece <command>CAST</command><literal>(<emphasis>x </emphasis><command>AS </command><emphasis>tür_ismi</emphasis>)</literal> veya <literal><emphasis>x</emphasis>::<emphasis>tür_ismi</emphasis></literal> gibi doğrudan bir tür dönüşüm isteği ile yapılabilir.
  </para><para>
Eğer tür dönüşümü <command>AS ASSIGNMENT</command> ile tanımlanmışsa, bir sütuna hedef veri türünde atama şeklinde örtük olarak çağrılabilir.  Örneğin, <literal>foo.f1</literal>'nin <type>text</type> türünde bir sütun olduğunu varsayalım,
  </para><para>
<programlisting>    INSERT INTO foo (f1) VALUES (42);
</programlisting>
  </para><para>
eğer <type>integer</type> türünden <type>text</type> türüne dönüşüm <command>AS ASSIGNMENT</command> imli olarak oluşturulmuşsa, bu dönüşüm mümkün olur, yoksa olmaz. (Böyle tür dönüşümlerine genellikle, <wordasword>atamalı tür dönüşümü</wordasword> diyoruz.)
  </para><para>
Eğer tür dönüşümü <command>AS IMPLICIT</command> ile oluşturulmuşsa, herhangi bir bağlam içinde, sadece atama ile değil, bir ifadenin içinde kullanıldığında bile dolaylı olarak böyle bir tür dönüşümü yapılabilir. Örneğin, <literal>||</literal> işleci <type>text</type> türünde terimler aldığından,
  </para><para>
<programlisting>    SELECT 'The time is ' || now();
</programlisting>
  </para><para>
eğer <type>timestamp</type> türünden <type>text</type> türüne dönüşüm <command>AS IMPLICIT</command> imli olarak oluşturulmuşsa, bu dönüşüm mümkün olur. Aksi takdirde tür dönüşümünün doğrudan yazılması gerekir. Örnek:
  </para><para>
<programlisting>    SELECT 'The time is ' || CAST(now() AS text);
</programlisting>
  </para><para>
(Böyle tür dönüşümlerine genellikle, <wordasword>dolaylı tür dönüşümü</wordasword> diyoruz.)
  </para><para>
Tür dönüşümlerini dolaylı olarak yapılması için imlerken biraz tutucu olmakta fayda vardır. Dolaylı dönüşümde bir aşırı bolluk, çok sayıda yorumun mümkün olması nedeniyle, PostgreSQL'in şaşırtıcı komut yorumları seçmesine ya da komutları tamamen çözümleyememesine sebep olabilir. En iyisi sadece aynı genel tür kategorisindeki türler arasında bilgi koruyan dönüşümler için dolaylı olarak çağrılabilen  bir tür dönüşümü yapmaktır. Örneğin, <type>int2</type>'den <type>int4</type>'e tür dönüşümünün dolaylı olması kabul edilebilir, fakat <type>float8</type>'den <type>int4</type>'e dönüşüm şüphesiz atama yoluyla yapılmalıdır. <type>text</type>'den <type>int4</type>'e tür dönüşümü gibi farklı tür kategorileri arasındaki tür dönüşümünü açıkça belirterek yapmak en iyisidir.
  </para><para>
Bir tür dönüşümünün mümkün olması için kendi kaynak ve hedef veri türleriniz olmalıdır. İkilik olarak uyumlu tür dönüşümü oluşturabilmek için ise ayrıcalıklı kullanıcı olmalısınız. (Bu kısıtlamanın sebebi, hatalı yapılan ikilik uyumlu tür dönüşümlerinin sunucunun kolayca çökmesine sebep olmasıdır.)
  </para></refsect1><refsect1><title>Parametreler</title>
   <variablelist><varlistentry>
     <term><replaceable>kaynak_tür</replaceable></term>
     <listitem><para>Tür dönüşümünün kaynak veri türünün ismi.
     </para></listitem></varlistentry><varlistentry>
     <term><replaceable>hedef_tür</replaceable></term>
     <listitem><para>Tür dönüşümünün hedef veri türünün ismi.
     </para></listitem></varlistentry><varlistentry>
     <term><emphasis>işlev_ismi</emphasis>(<emphasis>arg_türü</emphasis>)</term>
     <listitem><para>Tür dönüşümünü gerçekleştirecek işlev. İşlevin ismi şema nitelemeli olabilir; değilse, işlev şema arama yolunda aranacaktır. İşlevin sonuç veri türü tür dönüşümünün hedef veri türü ile eşleşmelidir. Argümanlar aşağıda açıklanmıştır.
     </para></listitem></varlistentry><varlistentry>
     <term><command>WITHOUT FUNCTION</command></term>
     <listitem><para>Kaynak ve hedef türlerin ikilik olarak uyumlu olduğunu belirtir, böylece tür dönüşümünü gerçekleştirmek için bir işleve gerek kalmaz.
     </para></listitem></varlistentry><varlistentry>
     <term><command>AS ASSIGNMENT</command></term>
     <listitem><para>Tür dönüşümünün atama bağlamında dolaylı olarak uygulanabileceğini belirtir.
     </para></listitem></varlistentry><varlistentry>
     <term><command>AS IMPLICIT</command></term>
     <listitem><para>Tür dönüşümünün herhangi bir bağlamda dolaylı olarak uygulanabileceğini belirtir.
     </para></listitem></varlistentry></variablelist><para>
Tür dönüşümü gerçekleme işlevleri bir, iki ya da üç argümanlı olabilir. İlk argümanın türü tür dönüşümünün kaynak veri türü ile aynı olmalıdır. Varsa, ikinci argüman <type>integer</type> türünde olmalıdır; hedef türle ilgili tür dönüştürücüyü, yoksa <literal>-1</literal> değerini alır. Varsa, üçüncü argüman <type>boolean</type> türünde olmalıdır; dönüşüm açıkça belirtilerek uygulanacaksa <literal>true</literal>, aksi takdirde  <literal>false</literal> değerini alır. (Tuhaf bir biçimde, SQL belirtimi bazı durumlarda, doğrudan ve dolaylı tür dönüşümleri için farklı davranışlar talep eder. Bu argüman böyle tür dönüşümlerini gerçekleştirmesi istenen işlevler için sağlanmıştır. Kendi veri türlerinizi buna konu olacak şekilde tasarlamanız tavsiye edilmez.)
  </para><para>
Normal olarak bir tür dönüşümü farklı kaynak ve hedef veri türlerine sahip olmalıdır. Yine de, dönüşümü gerçekleştirecek işlevin birden fazla argümanı olması durumunda, kaynak ve hedef veri türleri aynı olan tür dönüşümü bildirimlerine izin verilir. Bu, sistem kataloglarında türe özel uzunluk zorlama işlevlerini ifade etmekte kullanılır. İsimli işlev, tür değerini ikinci argümanında belirtilen tür değiştirici değerine zorlamak için kullanılır. (Dil kuralları sadece belli yerleşik veri türlerinin tür değiştiricilere sahip olmasına izin verdiğinden, bu özellik kullanıcı tanımlı hedef türlerde kullanmak için değildir, burada bütünlüğü sağlamak için bahsettik.)
  </para><para>
Bir tür dönüşümü farklı kaynak ve hedef türleri ile birden fazla argüman alan bir işleve sahip olduğunda, bir türden diğer türe dönüşümü yaparken aynı adımda bir uzunluk zorlaması da yapılıyor demektir. Böyle bir girdi mevcut olmadığı zaman, bir tür dönüşümü kullanan bir tür zorlaması iki adım gerektirir; birincisinde veri türleri arasında dönüşüm yapılır, ikincisinde tür değiştirici uygulanır.
  </para></refsect1><refsect1><title>Ek Bilgi</title><para>
Kullanıcı tanımlı bir tür dönüşümünü kaldırmak için  <link linkend="tr-man7-drop_cast" xreflabel="DROP CAST"/> kullanılır.
  </para><para>
Türler arasındaki dönüşümün her iki yönde de yapılmasını istiyorsanız, her iki tür dönüşümünü açıkça bildirmeniz gerektiğini unutmayın.
  </para><para>
<productname>PostgreSQL</productname> 7.3 öncesinde, her işlev bir veri türü ile aynı ismi alır, bu veri türünü döndürür ve farklı türde bir argüman alıp özdevinimli olarak bir tür dönüşüm işlevi olurdu. Bu uzlaşım şemaların tanıtımıyla ve sistem kataloglarında ikilik uyumlu tür dönüşümlerinin ifade edilebilmesi için terkedildi. Yerleşik tür dönüşüm işlevleri hala bu isimleme şemasını kullanıyor olsa da, <structname>pg_cast</structname> sistem kataloğunda da tür dönüşümleri olarak gösterilmiş olması gerekir.
  </para><para>
Gerekli olmadığında, tür dönüşüm gerçekleme işlevlerinin hedef veri türünde isimlendirilmesi uzlaşımını kullanmaya devam etmenizi öneririz. Çoğu kullanıcı, <literal><emphasis>türismi</emphasis>(<emphasis>x</emphasis>)</literal> biçiminde veri türlerini dönüştürmeye alışmıştır. Bu yazım şekli aslında bir tür dönüşümü gerçekleştirme işlevi çağrısından ne eksik ne de fazladır; bir tür dönüşümü olarak özellikle ele alınmaz. Eğer sizin dönüşüm işlevleriniz bu uzlaşıma uygun olarak isimlendirilmemişse, siz şaşırtıcı kullanıcılarsınız demektir. PostgreSQL farklı argüman türlerine sahip işlevlere aynı ismin verilmesine izin verdiğinden farklı veri türlerine dönüşüm için hepsi hedef veri türünde isimlendirilmiş çok sayıda dönüşüm işlevine sahip olmanın bir zorluğu yoktur.
  </para><para><note><para>
Önceki paragrafta küçük bir zararsız yalan vardır: <structname>pg_cast</structname>'ın bir görünüşte işlev çağrısının anlamını çözümlemekte kullanılacağı bir durum hala vardır. Eğer <literal><emphasis>isim</emphasis>(<emphasis>x</emphasis>)</literal> gibi bir işlev çağrısı aslında bir işlevle eşleşmiyorsa, fakat <replaceable>isim</replaceable> bir veri türünün ismiyse ve <structname>pg_cast</structname> <replaceable>x</replaceable> türünden bu türe bir ikilik uyumlu tür dönüşümünü gösteriyorsa, çağrı bir açıkça tür dönüşümü olarak yorumlanacaktır. İkilik olarak uyumlu tür dönüşümleri bir işleve karşılık olmasalar bile işlevsel  sözdizimi kullanılarak çağrılabileceğinden böyle bir olağandışılık vardır.
   </para></note></para></refsect1><refsect1><title>Örnekler</title><para>
<literal>int4(text)</literal> işlevini kullanarak <type>text</type> türünden <type>int4</type> türüne bir tür dönüşümü oluşturmak için:
  </para><para>
<programlisting>    CREATE CAST (text AS int4) WITH FUNCTION int4(text);
</programlisting>
  </para><para>
(Bu tür dönüşümü sistemde zaten önceden tanımlanmıştır.)
  </para></refsect1><refsect1><title>Uyumluluk</title><para>
SQL:1999'un ikilik uyumlu türler veya gerçekleme işlevlerinin ek argümanlarını hesaba katmaması dışında, <command>CREATE CAST</command> SQL:1999 ile uyumludur. <command>AS IMPLICIT</command> de bir <productname>PostgreSQL</productname> oluşumudur.
  </para></refsect1><refsect1><title>See Also</title><para>
<link linkend="tr-man7-create_function" xreflabel="CREATE FUNCTION"/>,
<link linkend="tr-man7-create_type" xreflabel="CREATE TYPE"/>,
<link linkend="tr-man7-drop_cast" xreflabel="DROP CAST"/>.
  </para></refsect1><refsect1><title>Çeviren</title><para>
Nilgün Belma Bugüner <email>nilgun@belgeler·gen·tr</email>, Nisan 2005
</para></refsect1>
</refentry>


